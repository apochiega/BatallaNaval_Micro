   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.clear_disp,"ax",@progbits
  11               	.global	clear_disp
  13               	clear_disp:
  14               	.LFB72:
  15               		.file 1 "../src/main.c"
   1:../src/main.c **** 
   2:../src/main.c **** #include <asf.h>
   3:../src/main.c **** #include <stdint.h>
   4:../src/main.c **** #define F_CPU 16000000UL // Defining the CPU Frequency
   5:../src/main.c **** #include <util/delay.h>  // Generates a Blocking Delay
   6:../src/main.c **** 
   7:../src/main.c **** #include "UART.h"
   8:../src/main.c **** #include "ADC.h"
   9:../src/main.c **** #include "Timer.h"
  10:../src/main.c **** /*
  11:../src/main.c **** GccWS2812_V3
  12:../src/main.c **** This version works like the assembly version "ws2812 efecto1"
  13:../src/main.c **** The main differences are:
  14:../src/main.c **** 1- The Assembly code is the same but the compiler is the GCC version
  15:../src/main.c ****    so pay attention to the differences.
  16:../src/main.c **** Eg.: .equ is replaced by #define , HIGH and LOW is replaced by hi8 and lo8
  17:../src/main.c ****      The argument of the latter macros (hi8,lo8) is not more 2*Address_Label
  18:../src/main.c **** 	 #define __SFR_OFFSET 0 must be defined
  19:../src/main.c **** 	 Macros syntax is different
  20:../src/main.c **** 	 .def is replaced with #define 
  21:../src/main.c **** 	 Tables in program segment are defined using .byte (not .db)
  22:../src/main.c **** */
  23:../src/main.c **** 
  24:../src/main.c **** 
  25:../src/main.c **** 
  26:../src/main.c **** typedef struct 
  27:../src/main.c **** 		{
  28:../src/main.c **** 			uint8_t green;   // WS2812 order (GRB)
  29:../src/main.c **** 			uint8_t red;
  30:../src/main.c **** 			uint8_t blue;
  31:../src/main.c **** 		} RGBled;
  32:../src/main.c **** 		
  33:../src/main.c **** 
  34:../src/main.c **** typedef struct  
  35:../src/main.c **** 		{
  36:../src/main.c **** 			RGBled color;
  37:../src/main.c **** 			uint8_t barco;			//	int simulando Bool type
  38:../src/main.c **** 			uint8_t disparado;		//	int simulando Bool type
  39:../src/main.c **** 		} CasillaDeMatriz;
  40:../src/main.c **** 		
  41:../src/main.c **** 
  42:../src/main.c **** typedef struct  
  43:../src/main.c **** 		{
  44:../src/main.c **** 			uint8_t x;		//	Coordenadas
  45:../src/main.c **** 			uint8_t y;
  46:../src/main.c **** 			uint8_t largoX;		//Largo del barco
  47:../src/main.c **** 			uint8_t largoY;
  48:../src/main.c **** 		} Barco;
  49:../src/main.c **** 		
  50:../src/main.c **** 
  51:../src/main.c **** 
  52:../src/main.c **** typedef RGBled (*P2RGB) ;
  53:../src/main.c **** 
  54:../src/main.c **** // Variables  
  55:../src/main.c **** 
  56:../src/main.c **** P2RGB p2disp;
  57:../src/main.c **** 
  58:../src/main.c **** RGBled GamePointer = {25,0,0};	//Verde
  59:../src/main.c **** RGBled Hundido = {0,30,0};		//Rojo
  60:../src/main.c **** RGBled Agua = {0,0,30};			//Azul
  61:../src/main.c **** RGBled Danado = {30,30,0};		//Amarillo
  62:../src/main.c **** RGBled Apagado={0,0,0};	
  63:../src/main.c **** RGBled display_rgb[8][8];	
  64:../src/main.c **** 
  65:../src/main.c **** 
  66:../src/main.c **** 	
  67:../src/main.c **** 
  68:../src/main.c **** 		
  69:../src/main.c **** // Assembly functions
  70:../src/main.c **** extern void init_ws2812(void);
  71:../src/main.c **** extern void wrt_ws2812(P2RGB);
  72:../src/main.c **** extern void wrt_Digit(uint8_t, uint8_t);
  73:../src/main.c **** extern void wrt_Digit_Init(void);
  74:../src/main.c **** 
  75:../src/main.c **** // Local prototypes
  76:../src/main.c **** 
  77:../src/main.c **** void TB_joy1(void);
  78:../src/main.c **** 
  79:../src/main.c **** void softdelay(void);
  80:../src/main.c **** void clear_disp(void);
  81:../src/main.c **** uint8_t msg[] = "Hello from ATmega328p\r\n  ";
  82:../src/main.c **** 
  83:../src/main.c **** void ADCTestBench(void);
  84:../src/main.c **** #define LED (1<<5)				//Led
  85:../src/main.c **** int main (void)
  86:../src/main.c **** {
  87:../src/main.c **** //volatile	int k;
  88:../src/main.c **** int k,i;
  89:../src/main.c **** 				
  90:../src/main.c **** 			init_ws2812();		//Initialize RGB Display driver
  91:../src/main.c **** 			init_RTI();			//Initialize Periodic Real Time Interrupt(Timer)
  92:../src/main.c **** 			UART_Init();		//Initialize serial port driver (UART)
  93:../src/main.c **** 			adc_init();			//Initialize Analog to digital converter (Joystick)
  94:../src/main.c **** 			wrt_Digit_Init();
  95:../src/main.c **** 		
  96:../src/main.c **** 			p2disp=&display_rgb[0][0];
  97:../src/main.c **** 			
  98:../src/main.c **** 			sei();					// Enable global Interrupts
  99:../src/main.c **** 
 100:../src/main.c **** 			UART_putstring(msg);
 101:../src/main.c **** 			
 102:../src/main.c **** 			wrt_Digit(4,3);
 103:../src/main.c **** 
 104:../src/main.c **** 			clear_disp();
 105:../src/main.c **** 	        wrt_ws2812(p2disp);
 106:../src/main.c **** 			
 107:../src/main.c **** 			_delay_ms(500);
 108:../src/main.c **** 			
 109:../src/main.c **** 			
 110:../src/main.c **** 			for(k=0;k<=7;k++)
 111:../src/main.c **** 			{
 112:../src/main.c **** 			display_rgb[k][0]=Hundido;
 113:../src/main.c **** 			display_rgb[k][4]=GamePointer;
 114:../src/main.c **** 			display_rgb[k][7]=Agua;
 115:../src/main.c **** 			display_rgb[k][3]=Danado;
 116:../src/main.c **** 			display_rgb[k][5]=Danado;
 117:../src/main.c **** 			}
 118:../src/main.c **** 
 119:../src/main.c **** 			wrt_ws2812(p2disp);
 120:../src/main.c **** 			
 121:../src/main.c **** 			
 122:../src/main.c **** 			_delay_ms(300);
 123:../src/main.c **** 			clear_disp();
 124:../src/main.c **** 			
 125:../src/main.c **** 			for(i=0;i<=3;i++)
 126:../src/main.c **** 			{
 127:../src/main.c **** 				display_rgb[3-i][3-i]=Hundido;
 128:../src/main.c **** 				display_rgb[4+i][3-i]=GamePointer;
 129:../src/main.c **** 				display_rgb[3-i][4+i]=Danado;
 130:../src/main.c **** 				display_rgb[4+i][4+i]=Agua;
 131:../src/main.c **** 		
 132:../src/main.c **** 				wrt_ws2812(p2disp);
 133:../src/main.c **** 		
 134:../src/main.c **** 				_delay_ms(100);
 135:../src/main.c **** 				clear_disp();  
 136:../src/main.c **** 			}
 137:../src/main.c **** 
 138:../src/main.c **** while (1)
 139:../src/main.c **** {
 140:../src/main.c **** 	TB_joy1();
 141:../src/main.c **** 	_delay_ms(100);
 142:../src/main.c **** }
 143:../src/main.c **** 			
 144:../src/main.c **** 			ADCTestBench();
 145:../src/main.c **** 			uart_test(); 
 146:../src/main.c **** 			
 147:../src/main.c **** 			while(1)
 148:../src/main.c **** 			{
 149:../src/main.c **** 				wrt_Digit(4,4);
 150:../src/main.c **** 				_delay_ms(4);
 151:../src/main.c **** 			};		// Just in case....  
 152:../src/main.c **** }
 153:../src/main.c **** 
 154:../src/main.c **** void clear_disp(void)
 155:../src/main.c **** {
  16               		.loc 1 155 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LVL0:
  23 0000 E0E0      		ldi r30,lo8(display_rgb)
  24 0002 F0E0      		ldi r31,hi8(display_rgb)
  25 0004 40E0      		ldi r20,lo8(display_rgb+192)
  26 0006 50E0      		ldi r21,hi8(display_rgb+192)
  27 0008 00C0      		rjmp .L2
  28               	.LVL1:
  29               	.L3:
  30               	.LBB20:
  31               	.LBB21:
 156:../src/main.c **** 	for(int r=0;r<=7;r++)
 157:../src/main.c **** 		for(int c=0;c<=7;c++)
 158:../src/main.c **** 				display_rgb[r][c]=Apagado;
  32               		.loc 1 158 0 discriminator 3
  33 000a 8091 0000 		lds r24,Apagado
  34 000e 9091 0000 		lds r25,Apagado+1
  35 0012 A091 0000 		lds r26,Apagado+2
  36 0016 8193      		st Z+,r24
  37 0018 9193      		st Z+,r25
  38 001a A193      		st Z+,r26
  39               	.LVL2:
 157:../src/main.c **** 				display_rgb[r][c]=Apagado;
  40               		.loc 1 157 0 discriminator 3
  41 001c E217      		cp r30,r18
  42 001e F307      		cpc r31,r19
  43 0020 01F4      		brne .L3
  44 0022 F901      		movw r30,r18
  45               	.LBE21:
 156:../src/main.c **** 	for(int r=0;r<=7;r++)
  46               		.loc 1 156 0 discriminator 2
  47 0024 4217      		cp r20,r18
  48 0026 5307      		cpc r21,r19
  49 0028 01F0      		breq .L1
  50               	.L2:
  51               	.LVL3:
  52 002a 9F01      		movw r18,r30
  53 002c 285E      		subi r18,-24
  54 002e 3F4F      		sbci r19,-1
  55 0030 00C0      		rjmp .L3
  56               	.LVL4:
  57               	.L1:
  58 0032 0895      		ret
  59               	.LBE20:
  60               		.cfi_endproc
  61               	.LFE72:
  63               		.section	.text.softdelay,"ax",@progbits
  64               	.global	softdelay
  66               	softdelay:
  67               	.LFB73:
 159:../src/main.c **** }
 160:../src/main.c **** 
 161:../src/main.c **** void softdelay(void)
 162:../src/main.c **** {
  68               		.loc 1 162 0
  69               		.cfi_startproc
  70 0000 CF93      		push r28
  71               	.LCFI0:
  72               		.cfi_def_cfa_offset 3
  73               		.cfi_offset 28, -2
  74 0002 DF93      		push r29
  75               	.LCFI1:
  76               		.cfi_def_cfa_offset 4
  77               		.cfi_offset 29, -3
  78 0004 00D0      		rcall .
  79 0006 00D0      		rcall .
  80               	.LCFI2:
  81               		.cfi_def_cfa_offset 8
  82 0008 CDB7      		in r28,__SP_L__
  83 000a DEB7      		in r29,__SP_H__
  84               	.LCFI3:
  85               		.cfi_def_cfa_register 28
  86               	/* prologue: function */
  87               	/* frame size = 4 */
  88               	/* stack size = 6 */
  89               	.L__stack_usage = 6
 163:../src/main.c **** 	volatile long int d;
 164:../src/main.c **** 	
 165:../src/main.c **** 	for (d=400000;d;d--)
  90               		.loc 1 165 0
  91 000c 80E8      		ldi r24,lo8(-128)
  92 000e 9AE1      		ldi r25,lo8(26)
  93 0010 A6E0      		ldi r26,lo8(6)
  94 0012 B0E0      		ldi r27,0
  95 0014 8983      		std Y+1,r24
  96 0016 9A83      		std Y+2,r25
  97 0018 AB83      		std Y+3,r26
  98 001a BC83      		std Y+4,r27
  99 001c 8981      		ldd r24,Y+1
 100 001e 9A81      		ldd r25,Y+2
 101 0020 AB81      		ldd r26,Y+3
 102 0022 BC81      		ldd r27,Y+4
 103 0024 892B      		or r24,r25
 104 0026 8A2B      		or r24,r26
 105 0028 8B2B      		or r24,r27
 106 002a 01F0      		breq .L6
 107               	.L9:
 108               		.loc 1 165 0 is_stmt 0 discriminator 3
 109 002c 8981      		ldd r24,Y+1
 110 002e 9A81      		ldd r25,Y+2
 111 0030 AB81      		ldd r26,Y+3
 112 0032 BC81      		ldd r27,Y+4
 113 0034 0197      		sbiw r24,1
 114 0036 A109      		sbc r26,__zero_reg__
 115 0038 B109      		sbc r27,__zero_reg__
 116 003a 8983      		std Y+1,r24
 117 003c 9A83      		std Y+2,r25
 118 003e AB83      		std Y+3,r26
 119 0040 BC83      		std Y+4,r27
 120 0042 8981      		ldd r24,Y+1
 121 0044 9A81      		ldd r25,Y+2
 122 0046 AB81      		ldd r26,Y+3
 123 0048 BC81      		ldd r27,Y+4
 124 004a 892B      		or r24,r25
 125 004c 8A2B      		or r24,r26
 126 004e 8B2B      		or r24,r27
 127 0050 01F4      		brne .L9
 128               	.L6:
 129               	/* epilogue start */
 166:../src/main.c **** 	{
 167:../src/main.c **** 	};
 168:../src/main.c **** 	
 169:../src/main.c **** }
 130               		.loc 1 169 0 is_stmt 1
 131 0052 0F90      		pop __tmp_reg__
 132 0054 0F90      		pop __tmp_reg__
 133 0056 0F90      		pop __tmp_reg__
 134 0058 0F90      		pop __tmp_reg__
 135 005a DF91      		pop r29
 136 005c CF91      		pop r28
 137 005e 0895      		ret
 138               		.cfi_endproc
 139               	.LFE73:
 141               		.section	.text.ADCTestBench,"ax",@progbits
 142               	.global	ADCTestBench
 144               	ADCTestBench:
 145               	.LFB74:
 170:../src/main.c **** 
 171:../src/main.c **** 
 172:../src/main.c **** void ADCTestBench(void)
 173:../src/main.c **** {
 146               		.loc 1 173 0
 147               		.cfi_startproc
 148 0000 CF93      		push r28
 149               	.LCFI4:
 150               		.cfi_def_cfa_offset 3
 151               		.cfi_offset 28, -2
 152 0002 DF93      		push r29
 153               	.LCFI5:
 154               		.cfi_def_cfa_offset 4
 155               		.cfi_offset 29, -3
 156 0004 00D0      		rcall .
 157 0006 00D0      		rcall .
 158 0008 1F92      		push __zero_reg__
 159               	.LCFI6:
 160               		.cfi_def_cfa_offset 9
 161 000a CDB7      		in r28,__SP_L__
 162 000c DEB7      		in r29,__SP_H__
 163               	.LCFI7:
 164               		.cfi_def_cfa_register 28
 165               	/* prologue: function */
 166               	/* frame size = 5 */
 167               	/* stack size = 7 */
 168               	.L__stack_usage = 7
 169               	.L12:
 174:../src/main.c **** 	uint8_t buffer[5];
 175:../src/main.c **** 	
 176:../src/main.c **** 	while(1){
 177:../src/main.c **** 		
 178:../src/main.c **** 		//Read VX
 179:../src/main.c **** 		itoa(read_VRX(),(char*)buffer, 10);
 170               		.loc 1 179 0 discriminator 1
 171 000e 0E94 0000 		call read_VRX
 172               	.LVL5:
 173               	.LBB22:
 174               	.LBB23:
 175               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
   1:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Copyright (c) 2004,2007 Joerg Wunsch
   3:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
   4:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Portions of documentation Copyright (c) 1990, 1991, 1993, 1994
   5:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The Regents of the University of California.
   6:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
   7:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    All rights reserved.
   8:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
   9:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Redistribution and use in source and binary forms, with or without
  10:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    modification, are permitted provided that the following conditions are met:
  11:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  12:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    * Redistributions of source code must retain the above copyright
  13:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      notice, this list of conditions and the following disclaimer.
  14:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  15:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    * Redistributions in binary form must reproduce the above copyright
  16:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      notice, this list of conditions and the following disclaimer in
  17:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      the documentation and/or other materials provided with the
  18:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      distribution.
  19:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  20:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    * Neither the name of the copyright holders nor the names of
  21:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      contributors may be used to endorse or promote products derived
  22:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      from this software without specific prior written permission.
  23:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  24:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  28:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   POSSIBILITY OF SUCH DAMAGE.
  35:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  36:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   $Id$
  37:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
  38:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  39:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef _STDLIB_H_
  40:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define	_STDLIB_H_ 1
  41:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  42:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ASSEMBLER__
  43:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  44:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __DOXYGEN__
  45:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define __need_NULL
  46:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define __need_size_t
  47:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define __need_wchar_t
  48:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #include <stddef.h>
  49:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ptr_t
  51:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define __ptr_t void *
  52:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  53:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif	/* !__DOXYGEN__ */
  54:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  55:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifdef __cplusplus
  56:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern "C" {
  57:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  58:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  59:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** \file */
  60:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  61:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** \defgroup avr_stdlib <stdlib.h>: General utilities
  62:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \code #include <stdlib.h> \endcode
  63:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  64:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     This file declares some basic C macros and functions as
  65:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     defined by the ISO standard, plus some AVR-specific extensions.
  66:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
  67:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  68:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /*@{*/
  69:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** Result type for function div(). */
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** typedef struct {
  71:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	int quot;                   /**< The Quotient. */
  72:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	int rem;                    /**< The Remainder. */
  73:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** } div_t;
  74:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  75:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** Result type for function ldiv(). */
  76:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** typedef struct {
  77:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	long quot;                  /**< The Quotient. */
  78:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	long rem;                   /**< The Remainder. */
  79:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** } ldiv_t;
  80:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  81:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** Comparision function type for qsort(), just for convenience. */
  82:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** typedef int (*__compar_fn_t)(const void *, const void *);
  83:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  84:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __DOXYGEN__
  85:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  86:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ATTR_CONST__
  87:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # define __ATTR_CONST__ __attribute__((__const__))
  88:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  89:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  90:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ATTR_MALLOC__
  91:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # define __ATTR_MALLOC__ __attribute__((__malloc__))
  92:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  93:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  94:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ATTR_NORETURN__
  95:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # define __ATTR_NORETURN__ __attribute__((__noreturn__))
  96:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  97:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  98:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ATTR_PURE__
  99:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # define __ATTR_PURE__ __attribute__((__pure__))
 100:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 101:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 102:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef	__ATTR_GNU_INLINE__
 103:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # ifdef  __GNUC_STDC_INLINE__
 104:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #  define __ATTR_GNU_INLINE__   __attribute__((__gnu_inline__))
 105:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # else
 106:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #  define __ATTR_GNU_INLINE__
 107:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # endif
 108:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 109:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 110:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 111:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 112:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** The abort() function causes abnormal program termination to occur.
 113:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     This realization disables interrupts and jumps to _exit() function
 114:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     with argument equal to 1. In the limited AVR environment, execution is
 115:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     effectively halted by entering an infinite loop. */
 116:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void abort(void) __ATTR_NORETURN__;
 117:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 118:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** The abs() function computes the absolute value of the integer \c i.
 119:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \note The abs() and labs() functions are builtins of gcc.
 120:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 121:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern int abs(int __i) __ATTR_CONST__;
 122:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __DOXYGEN__
 123:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define	abs(__i) __builtin_abs(__i)
 124:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 125:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 126:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** The labs() function computes the absolute value of the long integer
 127:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c i.
 128:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \note The abs() and labs() functions are builtins of gcc.
 129:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 130:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern long labs(long __i) __ATTR_CONST__;
 131:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __DOXYGEN__
 132:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define labs(__i) __builtin_labs(__i)
 133:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 134:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 135:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 136:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The bsearch() function searches an array of \c nmemb objects, the
 137:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      initial member of which is pointed to by \c base, for a member
 138:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      that matches the object pointed to by \c key.  The size of each
 139:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      member of the array is specified by \c size.
 140:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 141:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The contents of the array should be in ascending sorted order
 142:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      according to the comparison function referenced by \c compar.
 143:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The \c compar routine is expected to have two arguments which
 144:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      point to the key object and to an array member, in that order,
 145:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      and should return an integer less than, equal to, or greater than
 146:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      zero if the key object is found, respectively, to be less than,
 147:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      to match, or be greater than the array member.
 148:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 149:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The bsearch() function returns a pointer to a matching member of
 150:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      the array, or a null pointer if no match is found.  If two
 151:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      members compare as equal, which member is matched is unspecified.
 152:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 153:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void *bsearch(const void *__key, const void *__base, size_t __nmemb,
 154:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 		     size_t __size, int (*__compar)(const void *, const void *));
 155:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 156:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /* __divmodhi4 and __divmodsi4 from libgcc.a */
 157:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 158:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The div() function computes the value \c num/denom and returns
 159:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      the quotient and remainder in a structure named \c div_t that
 160:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      contains two int members named \c quot and \c rem.
 161:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 162:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern div_t div(int __num, int __denom) __asm__("__divmodhi4") __ATTR_CONST__;
 163:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 164:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The ldiv() function computes the value \c num/denom and returns
 165:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      the quotient and remainder in a structure named \c ldiv_t that
 166:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      contains two long integer members named \c quot and \c rem.
 167:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 168:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern ldiv_t ldiv(long __num, long __denom) __asm__("__divmodsi4") __ATTR_CONST__;
 169:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 170:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 171:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The qsort() function is a modified partition-exchange sort, or
 172:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      quicksort.
 173:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 174:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The qsort() function sorts an array of \c nmemb objects, the
 175:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      initial member of which is pointed to by \c base.  The size of
 176:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      each object is specified by \c size.  The contents of the array
 177:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      base are sorted in ascending order according to a comparison
 178:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      function pointed to by \c compar, which requires two arguments
 179:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      pointing to the objects being compared.
 180:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 181:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The comparison function must return an integer less than, equal
 182:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      to, or greater than zero if the first argument is considered to
 183:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      be respectively less than, equal to, or greater than the second.
 184:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 185:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void qsort(void *__base, size_t __nmemb, size_t __size,
 186:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 		  __compar_fn_t __compar);
 187:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 188:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 189:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The strtol() function converts the string in \c nptr to a long
 190:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     value.  The conversion is done according to the given base, which
 191:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     must be between 2 and 36 inclusive, or be the special value 0.
 192:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 193:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The string may begin with an arbitrary amount of white space (as
 194:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     determined by isspace()) followed by a single optional \c '+' or \c '-'
 195:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     sign.  If \c base is zero or 16, the string may then include a
 196:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c "0x" prefix, and the number will be read in base 16; otherwise,
 197:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     a zero base is taken as 10 (decimal) unless the next character is
 198:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c '0', in which case it is taken as 8 (octal).
 199:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 200:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The remainder of the string is converted to a long value in the
 201:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     obvious manner, stopping at the first character which is not a
 202:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     valid digit in the given base.  (In bases above 10, the letter \c 'A'
 203:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     in either upper or lower case represents 10, \c 'B' represents 11,
 204:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     and so forth, with \c 'Z' representing 35.)
 205:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 206:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     If \c endptr is not NULL, strtol() stores the address of the first
 207:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     invalid character in \c *endptr.  If there were no digits at all,
 208:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     however, strtol() stores the original value of \c nptr in \c
 209:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     *endptr.  (Thus, if \c *nptr is not \c '\\0' but \c **endptr is \c '\\0'
 210:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     on return, the entire string was valid.)
 211:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 212:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The strtol() function returns the result of the conversion, unless
 213:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     the value would underflow or overflow.  If no conversion could be
 214:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     performed, 0 is returned.  If an overflow or underflow occurs, \c
 215:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     errno is set to \ref avr_errno "ERANGE" and the function return value
 216:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     is clamped to \c LONG_MIN or \c LONG_MAX, respectively.
 217:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 218:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern long strtol(const char *__nptr, char **__endptr, int __base);
 219:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 220:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 221:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The strtoul() function converts the string in \c nptr to an
 222:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     unsigned long value.  The conversion is done according to the
 223:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     given base, which must be between 2 and 36 inclusive, or be the
 224:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     special value 0.
 225:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 226:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The string may begin with an arbitrary amount of white space (as
 227:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     determined by isspace()) followed by a single optional \c '+' or \c '-'
 228:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     sign.  If \c base is zero or 16, the string may then include a
 229:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c "0x" prefix, and the number will be read in base 16; otherwise,
 230:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     a zero base is taken as 10 (decimal) unless the next character is
 231:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c '0', in which case it is taken as 8 (octal).
 232:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 233:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The remainder of the string is converted to an unsigned long value
 234:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     in the obvious manner, stopping at the first character which is
 235:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     not a valid digit in the given base.  (In bases above 10, the
 236:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     letter \c 'A' in either upper or lower case represents 10, \c 'B'
 237:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     represents 11, and so forth, with \c 'Z' representing 35.)
 238:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 239:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     If \c endptr is not NULL, strtoul() stores the address of the first
 240:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     invalid character in \c *endptr.  If there were no digits at all,
 241:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     however, strtoul() stores the original value of \c nptr in \c
 242:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     *endptr.  (Thus, if \c *nptr is not \c '\\0' but \c **endptr is \c '\\0'
 243:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     on return, the entire string was valid.)
 244:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 245:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The strtoul() function return either the result of the conversion
 246:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     or, if there was a leading minus sign, the negation of the result
 247:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     of the conversion, unless the original (non-negated) value would
 248:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     overflow; in the latter case, strtoul() returns ULONG_MAX, and \c
 249:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     errno is set to \ref avr_errno "ERANGE".  If no conversion could 
 250:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     be performed, 0 is returned.
 251:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 252:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern unsigned long strtoul(const char *__nptr, char **__endptr, int __base);
 253:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 254:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 255:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The atol() function converts the initial portion of the string
 256:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     pointed to by \p s to long integer representation. In contrast to
 257:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 258:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****         \code strtol(s, (char **)NULL, 10); \endcode
 259:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 260:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     this function does not detect overflow (\c errno is not changed and
 261:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     the result value is not predictable), uses smaller memory (flash and
 262:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     stack) and works more quickly.
 263:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 264:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern long atol(const char *__s) __ATTR_PURE__;
 265:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 266:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 267:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The atoi() function converts the initial portion of the string
 268:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     pointed to by \p s to integer representation. In contrast to
 269:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 270:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****         \code (int)strtol(s, (char **)NULL, 10); \endcode
 271:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 272:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     this function does not detect overflow (\c errno is not changed and
 273:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     the result value is not predictable), uses smaller memory (flash and
 274:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     stack) and works more quickly.
 275:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 276:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern int atoi(const char *__s) __ATTR_PURE__;
 277:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 278:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 279:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The exit() function terminates the application.  Since there is no
 280:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    environment to return to, \c status is ignored, and code execution
 281:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    will eventually reach an infinite loop, thereby effectively halting
 282:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    all code processing.  Before entering the infinite loop, interrupts
 283:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    are globally disabled.
 284:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 285:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    In a C++ context, global destructors will be called before halting
 286:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    execution.
 287:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 288:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void exit(int __status) __ATTR_NORETURN__;
 289:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 290:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 291:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The malloc() function allocates \c size bytes of memory.
 292:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    If malloc() fails, a NULL pointer is returned.
 293:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 294:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Note that malloc() does \e not initialize the returned memory to
 295:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    zero bytes.
 296:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 297:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    See the chapter about \ref malloc "malloc() usage" for implementation
 298:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    details.
 299:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 300:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void *malloc(size_t __size) __ATTR_MALLOC__;
 301:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 302:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 303:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The free() function causes the allocated memory referenced by \c
 304:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    ptr to be made available for future allocations.  If \c ptr is
 305:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    NULL, no action occurs.
 306:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 307:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void free(void *__ptr);
 308:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 309:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 310:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 311:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 312:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern size_t __malloc_margin;
 313:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 314:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 315:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 316:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 317:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern char *__malloc_heap_start;
 318:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 319:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 320:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 321:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 322:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern char *__malloc_heap_end;
 323:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 324:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 325:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Allocate \c nele elements of \c size each.  Identical to calling
 326:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c malloc() using <tt>nele * size</tt> as argument, except the
 327:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    allocated memory will be cleared to zero.
 328:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 329:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void *calloc(size_t __nele, size_t __size) __ATTR_MALLOC__;
 330:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 331:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 332:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The realloc() function tries to change the size of the region
 333:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    allocated at \c ptr to the new \c size value.  It returns a
 334:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    pointer to the new region.  The returned pointer might be the
 335:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    same as the old pointer, or a pointer to a completely different
 336:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    region.
 337:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 338:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The contents of the returned region up to either the old or the new
 339:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    size value (whatever is less) will be identical to the contents of
 340:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    the old region, even in case a new region had to be allocated.
 341:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 342:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    It is acceptable to pass \c ptr as NULL, in which case realloc()
 343:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    will behave identical to malloc().
 344:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 345:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    If the new memory cannot be allocated, realloc() returns NULL, and
 346:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    the region at \c ptr will not be changed.
 347:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 348:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void *realloc(void *__ptr, size_t __size) __ATTR_MALLOC__;
 349:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 350:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern double strtod(const char *__nptr, char **__endptr);
 351:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 352:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** \ingroup avr_stdlib
 353:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \fn  double atof (const char *nptr)
 354:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 355:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The atof() function converts the initial portion of the string pointed
 356:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     to by \a nptr to double representation.
 357:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 358:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     It is equivalent to calling
 359:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	\code strtod(nptr, (char **)0); \endcode
 360:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****  */
 361:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern double atof(const char *__nptr);
 362:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 363:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** Highest number that can be generated by rand(). */
 364:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define	RAND_MAX 0x7FFF
 365:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 366:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 367:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The rand() function computes a sequence of pseudo-random integers in the
 368:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      range of 0 to \c RAND_MAX (as defined by the header file <stdlib.h>).
 369:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 370:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The srand() function sets its argument \c seed as the seed for a new
 371:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      sequence of pseudo-random numbers to be returned by rand().  These
 372:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      sequences are repeatable by calling srand() with the same seed value.
 373:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 374:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      If no seed value is provided, the functions are automatically seeded with
 375:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      a value of 1.
 376:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 377:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      In compliance with the C standard, these functions operate on
 378:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      \c int arguments.  Since the underlying algorithm already uses
 379:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      32-bit calculations, this causes a loss of precision.  See
 380:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      \c random() for an alternate set of functions that retains full
 381:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      32-bit precision.
 382:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 383:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern int rand(void);
 384:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 385:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Pseudo-random number generator seeding; see rand().
 386:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 387:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void srand(unsigned int __seed);
 388:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 389:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 390:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Variant of rand() that stores the context in the user-supplied
 391:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    variable located at \c ctx instead of a static library variable
 392:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    so the function becomes re-entrant.
 393:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 394:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern int rand_r(unsigned long *__ctx);
 395:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /*@}*/
 396:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 397:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /*@{*/
 398:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** \name Non-standard (i.e. non-ISO C) functions.
 399:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****  \ingroup avr_stdlib
 400:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 401:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 402:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \brief Convert an integer to a string.
 403:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 404:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The function itoa() converts the integer value from \c val into an
 405:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    ASCII representation that will be stored under \c s.  The caller
 406:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    is responsible for providing sufficient storage in \c s.
 407:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 408:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \note The minimal size of the buffer \c s depends on the choice of
 409:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    radix. For example, if the radix is 2 (binary), you need to supply a buffer
 410:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    with a minimal length of 8 * sizeof (int) + 1 characters, i.e. one
 411:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    character for each bit plus one for the string terminator. Using a larger
 412:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    radix will require a smaller minimal buffer size.
 413:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 414:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \warning If the buffer is too small, you risk a buffer overflow.
 415:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 416:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Conversion is done using the \c radix as base, which may be a
 417:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    number between 2 (binary conversion) and up to 36.  If \c radix
 418:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    is greater than 10, the next digit after \c '9' will be the letter
 419:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c 'a'.
 420:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     
 421:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     If radix is 10 and val is negative, a minus sign will be prepended.
 422:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 423:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The itoa() function returns the pointer passed as \c s.
 424:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 425:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifdef  __DOXYGEN__
 426:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern char *itoa(int val, char *s, int radix);
 427:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #else
 428:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern __inline__ __ATTR_GNU_INLINE__
 429:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** char *itoa (int __val, char *__s, int __radix)
 430:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** {
 431:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     if (!__builtin_constant_p (__radix)) {
 432:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	extern char *__itoa (int, char *, int);
 433:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	return __itoa (__val, __s, __radix);
 434:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     } else if (__radix < 2 || __radix > 36) {
 435:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	*__s = 0;
 436:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	return __s;
 437:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     } else {
 438:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	extern char *__itoa_ncheck (int, char *, unsigned char);
 439:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	return __itoa_ncheck (__val, __s, __radix);
 176               		.loc 2 439 0 discriminator 1
 177 0012 4AE0      		ldi r20,lo8(10)
 178 0014 BE01      		movw r22,r28
 179 0016 6F5F      		subi r22,-1
 180 0018 7F4F      		sbci r23,-1
 181 001a 0E94 0000 		call __itoa_ncheck
 182               	.LVL6:
 183               	.LBE23:
 184               	.LBE22:
 180:../src/main.c **** 		UART_putstring(buffer);
 185               		.loc 1 180 0 discriminator 1
 186 001e CE01      		movw r24,r28
 187 0020 0196      		adiw r24,1
 188 0022 0E94 0000 		call UART_putstring
 189               	.LVL7:
 181:../src/main.c **** 		UART_send_data('\t');
 190               		.loc 1 181 0 discriminator 1
 191 0026 89E0      		ldi r24,lo8(9)
 192 0028 0E94 0000 		call UART_send_data
 193               	.LVL8:
 182:../src/main.c **** 		UART_send_data('\t');
 194               		.loc 1 182 0 discriminator 1
 195 002c 89E0      		ldi r24,lo8(9)
 196 002e 0E94 0000 		call UART_send_data
 197               	.LVL9:
 183:../src/main.c **** 		//Read VY
 184:../src/main.c **** 		itoa(read_VRY(), (char *)buffer, 10);
 198               		.loc 1 184 0 discriminator 1
 199 0032 0E94 0000 		call read_VRY
 200               	.LVL10:
 201               	.LBB24:
 202               	.LBB25:
 203               		.loc 2 439 0 discriminator 1
 204 0036 4AE0      		ldi r20,lo8(10)
 205 0038 BE01      		movw r22,r28
 206 003a 6F5F      		subi r22,-1
 207 003c 7F4F      		sbci r23,-1
 208 003e 0E94 0000 		call __itoa_ncheck
 209               	.LVL11:
 210               	.LBE25:
 211               	.LBE24:
 185:../src/main.c **** 		UART_putstring(buffer);
 212               		.loc 1 185 0 discriminator 1
 213 0042 CE01      		movw r24,r28
 214 0044 0196      		adiw r24,1
 215 0046 0E94 0000 		call UART_putstring
 216               	.LVL12:
 186:../src/main.c **** 		UART_send_data('\r');
 217               		.loc 1 186 0 discriminator 1
 218 004a 8DE0      		ldi r24,lo8(13)
 219 004c 0E94 0000 		call UART_send_data
 220               	.LVL13:
 187:../src/main.c **** 		UART_send_data('\n');
 221               		.loc 1 187 0 discriminator 1
 222 0050 8AE0      		ldi r24,lo8(10)
 223 0052 0E94 0000 		call UART_send_data
 224               	.LVL14:
 225               	.LBB26:
 226               	.LBB27:
 227               		.file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
   1:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 228               		.loc 3 187 0 discriminator 1
 229 0056 2FEF      		ldi r18,lo8(159999)
 230 0058 80E7      		ldi r24,hi8(159999)
 231 005a 92E0      		ldi r25,hlo8(159999)
 232 005c 2150      	1:	subi r18,1
 233 005e 8040      		sbci r24,0
 234 0060 9040      		sbci r25,0
 235 0062 01F4      		brne 1b
 236 0064 00C0      		rjmp .
 237 0066 0000      		nop
 238 0068 00C0      		rjmp .L12
 239               	.LBE27:
 240               	.LBE26:
 241               		.cfi_endproc
 242               	.LFE74:
 244               		.section	.rodata.str1.1,"aMS",@progbits,1
 245               	.LC0:
 246 0000 5550 00   		.string	"UP"
 247               	.LC1:
 248 0003 444F 574E 		.string	"DOWN"
 248      00
 249               	.LC2:
 250 0008 6F6B 00   		.string	"ok"
 251               		.section	.text.TB_joy1,"ax",@progbits
 252               	.global	TB_joy1
 254               	TB_joy1:
 255               	.LFB75:
 188:../src/main.c **** 		_delay_ms(50);
 189:../src/main.c **** 	}
 190:../src/main.c **** 	
 191:../src/main.c **** }
 192:../src/main.c **** 
 193:../src/main.c **** 
 194:../src/main.c **** #define HI_LIM 600
 195:../src/main.c **** #define LO_LIM 400
 196:../src/main.c **** 
 197:../src/main.c **** 
 198:../src/main.c **** void TB_joy1(void)
 199:../src/main.c **** {
 256               		.loc 1 199 0
 257               		.cfi_startproc
 258               	/* prologue: function */
 259               	/* frame size = 0 */
 260               	/* stack size = 0 */
 261               	.L__stack_usage = 0
 200:../src/main.c **** 	
 201:../src/main.c **** 	if(read_VRX() > HI_LIM)
 262               		.loc 1 201 0
 263 0000 0E94 0000 		call read_VRX
 264               	.LVL15:
 265 0004 8935      		cpi r24,89
 266 0006 9240      		sbci r25,2
 267 0008 00F0      		brlo .L14
 202:../src/main.c **** 	
 203:../src/main.c **** 		UART_putstring((uint8_t *)"UP");
 268               		.loc 1 203 0
 269 000a 80E0      		ldi r24,lo8(.LC0)
 270 000c 90E0      		ldi r25,hi8(.LC0)
 271 000e 0E94 0000 		call UART_putstring
 272               	.LVL16:
 273 0012 0895      		ret
 274               	.L14:
 204:../src/main.c **** 	
 205:../src/main.c **** 	else if(read_VRX() < LO_LIM)
 275               		.loc 1 205 0
 276 0014 0E94 0000 		call read_VRX
 277               	.LVL17:
 278 0018 8039      		cpi r24,-112
 279 001a 9140      		sbci r25,1
 280 001c 00F4      		brsh .L16
 206:../src/main.c **** 		UART_putstring((uint8_t *)"DOWN");
 281               		.loc 1 206 0
 282 001e 80E0      		ldi r24,lo8(.LC1)
 283 0020 90E0      		ldi r25,hi8(.LC1)
 284 0022 0E94 0000 		call UART_putstring
 285               	.LVL18:
 286 0026 0895      		ret
 287               	.L16:
 207:../src/main.c **** 		
 208:../src/main.c **** 	else
 209:../src/main.c **** 		UART_putstring((uint8_t *)"ok");
 288               		.loc 1 209 0
 289 0028 80E0      		ldi r24,lo8(.LC2)
 290 002a 90E0      		ldi r25,hi8(.LC2)
 291 002c 0E94 0000 		call UART_putstring
 292               	.LVL19:
 293 0030 0895      		ret
 294               		.cfi_endproc
 295               	.LFE75:
 297               		.section	.text.main,"ax",@progbits
 298               	.global	main
 300               	main:
 301               	.LFB71:
  86:../src/main.c **** //volatile	int k;
 302               		.loc 1 86 0
 303               		.cfi_startproc
 304               	/* prologue: function */
 305               	/* frame size = 0 */
 306               	/* stack size = 0 */
 307               	.L__stack_usage = 0
  90:../src/main.c **** 			init_RTI();			//Initialize Periodic Real Time Interrupt(Timer)
 308               		.loc 1 90 0
 309 0000 0E94 0000 		call init_ws2812
 310               	.LVL20:
  91:../src/main.c **** 			UART_Init();		//Initialize serial port driver (UART)
 311               		.loc 1 91 0
 312 0004 0E94 0000 		call init_RTI
 313               	.LVL21:
  92:../src/main.c **** 			adc_init();			//Initialize Analog to digital converter (Joystick)
 314               		.loc 1 92 0
 315 0008 0E94 0000 		call UART_Init
 316               	.LVL22:
  93:../src/main.c **** 			wrt_Digit_Init();
 317               		.loc 1 93 0
 318 000c 0E94 0000 		call adc_init
 319               	.LVL23:
  94:../src/main.c **** 		
 320               		.loc 1 94 0
 321 0010 0E94 0000 		call wrt_Digit_Init
 322               	.LVL24:
  96:../src/main.c **** 			
 323               		.loc 1 96 0
 324 0014 80E0      		ldi r24,lo8(display_rgb)
 325 0016 90E0      		ldi r25,hi8(display_rgb)
 326 0018 9093 0000 		sts p2disp+1,r25
 327 001c 8093 0000 		sts p2disp,r24
  98:../src/main.c **** 
 328               		.loc 1 98 0
 329               	/* #APP */
 330               	 ;  98 "../src/main.c" 1
 331 0020 7894      		sei
 332               	 ;  0 "" 2
 100:../src/main.c **** 			
 333               		.loc 1 100 0
 334               	/* #NOAPP */
 335 0022 80E0      		ldi r24,lo8(msg)
 336 0024 90E0      		ldi r25,hi8(msg)
 337 0026 0E94 0000 		call UART_putstring
 338               	.LVL25:
 102:../src/main.c **** 
 339               		.loc 1 102 0
 340 002a 63E0      		ldi r22,lo8(3)
 341 002c 84E0      		ldi r24,lo8(4)
 342 002e 0E94 0000 		call wrt_Digit
 343               	.LVL26:
 104:../src/main.c **** 	        wrt_ws2812(p2disp);
 344               		.loc 1 104 0
 345 0032 0E94 0000 		call clear_disp
 346               	.LVL27:
 105:../src/main.c **** 			
 347               		.loc 1 105 0
 348 0036 8091 0000 		lds r24,p2disp
 349 003a 9091 0000 		lds r25,p2disp+1
 350 003e 0E94 0000 		call wrt_ws2812
 351               	.LVL28:
 352               	.LBB28:
 353               	.LBB29:
 354               		.loc 3 187 0
 355 0042 2FEF      		ldi r18,lo8(1599999)
 356 0044 89E6      		ldi r24,hi8(1599999)
 357 0046 98E1      		ldi r25,hlo8(1599999)
 358 0048 2150      	1:	subi r18,1
 359 004a 8040      		sbci r24,0
 360 004c 9040      		sbci r25,0
 361 004e 01F4      		brne 1b
 362 0050 00C0      		rjmp .
 363 0052 0000      		nop
 364               	.LVL29:
 365 0054 0F2E      		mov __tmp_reg__,r31
 366 0056 F0E0      		ldi r31,lo8(display_rgb)
 367 0058 AF2E      		mov r10,r31
 368 005a F0E0      		ldi r31,hi8(display_rgb)
 369 005c BF2E      		mov r11,r31
 370 005e F02D      		mov r31,__tmp_reg__
 371 0060 20E0      		ldi r18,lo8(display_rgb+192)
 372 0062 30E0      		ldi r19,hi8(display_rgb+192)
 373 0064 F501      		movw r30,r10
 374               	.LVL30:
 375               	.L18:
 376               	.LBE29:
 377               	.LBE28:
 112:../src/main.c **** 			display_rgb[k][4]=GamePointer;
 378               		.loc 1 112 0 discriminator 3
 379 0066 8091 0000 		lds r24,Hundido
 380 006a 9091 0000 		lds r25,Hundido+1
 381 006e A091 0000 		lds r26,Hundido+2
 382 0072 8083      		st Z,r24
 383 0074 9183      		std Z+1,r25
 384 0076 A283      		std Z+2,r26
 113:../src/main.c **** 			display_rgb[k][7]=Agua;
 385               		.loc 1 113 0 discriminator 3
 386 0078 8091 0000 		lds r24,GamePointer
 387 007c 9091 0000 		lds r25,GamePointer+1
 388 0080 A091 0000 		lds r26,GamePointer+2
 389 0084 8487      		std Z+12,r24
 390 0086 9587      		std Z+13,r25
 391 0088 A687      		std Z+14,r26
 114:../src/main.c **** 			display_rgb[k][3]=Danado;
 392               		.loc 1 114 0 discriminator 3
 393 008a 8091 0000 		lds r24,Agua
 394 008e 9091 0000 		lds r25,Agua+1
 395 0092 A091 0000 		lds r26,Agua+2
 396 0096 858B      		std Z+21,r24
 397 0098 968B      		std Z+22,r25
 398 009a A78B      		std Z+23,r26
 115:../src/main.c **** 			display_rgb[k][5]=Danado;
 399               		.loc 1 115 0 discriminator 3
 400 009c 8091 0000 		lds r24,Danado
 401 00a0 9091 0000 		lds r25,Danado+1
 402 00a4 A091 0000 		lds r26,Danado+2
 403 00a8 8187      		std Z+9,r24
 404 00aa 9287      		std Z+10,r25
 405 00ac A387      		std Z+11,r26
 116:../src/main.c **** 			}
 406               		.loc 1 116 0 discriminator 3
 407 00ae 8787      		std Z+15,r24
 408 00b0 908B      		std Z+16,r25
 409 00b2 A18B      		std Z+17,r26
 410 00b4 7896      		adiw r30,24
 110:../src/main.c **** 			{
 411               		.loc 1 110 0 discriminator 3
 412 00b6 E217      		cp r30,r18
 413 00b8 F307      		cpc r31,r19
 414 00ba 01F4      		brne .L18
 119:../src/main.c **** 			
 415               		.loc 1 119 0
 416 00bc 8091 0000 		lds r24,p2disp
 417 00c0 9091 0000 		lds r25,p2disp+1
 418 00c4 0E94 0000 		call wrt_ws2812
 419               	.LVL31:
 420               	.LBB30:
 421               	.LBB31:
 422               		.loc 3 187 0
 423 00c8 EFEF      		ldi r30,lo8(959999)
 424 00ca F5EA      		ldi r31,hi8(959999)
 425 00cc 2EE0      		ldi r18,hlo8(959999)
 426 00ce E150      	1:	subi r30,1
 427 00d0 F040      		sbci r31,0
 428 00d2 2040      		sbci r18,0
 429 00d4 01F4      		brne 1b
 430 00d6 00C0      		rjmp .
 431 00d8 0000      		nop
 432               	.LVL32:
 433               	.LBE31:
 434               	.LBE30:
 123:../src/main.c **** 			
 435               		.loc 1 123 0
 436 00da 0E94 0000 		call clear_disp
 437               	.LVL33:
 438 00de 0F2E      		mov __tmp_reg__,r31
 439 00e0 F0E0      		ldi r31,lo8(display_rgb+81)
 440 00e2 CF2E      		mov r12,r31
 441 00e4 F0E0      		ldi r31,hi8(display_rgb+81)
 442 00e6 DF2E      		mov r13,r31
 443 00e8 F02D      		mov r31,__tmp_reg__
 444 00ea 0F2E      		mov __tmp_reg__,r31
 445 00ec F0E0      		ldi r31,lo8(display_rgb+105)
 446 00ee EF2E      		mov r14,r31
 447 00f0 F0E0      		ldi r31,hi8(display_rgb+105)
 448 00f2 FF2E      		mov r15,r31
 449 00f4 F02D      		mov r31,__tmp_reg__
 450 00f6 C0E0      		ldi r28,lo8(display_rgb+84)
 451 00f8 D0E0      		ldi r29,hi8(display_rgb+84)
 452 00fa 00E0      		ldi r16,lo8(display_rgb+108)
 453 00fc 10E0      		ldi r17,hi8(display_rgb+108)
 454               	.LVL34:
 455               	.L19:
 127:../src/main.c **** 				display_rgb[4+i][3-i]=GamePointer;
 456               		.loc 1 127 0 discriminator 3
 457 00fe 8091 0000 		lds r24,Hundido
 458 0102 9091 0000 		lds r25,Hundido+1
 459 0106 A091 0000 		lds r26,Hundido+2
 460 010a F601      		movw r30,r12
 461 010c 8083      		st Z,r24
 462 010e 9183      		std Z+1,r25
 463 0110 A283      		std Z+2,r26
 128:../src/main.c **** 				display_rgb[3-i][4+i]=Danado;
 464               		.loc 1 128 0 discriminator 3
 465 0112 8091 0000 		lds r24,GamePointer
 466 0116 9091 0000 		lds r25,GamePointer+1
 467 011a A091 0000 		lds r26,GamePointer+2
 468 011e F701      		movw r30,r14
 469 0120 8083      		st Z,r24
 470 0122 9183      		std Z+1,r25
 471 0124 A283      		std Z+2,r26
 129:../src/main.c **** 				display_rgb[4+i][4+i]=Agua;
 472               		.loc 1 129 0 discriminator 3
 473 0126 8091 0000 		lds r24,Danado
 474 012a 9091 0000 		lds r25,Danado+1
 475 012e A091 0000 		lds r26,Danado+2
 476 0132 8883      		st Y,r24
 477 0134 9983      		std Y+1,r25
 478 0136 AA83      		std Y+2,r26
 130:../src/main.c **** 		
 479               		.loc 1 130 0 discriminator 3
 480 0138 8091 0000 		lds r24,Agua
 481 013c 9091 0000 		lds r25,Agua+1
 482 0140 A091 0000 		lds r26,Agua+2
 483 0144 F801      		movw r30,r16
 484 0146 8083      		st Z,r24
 485 0148 9183      		std Z+1,r25
 486 014a A283      		std Z+2,r26
 132:../src/main.c **** 		
 487               		.loc 1 132 0 discriminator 3
 488 014c 8091 0000 		lds r24,p2disp
 489 0150 9091 0000 		lds r25,p2disp+1
 490 0154 0E94 0000 		call wrt_ws2812
 491               	.LVL35:
 492               	.LBB32:
 493               	.LBB33:
 494               		.loc 3 187 0 discriminator 3
 495 0158 FFEF      		ldi r31,lo8(319999)
 496 015a 21EE      		ldi r18,hi8(319999)
 497 015c 84E0      		ldi r24,hlo8(319999)
 498 015e F150      	1:	subi r31,1
 499 0160 2040      		sbci r18,0
 500 0162 8040      		sbci r24,0
 501 0164 01F4      		brne 1b
 502 0166 00C0      		rjmp .
 503 0168 0000      		nop
 504               	.LVL36:
 505               	.LBE33:
 506               	.LBE32:
 135:../src/main.c **** 			}
 507               		.loc 1 135 0 discriminator 3
 508 016a 0E94 0000 		call clear_disp
 509               	.LVL37:
 510 016e 9BE1      		ldi r25,27
 511 0170 C91A      		sub r12,r25
 512 0172 D108      		sbc r13,__zero_reg__
 513 0174 E5E1      		ldi r30,21
 514 0176 EE0E      		add r14,r30
 515 0178 F11C      		adc r15,__zero_reg__
 516 017a 6597      		sbiw r28,21
 517 017c 055E      		subi r16,-27
 518 017e 1F4F      		sbci r17,-1
 125:../src/main.c **** 			{
 519               		.loc 1 125 0 discriminator 3
 520 0180 AC16      		cp r10,r28
 521 0182 BD06      		cpc r11,r29
 522 0184 01F0      		breq .+2
 523 0186 00C0      		rjmp .L19
 524               	.L23:
 140:../src/main.c **** 	_delay_ms(100);
 525               		.loc 1 140 0 discriminator 1
 526 0188 0E94 0000 		call TB_joy1
 527               	.LVL38:
 528               	.LBB34:
 529               	.LBB35:
 530               		.loc 3 187 0 discriminator 1
 531 018c FFEF      		ldi r31,lo8(319999)
 532 018e 21EE      		ldi r18,hi8(319999)
 533 0190 84E0      		ldi r24,hlo8(319999)
 534 0192 F150      	1:	subi r31,1
 535 0194 2040      		sbci r18,0
 536 0196 8040      		sbci r24,0
 537 0198 01F4      		brne 1b
 538 019a 00C0      		rjmp .
 539 019c 0000      		nop
 540 019e 00C0      		rjmp .L23
 541               	.LBE35:
 542               	.LBE34:
 543               		.cfi_endproc
 544               	.LFE71:
 546               	.global	msg
 547               		.section	.data.msg,"aw",@progbits
 550               	msg:
 551 0000 4865 6C6C 		.string	"Hello from ATmega328p\r\n  "
 551      6F20 6672 
 551      6F6D 2041 
 551      546D 6567 
 551      6133 3238 
 552               		.comm	display_rgb,192,1
 553               	.global	Apagado
 554               		.section	.bss.Apagado,"aw",@nobits
 557               	Apagado:
 558 0000 0000 00   		.zero	3
 559               	.global	Danado
 560               		.section	.data.Danado,"aw",@progbits
 563               	Danado:
 564 0000 1E        		.byte	30
 565 0001 1E        		.byte	30
 566 0002 00        		.byte	0
 567               	.global	Agua
 568               		.section	.data.Agua,"aw",@progbits
 571               	Agua:
 572 0000 00        		.byte	0
 573 0001 00        		.byte	0
 574 0002 1E        		.byte	30
 575               	.global	Hundido
 576               		.section	.data.Hundido,"aw",@progbits
 579               	Hundido:
 580 0000 00        		.byte	0
 581 0001 1E        		.byte	30
 582 0002 00        		.byte	0
 583               	.global	GamePointer
 584               		.section	.data.GamePointer,"aw",@progbits
 587               	GamePointer:
 588 0000 19        		.byte	25
 589 0001 00        		.byte	0
 590 0002 00        		.byte	0
 591               		.comm	p2disp,2,1
 592               		.text
 593               	.Letext0:
 594               		.file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 595               		.file 5 "../src/ADC.h"
 596               		.file 6 "../src/UART.h"
 597               		.file 7 "../src/Timer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
              main.s:2      *ABS*:0000003e __SP_H__
              main.s:3      *ABS*:0000003d __SP_L__
              main.s:4      *ABS*:0000003f __SREG__
              main.s:5      *ABS*:00000000 __tmp_reg__
              main.s:6      *ABS*:00000001 __zero_reg__
              main.s:13     .text.clear_disp:00000000 clear_disp
                            *COM*:000000c0 display_rgb
              main.s:557    .bss.Apagado:00000000 Apagado
              main.s:66     .text.softdelay:00000000 softdelay
              main.s:144    .text.ADCTestBench:00000000 ADCTestBench
              main.s:254    .text.TB_joy1:00000000 TB_joy1
              main.s:300    .text.main:00000000 main
                            *COM*:00000002 p2disp
              main.s:550    .data.msg:00000000 msg
              main.s:579    .data.Hundido:00000000 Hundido
              main.s:587    .data.GamePointer:00000000 GamePointer
              main.s:571    .data.Agua:00000000 Agua
              main.s:563    .data.Danado:00000000 Danado
                           .group:00000000 wm4.parts.h.38.424177e1c4c7502bdf2cd6eac0e66f1e
                           .group:00000000 wm4.sfr_defs.h.36.473802ecbcb5d4d38de6c7efbfcd3c60
                           .group:00000000 wm4.stdint.h.41.052d062c327f27e210bb72c3d087afe5
                           .group:00000000 wm4.inttypes.h.96.afb9c4be73a069861f8689c997efc518
                           .group:00000000 wm4.sfr_defs.h.128.38ceebe2fb099c106e85a566519e0f1a
                           .group:00000000 wm4.iom328p.h.44.29c929f46483155923fc58520c74ebf7
                           .group:00000000 wm4.portpins.h.34.21289185946cbf62723ecc8db6cdc3ff
                           .group:00000000 wm4.common.h.35.c7e66042b2128622b9d3bddccc9a39f4
                           .group:00000000 wm4.version.h.54.85699b1a50c61c991a37d67b69e79e95
                           .group:00000000 wm4.fuse.h.36.5c373c650020c0efef2cbaa98ea802c3
                           .group:00000000 wm4.lock.h.36.51f311078904691e8f8c3d70111251d8
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.stdlib.h.40.248a6087ef49adb4f4328833c0282d4b
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.stdlib.h.51.3a36e1d757b19eb9d8852fbf8bb7cd30
                           .group:00000000 wm4.compiler.h.71.f9633126e8a32454fdb20497dc57808e
                           .group:00000000 wm4.interrupt.h.36.b2193b640edda749ea0a45a8be5976c8
                           .group:00000000 wm4.interrupt_avr8.h.89.988a0fb0a0728821bb2ce6a5fad9a217
                           .group:00000000 wm4.pgmspace.h.83.7bf4a326041279617a872e0717310315
                           .group:00000000 wm4.pgmspace.h.98.de80e653d80602932888d287eea24d43
                           .group:00000000 wm4.progmem.h.56.1d8b28eb4bdbace2fba3d4aa9d1800d3
                           .group:00000000 wm4.compiler.h.162.3bca7208a79b237ff211f6b945969fd5
                           .group:00000000 wm4.ioport.h.38.48f501ae460febc49dd950c4a2361938
                           .group:00000000 wm4.mega_gpio.h.43.3e8869bf7dde66f4dae42caccabdc28f
                           .group:00000000 wm4.board.h.41.2d9694df0f6b670341666b9015632b94
                           .group:00000000 wm4.led.h.38.8c4408d5cc264ea8e7bbcc0ac6971d10
                           .group:00000000 wm4.atmega328p_xplained_mini.h.47.411278661c63ad4794d5f415bca0f65b
                           .group:00000000 wm4.delay.h.36.9b049a49ceee302c08fd72aec728bf54
                           .group:00000000 wm4.math.h.49.a63885b3cd597bc58738696048bb49a6
                           .group:00000000 wm4.ADC.h.10.4375d630963ad1b8b9d883a341299c49

UNDEFINED SYMBOLS
read_VRX
__itoa_ncheck
UART_putstring
UART_send_data
read_VRY
init_ws2812
init_RTI
UART_Init
adc_init
wrt_Digit_Init
wrt_Digit
wrt_ws2812
__do_copy_data
__do_clear_bss
