   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.checkPlayer1Win,"ax",@progbits
  11               	.global	checkPlayer1Win
  13               	checkPlayer1Win:
  14               	.LFB75:
  15               		.file 1 "../src/main.c"
   1:../src/main.c **** 
   2:../src/main.c **** #include <asf.h>
   3:../src/main.c **** #include <stdint.h>
   4:../src/main.c **** #define F_CPU 16000000UL // Defining the CPU Frequency
   5:../src/main.c **** #include <util/delay.h>  // Generates a Blocking Delay
   6:../src/main.c **** 
   7:../src/main.c **** #include "UART.h"
   8:../src/main.c **** #include "ADC.h"
   9:../src/main.c **** #include "Timer.h"
  10:../src/main.c **** #include "joystickReads.h"
  11:../src/main.c **** /*
  12:../src/main.c **** GccWS2812_V3
  13:../src/main.c **** This version works like the assembly version "ws2812 efecto1"
  14:../src/main.c **** The main differences are:
  15:../src/main.c **** 1- The Assembly code is the same but the compiler is the GCC version
  16:../src/main.c ****    so pay attention to the differences.
  17:../src/main.c **** Eg.: .equ is replaced by #define , HIGH and LOW is replaced by hi8 and lo8
  18:../src/main.c ****      The argument of the latter macros (hi8,lo8) is not more 2*Address_Label
  19:../src/main.c **** 	 #define __SFR_OFFSET 0 must be defined
  20:../src/main.c **** 	 Macros syntax is different
  21:../src/main.c **** 	 .def is replaced with #define 
  22:../src/main.c **** 	 Tables in program segment are defined using .byte (not .db)
  23:../src/main.c **** */
  24:../src/main.c **** 
  25:../src/main.c **** 
  26:../src/main.c **** 
  27:../src/main.c **** typedef struct 
  28:../src/main.c **** 		{
  29:../src/main.c **** 			uint8_t green;   // WS2812 order (GRB)
  30:../src/main.c **** 			uint8_t red;
  31:../src/main.c **** 			uint8_t blue;
  32:../src/main.c **** 		} RGBled;
  33:../src/main.c **** 		
  34:../src/main.c **** 
  35:../src/main.c **** typedef struct  
  36:../src/main.c **** 		{
  37:../src/main.c **** 			uint8_t x0;		//	Coordenadas
  38:../src/main.c **** 			uint8_t y0;
  39:../src/main.c **** 			uint8_t boolDisparado;
  40:../src/main.c **** 		} Submarino;
  41:../src/main.c **** 		
  42:../src/main.c **** typedef struct
  43:../src/main.c **** 		{
  44:../src/main.c **** 			uint8_t x0;		//	Coordenadas
  45:../src/main.c **** 			uint8_t y0;
  46:../src/main.c **** 			uint8_t boolDisparado0;
  47:../src/main.c **** 			uint8_t x1;		//Largo 2 de barco
  48:../src/main.c **** 			uint8_t y1;
  49:../src/main.c **** 			uint8_t boolDisparado1;
  50:../src/main.c **** 		} Carguero;
  51:../src/main.c **** 		
  52:../src/main.c **** 
  53:../src/main.c **** #define LED (1<<5)				// Hackatronics Led "D1"
  54:../src/main.c **** typedef RGBled (*P2RGB);
  55:../src/main.c **** #define GAME_POINTER_SPEED	20		// SPEED * 10 ms because of the function delay
  56:../src/main.c **** #define WINPLAYER1 3			// Corresponding value to the ISR check for the win
  57:../src/main.c **** #define WINPLAYER2 4			// Corresponding value to the ISR check for the win
  58:../src/main.c **** #define DELAY_BETWEEN_SHOTS	3
  59:../src/main.c **** 
  60:../src/main.c **** // Variables  
  61:../src/main.c **** P2RGB p2disp;
  62:../src/main.c **** 
  63:../src/main.c **** RGBled GamePointer = {25,0,0};	//Verde
  64:../src/main.c **** RGBled Hundido = {0,30,0};		//Rojo
  65:../src/main.c **** RGBled Agua = {0,0,30};			//Azul
  66:../src/main.c **** RGBled Danado = {30,30,0};		//Amarillo
  67:../src/main.c **** RGBled Apagado = {0,0,0};	
  68:../src/main.c **** RGBled display_rgb[8][8];	
  69:../src/main.c **** 
  70:../src/main.c **** RGBled matrizJugador1[8][8];
  71:../src/main.c **** RGBled matrizJugador2[8][8];
  72:../src/main.c **** 
  73:../src/main.c **** Submarino submarinosJugador1[3] = {{0,3,0}, {2,3,0}, {6,3,0}};
  74:../src/main.c **** Carguero carguerosJugador1[2] = {{7,7,0,7,6,0}, {5,5,0,4,5,0}};
  75:../src/main.c **** 	
  76:../src/main.c **** Submarino submarinosJugador2[3] = {{1,6,0}, {1,4,0}, {3,4,0}};
  77:../src/main.c **** Carguero carguerosJugador2[2] = {{6,6,0,7,6,0}, {2,2,0,2,3,0}};
  78:../src/main.c **** 
  79:../src/main.c **** 		
  80:../src/main.c **** // Assembly functions
  81:../src/main.c **** extern void init_ws2812(void);
  82:../src/main.c **** extern void wrt_ws2812(P2RGB);
  83:../src/main.c **** extern void wrt_Digit_Init(void);
  84:../src/main.c **** 
  85:../src/main.c **** // Local prototypes
  86:../src/main.c **** void gameOn(void);
  87:../src/main.c **** void softdelay(void);
  88:../src/main.c **** void clear_disp(void);
  89:../src/main.c **** void copyArrayOf1(void);
  90:../src/main.c **** void copyArrayOf2(void);
  91:../src/main.c **** void playPlayer1(void);
  92:../src/main.c **** void playPlayer2(void);
  93:../src/main.c **** int8_t msg[] = "Hello from ATmega328p\r\n  ";
  94:../src/main.c **** uint8_t checkPlayer1Win(void);
  95:../src/main.c **** uint8_t checkPlayer2Win(void);
  96:../src/main.c **** void delaySeconds(uint8_t);
  97:../src/main.c **** void shootPlayer1(int8_t, int8_t);
  98:../src/main.c **** void shootPlayer2(int8_t, int8_t);
  99:../src/main.c **** void scanSubmarinos1(int8_t, int8_t);
 100:../src/main.c **** void scanCargueros1(int8_t, int8_t);
 101:../src/main.c **** void scanSubmarinos2(int8_t, int8_t);
 102:../src/main.c **** void scanCargueros2(int8_t, int8_t);
 103:../src/main.c **** 
 104:../src/main.c **** 
 105:../src/main.c **** int main (void)
 106:../src/main.c **** {		
 107:../src/main.c **** 	init_ws2812();		// Initialize RGB Display driver
 108:../src/main.c **** 	init_RTI();			// Initialize Periodic Real Time Interrupt(Timer)
 109:../src/main.c **** 	UART_Init();		// Initialize serial port driver (UART)
 110:../src/main.c **** 	adc_init();			// Initialize Analog to digital converter (Joystick)
 111:../src/main.c **** 	wrt_Digit_Init();	// Initialize the Seven Segments Display
 112:../src/main.c **** 	playerTurn = 1;		// Sets the value of the first player
 113:../src/main.c **** 		
 114:../src/main.c **** 	p2disp=&display_rgb[0][0];
 115:../src/main.c **** 	
 116:../src/main.c **** 	for (int i=0; i<=7; i++)				// Sets the initial 'Apagado' value for matrizJugador1 RGBled array.
 117:../src/main.c **** 		for (int j=0; j<=7; j++)
 118:../src/main.c **** 			matrizJugador1[i][j] = Apagado;
 119:../src/main.c **** 
 120:../src/main.c **** 	for (int i=0; i<=7; i++)				// Sets the initial 'Apagado' value for matrizJugador2 RGBled array.
 121:../src/main.c **** 		for (int j=0; j<=7; j++)
 122:../src/main.c **** 			matrizJugador2[i][j] = Apagado;
 123:../src/main.c **** 			
 124:../src/main.c **** 	sei();					// Enable global Interrupts
 125:../src/main.c **** 	
 126:../src/main.c **** 	gameOn();
 127:../src/main.c **** }
 128:../src/main.c **** 
 129:../src/main.c **** void gameOn(void)
 130:../src/main.c **** {
 131:../src/main.c **** 	while ((playerTurn == 1) | (playerTurn == 2))
 132:../src/main.c **** 	{
 133:../src/main.c **** 		while(playerTurn == 1)
 134:../src/main.c **** 			playPlayer1();
 135:../src/main.c **** 	
 136:../src/main.c **** 		if (checkPlayer1Win() == 1)
 137:../src/main.c **** 			playerTurn = WINPLAYER1;
 138:../src/main.c **** 		
 139:../src/main.c **** 		while (playerTurn == 2)
 140:../src/main.c **** 			playPlayer2();
 141:../src/main.c **** 		
 142:../src/main.c **** 		if (checkPlayer2Win() == 1)
 143:../src/main.c **** 			playerTurn = WINPLAYER2;
 144:../src/main.c **** 	}
 145:../src/main.c **** 	
 146:../src/main.c **** 	while(1)
 147:../src/main.c **** 	{
 148:../src/main.c **** 		
 149:../src/main.c **** 	}
 150:../src/main.c **** }
 151:../src/main.c **** 
 152:../src/main.c **** /* Cycle of a shot for player1.*/
 153:../src/main.c **** void playPlayer1(void)
 154:../src/main.c **** {
 155:../src/main.c **** 	// Actions to do only once per cycle
 156:../src/main.c **** 	volatile int gamePointerTilt = GAME_POINTER_SPEED;
 157:../src/main.c **** 	
 158:../src/main.c **** 	while(jButton != 0)
 159:../src/main.c **** 	{
 160:../src/main.c **** 		if (gamePointerTilt == 0)
 161:../src/main.c **** 		{
 162:../src/main.c **** 			copyArrayOf2();
 163:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 164:../src/main.c **** 			gamePointerTilt = GAME_POINTER_SPEED;
 165:../src/main.c **** 		}
 166:../src/main.c **** 		else if (gamePointerTilt >= GAME_POINTER_SPEED/2)
 167:../src/main.c **** 		{
 168:../src/main.c **** 			copyArrayOf2();
 169:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 170:../src/main.c **** 			gamePointerTilt--;
 171:../src/main.c **** 		}
 172:../src/main.c **** 		else
 173:../src/main.c **** 		{
 174:../src/main.c **** 			copyArrayOf2();
 175:../src/main.c **** 			gamePointerTilt--;
 176:../src/main.c **** 		}
 177:../src/main.c **** 		
 178:../src/main.c **** 		wrt_ws2812(p2disp);
 179:../src/main.c **** 		
 180:../src/main.c **** 		_delay_ms(20);
 181:../src/main.c **** 	}
 182:../src/main.c **** 	// Actions to end the player cycle
 183:../src/main.c **** 	shootPlayer2(xMovement, yMovement);
 184:../src/main.c **** 	
 185:../src/main.c **** 	copyArrayOf2();
 186:../src/main.c **** 	wrt_ws2812(p2disp);
 187:../src/main.c **** 	
 188:../src/main.c **** 	delaySeconds(DELAY_BETWEEN_SHOTS);
 189:../src/main.c **** 	playerTurn = 2;
 190:../src/main.c **** }
 191:../src/main.c **** 
 192:../src/main.c **** /* Cycle of a shot for player2.*/
 193:../src/main.c **** void playPlayer2(void)
 194:../src/main.c **** {
 195:../src/main.c **** 	// Actions to do only once per cycle
 196:../src/main.c **** 	volatile int gamePointerTilt = GAME_POINTER_SPEED;
 197:../src/main.c **** 	
 198:../src/main.c **** 	while(jButton != 0)
 199:../src/main.c **** 	{
 200:../src/main.c **** 		if (gamePointerTilt == 0)
 201:../src/main.c **** 		{
 202:../src/main.c **** 			copyArrayOf1();
 203:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 204:../src/main.c **** 			gamePointerTilt = GAME_POINTER_SPEED;
 205:../src/main.c **** 		}
 206:../src/main.c **** 		else if (gamePointerTilt >= GAME_POINTER_SPEED/2)
 207:../src/main.c **** 		{
 208:../src/main.c **** 			copyArrayOf1();
 209:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 210:../src/main.c **** 			gamePointerTilt--;
 211:../src/main.c **** 		}
 212:../src/main.c **** 		else
 213:../src/main.c **** 		{
 214:../src/main.c **** 			copyArrayOf1();
 215:../src/main.c **** 			gamePointerTilt--;
 216:../src/main.c **** 		}
 217:../src/main.c **** 		
 218:../src/main.c **** 		wrt_ws2812(p2disp);
 219:../src/main.c **** 		
 220:../src/main.c **** 		_delay_ms(20);
 221:../src/main.c **** 	}
 222:../src/main.c **** 	// Actions to end the player cycle
 223:../src/main.c **** 	shootPlayer1(xMovement, yMovement);
 224:../src/main.c **** 	
 225:../src/main.c **** 	copyArrayOf1();
 226:../src/main.c **** 	wrt_ws2812(p2disp);
 227:../src/main.c **** 	
 228:../src/main.c **** 	delaySeconds(DELAY_BETWEEN_SHOTS);
 229:../src/main.c **** 	playerTurn = 1;
 230:../src/main.c **** }
 231:../src/main.c **** 
 232:../src/main.c **** /* Returns 1 if player1 Won.*/
 233:../src/main.c **** uint8_t checkPlayer1Win(void)
 234:../src/main.c **** {
  16               		.loc 1 234 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2797      		sbiw r28,7
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 11
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 7 */
  40               	/* stack size = 9 */
  41               	.L__stack_usage = 9
 235:../src/main.c **** 	uint8_t checks[7] = {0, 0, 0, 0, 0, 0, 0};
  42               		.loc 1 235 0
  43 0014 DE01      		movw r26,r28
  44 0016 1196      		adiw r26,1
  45 0018 87E0      		ldi r24,lo8(7)
  46 001a FD01      		movw r30,r26
  47               		0:
  48 001c 1192      		st Z+,__zero_reg__
  49 001e 8A95      		dec r24
  50 0020 01F4      		brne 0b
  51               	.LVL0:
  52 0022 E0E0      		ldi r30,lo8(submarinosJugador2)
  53 0024 F0E0      		ldi r31,hi8(submarinosJugador2)
  54 0026 20E0      		ldi r18,lo8(submarinosJugador2+9)
  55 0028 30E0      		ldi r19,hi8(submarinosJugador2+9)
  56               	.LBB10:
 236:../src/main.c **** 	for (uint8_t c=0; c<=2; c++)
 237:../src/main.c **** 	{
 238:../src/main.c **** 		if (submarinosJugador2[c].boolDisparado == 1)
 239:../src/main.c **** 			checks[c] = 1;
  57               		.loc 1 239 0
  58 002a 91E0      		ldi r25,lo8(1)
  59               	.LVL1:
  60               	.L3:
 238:../src/main.c **** 			checks[c] = 1;
  61               		.loc 1 238 0
  62 002c 8281      		ldd r24,Z+2
  63 002e 8130      		cpi r24,lo8(1)
  64 0030 01F4      		brne .L2
  65               		.loc 1 239 0
  66 0032 9C93      		st X,r25
  67               	.L2:
  68               	.LVL2:
  69 0034 3396      		adiw r30,3
  70 0036 1196      		adiw r26,1
  71               	.LVL3:
 236:../src/main.c **** 	for (uint8_t c=0; c<=2; c++)
  72               		.loc 1 236 0 discriminator 2
  73 0038 E217      		cp r30,r18
  74 003a F307      		cpc r31,r19
  75 003c 01F4      		brne .L3
  76               	.LVL4:
  77               	.LBE10:
  78               	.LBB11:
 240:../src/main.c **** 	}
 241:../src/main.c **** 	for (uint8_t c=0; c<=1; c++)
 242:../src/main.c **** 	{
 243:../src/main.c **** 		if (carguerosJugador2[c].boolDisparado0 == 1)
  79               		.loc 1 243 0
  80 003e 8091 0000 		lds r24,carguerosJugador2+2
  81 0042 8130      		cpi r24,lo8(1)
  82 0044 01F4      		brne .L4
 244:../src/main.c **** 		{
 245:../src/main.c **** 			checks[c+3] = 1;
  83               		.loc 1 245 0
  84 0046 8C83      		std Y+4,r24
  85               	.L4:
 246:../src/main.c **** 		}
 247:../src/main.c **** 		if (carguerosJugador2[c].boolDisparado1 == 1)
  86               		.loc 1 247 0
  87 0048 8091 0000 		lds r24,carguerosJugador2+5
  88 004c 8130      		cpi r24,lo8(1)
  89 004e 01F4      		brne .L5
 248:../src/main.c **** 		{
 249:../src/main.c **** 			checks[c+5] = 1;
  90               		.loc 1 249 0
  91 0050 8E83      		std Y+6,r24
  92               	.L5:
  93               	.LVL5:
 243:../src/main.c **** 		{
  94               		.loc 1 243 0
  95 0052 8091 0000 		lds r24,carguerosJugador2+8
  96 0056 8130      		cpi r24,lo8(1)
  97 0058 01F4      		brne .L6
 245:../src/main.c **** 		}
  98               		.loc 1 245 0
  99 005a 8D83      		std Y+5,r24
 100               	.L6:
 247:../src/main.c **** 		{
 101               		.loc 1 247 0
 102 005c 8091 0000 		lds r24,carguerosJugador2+11
 103 0060 8130      		cpi r24,lo8(1)
 104 0062 01F4      		brne .L7
 105               		.loc 1 249 0
 106 0064 8F83      		std Y+7,r24
 107               	.L7:
 108               	.LVL6:
 109               	.LBE11:
 250:../src/main.c **** 		}
 251:../src/main.c **** 	}
 252:../src/main.c **** 	
 253:../src/main.c **** 	if ((checks[0] == 1) & (checks[1] == 1) & (checks[2] == 1) & (checks[3] == 1) & (checks[4] == 1) &
 254:../src/main.c **** 	{
 255:../src/main.c **** 		return 1;
 110               		.loc 1 255 0 discriminator 2
 111 0066 31E0      		ldi r19,lo8(1)
 112 0068 8981      		ldd r24,Y+1
 113 006a 8130      		cpi r24,lo8(1)
 114 006c 01F0      		breq .L8
 115 006e 30E0      		ldi r19,0
 116               	.L8:
 117 0070 81E0      		ldi r24,lo8(1)
 118 0072 9A81      		ldd r25,Y+2
 119 0074 9130      		cpi r25,lo8(1)
 120 0076 01F0      		breq .L9
 121 0078 80E0      		ldi r24,0
 122               	.L9:
 123 007a 8323      		and r24,r19
 124 007c 31E0      		ldi r19,lo8(1)
 125 007e 9B81      		ldd r25,Y+3
 126 0080 9130      		cpi r25,lo8(1)
 127 0082 01F0      		breq .L10
 128 0084 30E0      		ldi r19,0
 129               	.L10:
 130 0086 8323      		and r24,r19
 131 0088 21E0      		ldi r18,lo8(1)
 132 008a 9C81      		ldd r25,Y+4
 133 008c 9130      		cpi r25,lo8(1)
 134 008e 01F0      		breq .L11
 135 0090 20E0      		ldi r18,0
 136               	.L11:
 137 0092 982F      		mov r25,r24
 138 0094 9223      		and r25,r18
 139 0096 81E0      		ldi r24,lo8(1)
 140 0098 2D81      		ldd r18,Y+5
 141 009a 2130      		cpi r18,lo8(1)
 142 009c 01F0      		breq .L12
 143 009e 80E0      		ldi r24,0
 144               	.L12:
 145 00a0 8923      		and r24,r25
 146 00a2 91E0      		ldi r25,lo8(1)
 147 00a4 2E81      		ldd r18,Y+6
 148 00a6 2130      		cpi r18,lo8(1)
 149 00a8 01F0      		breq .L13
 150 00aa 90E0      		ldi r25,0
 151               	.L13:
 152 00ac 9823      		and r25,r24
 153 00ae 81E0      		ldi r24,lo8(1)
 154 00b0 2F81      		ldd r18,Y+7
 155 00b2 2130      		cpi r18,lo8(1)
 156 00b4 01F0      		breq .L14
 157 00b6 80E0      		ldi r24,0
 158               	.L14:
 256:../src/main.c **** 	}
 257:../src/main.c **** 	else
 258:../src/main.c **** 	{
 259:../src/main.c **** 		return 0;
 260:../src/main.c **** 	}
 261:../src/main.c **** }
 159               		.loc 1 261 0 discriminator 2
 160 00b8 8923      		and r24,r25
 161               	/* epilogue start */
 162 00ba 2796      		adiw r28,7
 163 00bc 0FB6      		in __tmp_reg__,__SREG__
 164 00be F894      		cli
 165 00c0 DEBF      		out __SP_H__,r29
 166 00c2 0FBE      		out __SREG__,__tmp_reg__
 167 00c4 CDBF      		out __SP_L__,r28
 168 00c6 DF91      		pop r29
 169 00c8 CF91      		pop r28
 170 00ca 0895      		ret
 171               		.cfi_endproc
 172               	.LFE75:
 174               		.section	.text.checkPlayer2Win,"ax",@progbits
 175               	.global	checkPlayer2Win
 177               	checkPlayer2Win:
 178               	.LFB76:
 262:../src/main.c **** 
 263:../src/main.c **** /* Returns 1 if player2 Won.*/
 264:../src/main.c **** uint8_t checkPlayer2Win(void)
 265:../src/main.c **** {
 179               		.loc 1 265 0
 180               		.cfi_startproc
 181 0000 CF93      		push r28
 182               	.LCFI4:
 183               		.cfi_def_cfa_offset 3
 184               		.cfi_offset 28, -2
 185 0002 DF93      		push r29
 186               	.LCFI5:
 187               		.cfi_def_cfa_offset 4
 188               		.cfi_offset 29, -3
 189 0004 CDB7      		in r28,__SP_L__
 190 0006 DEB7      		in r29,__SP_H__
 191               	.LCFI6:
 192               		.cfi_def_cfa_register 28
 193 0008 2797      		sbiw r28,7
 194               	.LCFI7:
 195               		.cfi_def_cfa_offset 11
 196 000a 0FB6      		in __tmp_reg__,__SREG__
 197 000c F894      		cli
 198 000e DEBF      		out __SP_H__,r29
 199 0010 0FBE      		out __SREG__,__tmp_reg__
 200 0012 CDBF      		out __SP_L__,r28
 201               	/* prologue: function */
 202               	/* frame size = 7 */
 203               	/* stack size = 9 */
 204               	.L__stack_usage = 9
 266:../src/main.c **** 	uint8_t checks[7] = {0, 0, 0, 0, 0, 0, 0};
 205               		.loc 1 266 0
 206 0014 DE01      		movw r26,r28
 207 0016 1196      		adiw r26,1
 208 0018 87E0      		ldi r24,lo8(7)
 209 001a FD01      		movw r30,r26
 210               		0:
 211 001c 1192      		st Z+,__zero_reg__
 212 001e 8A95      		dec r24
 213 0020 01F4      		brne 0b
 214               	.LVL7:
 215 0022 E0E0      		ldi r30,lo8(submarinosJugador1)
 216 0024 F0E0      		ldi r31,hi8(submarinosJugador1)
 217 0026 20E0      		ldi r18,lo8(submarinosJugador1+9)
 218 0028 30E0      		ldi r19,hi8(submarinosJugador1+9)
 219               	.LBB12:
 267:../src/main.c **** 	for (uint8_t c=0; c<=2; c++)
 268:../src/main.c **** 	{
 269:../src/main.c **** 		if (submarinosJugador1[c].boolDisparado == 1)
 270:../src/main.c **** 			checks[c] = 1;
 220               		.loc 1 270 0
 221 002a 91E0      		ldi r25,lo8(1)
 222               	.LVL8:
 223               	.L18:
 269:../src/main.c **** 			checks[c] = 1;
 224               		.loc 1 269 0
 225 002c 8281      		ldd r24,Z+2
 226 002e 8130      		cpi r24,lo8(1)
 227 0030 01F4      		brne .L17
 228               		.loc 1 270 0
 229 0032 9C93      		st X,r25
 230               	.L17:
 231               	.LVL9:
 232 0034 3396      		adiw r30,3
 233 0036 1196      		adiw r26,1
 234               	.LVL10:
 267:../src/main.c **** 	for (uint8_t c=0; c<=2; c++)
 235               		.loc 1 267 0 discriminator 2
 236 0038 E217      		cp r30,r18
 237 003a F307      		cpc r31,r19
 238 003c 01F4      		brne .L18
 239               	.LVL11:
 240               	.LBE12:
 241               	.LBB13:
 271:../src/main.c **** 	}
 272:../src/main.c **** 	for (uint8_t c=0; c<=1; c++)
 273:../src/main.c **** 	{
 274:../src/main.c **** 		if (carguerosJugador1[c].boolDisparado0 == 1)
 242               		.loc 1 274 0
 243 003e 8091 0000 		lds r24,carguerosJugador1+2
 244 0042 8130      		cpi r24,lo8(1)
 245 0044 01F4      		brne .L19
 275:../src/main.c **** 		{
 276:../src/main.c **** 			checks[c+3] = 1;
 246               		.loc 1 276 0
 247 0046 8C83      		std Y+4,r24
 248               	.L19:
 277:../src/main.c **** 		}
 278:../src/main.c **** 		if (carguerosJugador1[c].boolDisparado1 == 1)
 249               		.loc 1 278 0
 250 0048 8091 0000 		lds r24,carguerosJugador1+5
 251 004c 8130      		cpi r24,lo8(1)
 252 004e 01F4      		brne .L20
 279:../src/main.c **** 		{
 280:../src/main.c **** 			checks[c+5] = 1;
 253               		.loc 1 280 0
 254 0050 8E83      		std Y+6,r24
 255               	.L20:
 256               	.LVL12:
 274:../src/main.c **** 		{
 257               		.loc 1 274 0
 258 0052 8091 0000 		lds r24,carguerosJugador1+8
 259 0056 8130      		cpi r24,lo8(1)
 260 0058 01F4      		brne .L21
 276:../src/main.c **** 		}
 261               		.loc 1 276 0
 262 005a 8D83      		std Y+5,r24
 263               	.L21:
 278:../src/main.c **** 		{
 264               		.loc 1 278 0
 265 005c 8091 0000 		lds r24,carguerosJugador1+11
 266 0060 8130      		cpi r24,lo8(1)
 267 0062 01F4      		brne .L22
 268               		.loc 1 280 0
 269 0064 8F83      		std Y+7,r24
 270               	.L22:
 271               	.LVL13:
 272               	.LBE13:
 281:../src/main.c **** 		}
 282:../src/main.c **** 	}
 283:../src/main.c **** 	
 284:../src/main.c **** 	if ((checks[0] == 1) & (checks[1] == 1) & (checks[2] == 1) & (checks[3] == 1) & (checks[4] == 1) &
 285:../src/main.c **** 	{
 286:../src/main.c **** 		return 1;
 273               		.loc 1 286 0 discriminator 2
 274 0066 31E0      		ldi r19,lo8(1)
 275 0068 8981      		ldd r24,Y+1
 276 006a 8130      		cpi r24,lo8(1)
 277 006c 01F0      		breq .L23
 278 006e 30E0      		ldi r19,0
 279               	.L23:
 280 0070 81E0      		ldi r24,lo8(1)
 281 0072 9A81      		ldd r25,Y+2
 282 0074 9130      		cpi r25,lo8(1)
 283 0076 01F0      		breq .L24
 284 0078 80E0      		ldi r24,0
 285               	.L24:
 286 007a 8323      		and r24,r19
 287 007c 31E0      		ldi r19,lo8(1)
 288 007e 9B81      		ldd r25,Y+3
 289 0080 9130      		cpi r25,lo8(1)
 290 0082 01F0      		breq .L25
 291 0084 30E0      		ldi r19,0
 292               	.L25:
 293 0086 8323      		and r24,r19
 294 0088 21E0      		ldi r18,lo8(1)
 295 008a 9C81      		ldd r25,Y+4
 296 008c 9130      		cpi r25,lo8(1)
 297 008e 01F0      		breq .L26
 298 0090 20E0      		ldi r18,0
 299               	.L26:
 300 0092 982F      		mov r25,r24
 301 0094 9223      		and r25,r18
 302 0096 81E0      		ldi r24,lo8(1)
 303 0098 2D81      		ldd r18,Y+5
 304 009a 2130      		cpi r18,lo8(1)
 305 009c 01F0      		breq .L27
 306 009e 80E0      		ldi r24,0
 307               	.L27:
 308 00a0 8923      		and r24,r25
 309 00a2 91E0      		ldi r25,lo8(1)
 310 00a4 2E81      		ldd r18,Y+6
 311 00a6 2130      		cpi r18,lo8(1)
 312 00a8 01F0      		breq .L28
 313 00aa 90E0      		ldi r25,0
 314               	.L28:
 315 00ac 9823      		and r25,r24
 316 00ae 81E0      		ldi r24,lo8(1)
 317 00b0 2F81      		ldd r18,Y+7
 318 00b2 2130      		cpi r18,lo8(1)
 319 00b4 01F0      		breq .L29
 320 00b6 80E0      		ldi r24,0
 321               	.L29:
 287:../src/main.c **** 	}
 288:../src/main.c **** 	else
 289:../src/main.c **** 	{
 290:../src/main.c **** 		return 0;
 291:../src/main.c **** 	}
 292:../src/main.c **** }
 322               		.loc 1 292 0 discriminator 2
 323 00b8 8923      		and r24,r25
 324               	/* epilogue start */
 325 00ba 2796      		adiw r28,7
 326 00bc 0FB6      		in __tmp_reg__,__SREG__
 327 00be F894      		cli
 328 00c0 DEBF      		out __SP_H__,r29
 329 00c2 0FBE      		out __SREG__,__tmp_reg__
 330 00c4 CDBF      		out __SP_L__,r28
 331 00c6 DF91      		pop r29
 332 00c8 CF91      		pop r28
 333 00ca 0895      		ret
 334               		.cfi_endproc
 335               	.LFE76:
 337               		.section	.text.delaySeconds,"ax",@progbits
 338               	.global	delaySeconds
 340               	delaySeconds:
 341               	.LFB77:
 293:../src/main.c **** 
 294:../src/main.c **** /* Blocking delay in seconds.*/ 
 295:../src/main.c **** void delaySeconds(uint8_t seconds)
 296:../src/main.c **** {
 342               		.loc 1 296 0
 343               		.cfi_startproc
 344               	.LVL14:
 345               	/* prologue: function */
 346               	/* frame size = 0 */
 347               	/* stack size = 0 */
 348               	.L__stack_usage = 0
 349               	.LBB14:
 297:../src/main.c **** 	for(int8_t i=1; i<=seconds; i++)
 350               		.loc 1 297 0
 351 0000 482F      		mov r20,r24
 352 0002 50E0      		ldi r21,0
 353 0004 1416      		cp __zero_reg__,r20
 354 0006 1506      		cpc __zero_reg__,r21
 355 0008 04F4      		brge .L31
 356 000a 91E0      		ldi r25,lo8(1)
 357               	.LVL15:
 358               	.L33:
 359               	.LBB15:
 360               	.LBB16:
 361               	.LBB17:
 362               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
   1:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 363               		.loc 2 187 0 discriminator 1
 364 000c 2FEF      		ldi r18,lo8(799999)
 365 000e 34E3      		ldi r19,hi8(799999)
 366 0010 8CE0      		ldi r24,hlo8(799999)
 367 0012 2150      	1:	subi r18,1
 368 0014 3040      		sbci r19,0
 369 0016 8040      		sbci r24,0
 370 0018 01F4      		brne 1b
 371 001a 00C0      		rjmp .
 372 001c 0000      		nop
 373               	.LVL16:
 374 001e 2FEF      		ldi r18,lo8(799999)
 375 0020 34E3      		ldi r19,hi8(799999)
 376 0022 8CE0      		ldi r24,hlo8(799999)
 377 0024 2150      	1:	subi r18,1
 378 0026 3040      		sbci r19,0
 379 0028 8040      		sbci r24,0
 380 002a 01F4      		brne 1b
 381 002c 00C0      		rjmp .
 382 002e 0000      		nop
 383               	.LVL17:
 384 0030 2FEF      		ldi r18,lo8(799999)
 385 0032 34E3      		ldi r19,hi8(799999)
 386 0034 8CE0      		ldi r24,hlo8(799999)
 387 0036 2150      	1:	subi r18,1
 388 0038 3040      		sbci r19,0
 389 003a 8040      		sbci r24,0
 390 003c 01F4      		brne 1b
 391 003e 00C0      		rjmp .
 392 0040 0000      		nop
 393               	.LVL18:
 394 0042 2FEF      		ldi r18,lo8(799999)
 395 0044 34E3      		ldi r19,hi8(799999)
 396 0046 8CE0      		ldi r24,hlo8(799999)
 397 0048 2150      	1:	subi r18,1
 398 004a 3040      		sbci r19,0
 399 004c 8040      		sbci r24,0
 400 004e 01F4      		brne 1b
 401 0050 00C0      		rjmp .
 402 0052 0000      		nop
 403               	.LVL19:
 404 0054 9F5F      		subi r25,lo8(-(1))
 405               	.LVL20:
 406               	.LBE17:
 407               	.LBE16:
 408               	.LBE15:
 409               		.loc 1 297 0 discriminator 1
 410 0056 292F      		mov r18,r25
 411 0058 092E      		mov __tmp_reg__,r25
 412 005a 000C      		lsl r0
 413 005c 330B      		sbc r19,r19
 414 005e 4217      		cp r20,r18
 415 0060 5307      		cpc r21,r19
 416 0062 04F4      		brge .L33
 417               	.LVL21:
 418               	.L31:
 419 0064 0895      		ret
 420               	.LBE14:
 421               		.cfi_endproc
 422               	.LFE77:
 424               		.section	.text.copyArrayOf1,"ax",@progbits
 425               	.global	copyArrayOf1
 427               	copyArrayOf1:
 428               	.LFB78:
 298:../src/main.c **** 	{
 299:../src/main.c **** 		for(int8_t i=0; i<=3; i++)
 300:../src/main.c **** 		{
 301:../src/main.c **** 			_delay_ms(250);
 302:../src/main.c **** 		}
 303:../src/main.c **** 	}
 304:../src/main.c **** }
 305:../src/main.c **** 
 306:../src/main.c **** /* Copies matrizJugador1 in display_rgb.*/
 307:../src/main.c **** void copyArrayOf1(void)
 308:../src/main.c **** {
 429               		.loc 1 308 0
 430               		.cfi_startproc
 431 0000 CF93      		push r28
 432               	.LCFI8:
 433               		.cfi_def_cfa_offset 3
 434               		.cfi_offset 28, -2
 435 0002 DF93      		push r29
 436               	.LCFI9:
 437               		.cfi_def_cfa_offset 4
 438               		.cfi_offset 29, -3
 439               	/* prologue: function */
 440               	/* frame size = 0 */
 441               	/* stack size = 2 */
 442               	.L__stack_usage = 2
 443               	.LVL22:
 444 0004 E0E0      		ldi r30,lo8(matrizJugador1)
 445 0006 F0E0      		ldi r31,hi8(matrizJugador1)
 446 0008 60E0      		ldi r22,lo8(display_rgb)
 447 000a 70E0      		ldi r23,hi8(display_rgb)
 448 000c C0E0      		ldi r28,lo8(matrizJugador1+192)
 449 000e D0E0      		ldi r29,hi8(matrizJugador1+192)
 450 0010 00C0      		rjmp .L36
 451               	.LVL23:
 452               	.L37:
 453               	.LBB18:
 454               	.LBB19:
 309:../src/main.c **** 	for (int i=0; i<=7; i++)
 310:../src/main.c **** 		for (int j=0; j<=7; j++)
 311:../src/main.c **** 			display_rgb[i][j] = matrizJugador1[i][j];
 455               		.loc 1 311 0 discriminator 3
 456 0012 2191      		ld r18,Z+
 457 0014 3191      		ld r19,Z+
 458 0016 4191      		ld r20,Z+
 459 0018 2D93      		st X+,r18
 460 001a 3D93      		st X+,r19
 461 001c 4D93      		st X+,r20
 462               	.LVL24:
 310:../src/main.c **** 			display_rgb[i][j] = matrizJugador1[i][j];
 463               		.loc 1 310 0 discriminator 3
 464 001e E817      		cp r30,r24
 465 0020 F907      		cpc r31,r25
 466 0022 01F4      		brne .L37
 467 0024 685E      		subi r22,-24
 468 0026 7F4F      		sbci r23,-1
 469 0028 FC01      		movw r30,r24
 470               	.LBE19:
 309:../src/main.c **** 	for (int i=0; i<=7; i++)
 471               		.loc 1 309 0 discriminator 2
 472 002a C817      		cp r28,r24
 473 002c D907      		cpc r29,r25
 474 002e 01F0      		breq .L35
 475               	.L36:
 476               	.LVL25:
 477 0030 CF01      		movw r24,r30
 478 0032 4896      		adiw r24,24
 479               	.LBE18:
 308:../src/main.c **** 	for (int i=0; i<=7; i++)
 480               		.loc 1 308 0 discriminator 1
 481 0034 DB01      		movw r26,r22
 482 0036 00C0      		rjmp .L37
 483               	.LVL26:
 484               	.L35:
 485               	/* epilogue start */
 312:../src/main.c **** }
 486               		.loc 1 312 0
 487 0038 DF91      		pop r29
 488 003a CF91      		pop r28
 489 003c 0895      		ret
 490               		.cfi_endproc
 491               	.LFE78:
 493               		.section	.text.copyArrayOf2,"ax",@progbits
 494               	.global	copyArrayOf2
 496               	copyArrayOf2:
 497               	.LFB79:
 313:../src/main.c **** 
 314:../src/main.c **** /* Copies matrizJugador2 in display_rgb.*/
 315:../src/main.c **** void copyArrayOf2(void)
 316:../src/main.c **** {
 498               		.loc 1 316 0
 499               		.cfi_startproc
 500 0000 CF93      		push r28
 501               	.LCFI10:
 502               		.cfi_def_cfa_offset 3
 503               		.cfi_offset 28, -2
 504 0002 DF93      		push r29
 505               	.LCFI11:
 506               		.cfi_def_cfa_offset 4
 507               		.cfi_offset 29, -3
 508               	/* prologue: function */
 509               	/* frame size = 0 */
 510               	/* stack size = 2 */
 511               	.L__stack_usage = 2
 512               	.LVL27:
 513 0004 E0E0      		ldi r30,lo8(matrizJugador2)
 514 0006 F0E0      		ldi r31,hi8(matrizJugador2)
 515 0008 60E0      		ldi r22,lo8(display_rgb)
 516 000a 70E0      		ldi r23,hi8(display_rgb)
 517 000c C0E0      		ldi r28,lo8(matrizJugador2+192)
 518 000e D0E0      		ldi r29,hi8(matrizJugador2+192)
 519 0010 00C0      		rjmp .L41
 520               	.LVL28:
 521               	.L42:
 522               	.LBB20:
 523               	.LBB21:
 317:../src/main.c **** 	for (int i=0; i<=7; i++)
 318:../src/main.c **** 		for (int j=0; j<=7; j++)
 319:../src/main.c **** 			display_rgb[i][j] = matrizJugador2[i][j];
 524               		.loc 1 319 0 discriminator 3
 525 0012 2191      		ld r18,Z+
 526 0014 3191      		ld r19,Z+
 527 0016 4191      		ld r20,Z+
 528 0018 2D93      		st X+,r18
 529 001a 3D93      		st X+,r19
 530 001c 4D93      		st X+,r20
 531               	.LVL29:
 318:../src/main.c **** 			display_rgb[i][j] = matrizJugador2[i][j];
 532               		.loc 1 318 0 discriminator 3
 533 001e E817      		cp r30,r24
 534 0020 F907      		cpc r31,r25
 535 0022 01F4      		brne .L42
 536 0024 685E      		subi r22,-24
 537 0026 7F4F      		sbci r23,-1
 538 0028 FC01      		movw r30,r24
 539               	.LBE21:
 317:../src/main.c **** 	for (int i=0; i<=7; i++)
 540               		.loc 1 317 0 discriminator 2
 541 002a C817      		cp r28,r24
 542 002c D907      		cpc r29,r25
 543 002e 01F0      		breq .L40
 544               	.L41:
 545               	.LVL30:
 546 0030 CF01      		movw r24,r30
 547 0032 4896      		adiw r24,24
 548               	.LBE20:
 316:../src/main.c **** 	for (int i=0; i<=7; i++)
 549               		.loc 1 316 0 discriminator 1
 550 0034 DB01      		movw r26,r22
 551 0036 00C0      		rjmp .L42
 552               	.LVL31:
 553               	.L40:
 554               	/* epilogue start */
 320:../src/main.c **** }
 555               		.loc 1 320 0
 556 0038 DF91      		pop r29
 557 003a CF91      		pop r28
 558 003c 0895      		ret
 559               		.cfi_endproc
 560               	.LFE79:
 562               		.section	.text.scanSubmarinos1,"ax",@progbits
 563               	.global	scanSubmarinos1
 565               	scanSubmarinos1:
 566               	.LFB82:
 321:../src/main.c **** 
 322:../src/main.c **** /* Takes coordinates x, y from 0:7 as arguments and shoots player1 there.*/
 323:../src/main.c **** void shootPlayer1(int8_t x, int8_t y)
 324:../src/main.c **** {
 325:../src/main.c **** 	matrizJugador1[x][y] = Agua;
 326:../src/main.c **** 	scanSubmarinos1(x, y);
 327:../src/main.c **** 	scanCargueros1(x, y);
 328:../src/main.c **** }
 329:../src/main.c **** 
 330:../src/main.c **** /* Takes coordinates x, y from 0:7 as arguments and shoots player2 there.*/
 331:../src/main.c **** void shootPlayer2(int8_t x, int8_t y)
 332:../src/main.c **** {
 333:../src/main.c **** 	matrizJugador2[x][y] = Agua;
 334:../src/main.c **** 	scanSubmarinos2(x, y);
 335:../src/main.c **** 	scanCargueros2(x, y);
 336:../src/main.c **** }
 337:../src/main.c **** 
 338:../src/main.c **** /* Takes coordinates x, y from 0:7 as arguments and scans Submarinos of player1.
 339:../src/main.c **** Sets MatrizJugador1 corresponding to the existance of a ship on the coordinates.*/
 340:../src/main.c **** void scanSubmarinos1(int8_t x, int8_t y)
 341:../src/main.c **** {
 567               		.loc 1 341 0
 568               		.cfi_startproc
 569               	.LVL32:
 570 0000 AF92      		push r10
 571               	.LCFI12:
 572               		.cfi_def_cfa_offset 3
 573               		.cfi_offset 10, -2
 574 0002 BF92      		push r11
 575               	.LCFI13:
 576               		.cfi_def_cfa_offset 4
 577               		.cfi_offset 11, -3
 578 0004 CF92      		push r12
 579               	.LCFI14:
 580               		.cfi_def_cfa_offset 5
 581               		.cfi_offset 12, -4
 582 0006 DF92      		push r13
 583               	.LCFI15:
 584               		.cfi_def_cfa_offset 6
 585               		.cfi_offset 13, -5
 586 0008 EF92      		push r14
 587               	.LCFI16:
 588               		.cfi_def_cfa_offset 7
 589               		.cfi_offset 14, -6
 590 000a FF92      		push r15
 591               	.LCFI17:
 592               		.cfi_def_cfa_offset 8
 593               		.cfi_offset 15, -7
 594 000c 0F93      		push r16
 595               	.LCFI18:
 596               		.cfi_def_cfa_offset 9
 597               		.cfi_offset 16, -8
 598 000e 1F93      		push r17
 599               	.LCFI19:
 600               		.cfi_def_cfa_offset 10
 601               		.cfi_offset 17, -9
 602 0010 CF93      		push r28
 603               	.LCFI20:
 604               		.cfi_def_cfa_offset 11
 605               		.cfi_offset 28, -10
 606 0012 DF93      		push r29
 607               	.LCFI21:
 608               		.cfi_def_cfa_offset 12
 609               		.cfi_offset 29, -11
 610               	/* prologue: function */
 611               	/* frame size = 0 */
 612               	/* stack size = 10 */
 613               	.L__stack_usage = 10
 614               	.LVL33:
 615 0014 E0E0      		ldi r30,lo8(submarinosJugador1)
 616 0016 F0E0      		ldi r31,hi8(submarinosJugador1)
 617 0018 C0E0      		ldi r28,lo8(submarinosJugador1+9)
 618 001a D0E0      		ldi r29,hi8(submarinosJugador1+9)
 619               	.LBB22:
 342:../src/main.c **** 	for(int i=0; i<=2; i++)
 343:../src/main.c **** 	{
 344:../src/main.c **** 		if ((submarinosJugador1[i].x0 == x) & (submarinosJugador1[i].y0 == y))
 620               		.loc 1 344 0
 621 001c 482F      		mov r20,r24
 622 001e 880F      		lsl r24
 623 0020 550B      		sbc r21,r21
 624 0022 062E      		mov __tmp_reg__,r22
 625 0024 000C      		lsl r0
 626 0026 770B      		sbc r23,r23
 627 0028 81E0      		ldi r24,lo8(1)
 628               	.LVL34:
 629 002a F12C      		mov r15,__zero_reg__
 345:../src/main.c **** 		{
 346:../src/main.c **** 			submarinosJugador1[i].boolDisparado = 1;
 347:../src/main.c **** 			matrizJugador1[x][y] = Hundido;
 630               		.loc 1 347 0
 631 002c DB01      		movw r26,r22
 632 002e AA0F      		lsl r26
 633 0030 BB1F      		rol r27
 634 0032 9D01      		movw r18,r26
 635 0034 260F      		add r18,r22
 636 0036 371F      		adc r19,r23
 637 0038 DA01      		movw r26,r20
 638 003a AA0F      		lsl r26
 639 003c BB1F      		rol r27
 640 003e A40F      		add r26,r20
 641 0040 B51F      		adc r27,r21
 642 0042 AA0F      		lsl r26
 643 0044 BB1F      		rol r27
 644 0046 AA0F      		lsl r26
 645 0048 BB1F      		rol r27
 646 004a AA0F      		lsl r26
 647 004c BB1F      		rol r27
 648 004e A20F      		add r26,r18
 649 0050 B31F      		adc r27,r19
 650 0052 9D01      		movw r18,r26
 651 0054 2050      		subi r18,lo8(-(matrizJugador1))
 652 0056 3040      		sbci r19,hi8(-(matrizJugador1))
 653 0058 5901      		movw r10,r18
 654               	.LVL35:
 655               	.L49:
 656 005a 8F01      		movw r16,r30
 344:../src/main.c **** 		{
 657               		.loc 1 344 0
 658 005c 2081      		ld r18,Z
 659 005e 30E0      		ldi r19,0
 660 0060 982F      		mov r25,r24
 661 0062 2417      		cp r18,r20
 662 0064 3507      		cpc r19,r21
 663 0066 01F0      		breq .L47
 664 0068 9F2D      		mov r25,r15
 665               	.L47:
 666 006a 9923      		tst r25
 667 006c 01F0      		breq .L46
 668 006e D801      		movw r26,r16
 669 0070 1196      		adiw r26,1
 670 0072 2C91      		ld r18,X
 671 0074 30E0      		ldi r19,0
 672 0076 982F      		mov r25,r24
 673 0078 2617      		cp r18,r22
 674 007a 3707      		cpc r19,r23
 675 007c 01F0      		breq .L48
 676 007e 9F2D      		mov r25,r15
 677               	.L48:
 678 0080 9923      		tst r25
 679 0082 01F0      		breq .L46
 346:../src/main.c **** 			matrizJugador1[x][y] = Hundido;
 680               		.loc 1 346 0
 681 0084 D801      		movw r26,r16
 682 0086 1296      		adiw r26,2
 683 0088 8C93      		st X,r24
 684               		.loc 1 347 0
 685 008a C090 0000 		lds r12,Hundido
 686 008e D090 0000 		lds r13,Hundido+1
 687 0092 E090 0000 		lds r14,Hundido+2
 688 0096 D501      		movw r26,r10
 689 0098 CD92      		st X+,r12
 690 009a DD92      		st X+,r13
 691 009c EC92      		st X,r14
 692               	.L46:
 693 009e 3396      		adiw r30,3
 342:../src/main.c **** 	{
 694               		.loc 1 342 0 discriminator 2
 695 00a0 EC17      		cp r30,r28
 696 00a2 FD07      		cpc r31,r29
 697 00a4 01F4      		brne .L49
 698               	/* epilogue start */
 699               	.LBE22:
 348:../src/main.c **** 		}
 349:../src/main.c **** 	}
 350:../src/main.c **** }
 700               		.loc 1 350 0
 701 00a6 DF91      		pop r29
 702 00a8 CF91      		pop r28
 703 00aa 1F91      		pop r17
 704 00ac 0F91      		pop r16
 705 00ae FF90      		pop r15
 706 00b0 EF90      		pop r14
 707 00b2 DF90      		pop r13
 708 00b4 CF90      		pop r12
 709 00b6 BF90      		pop r11
 710 00b8 AF90      		pop r10
 711 00ba 0895      		ret
 712               		.cfi_endproc
 713               	.LFE82:
 715               		.section	.text.scanSubmarinos2,"ax",@progbits
 716               	.global	scanSubmarinos2
 718               	scanSubmarinos2:
 719               	.LFB83:
 351:../src/main.c **** 
 352:../src/main.c **** /* Takes coordinates x, y from 0:7 as arguments and scans Submarinos of player2.
 353:../src/main.c **** Sets MatrizJugador2 corresponding to the existance of a ship on the coordinates.*/
 354:../src/main.c **** void scanSubmarinos2(int8_t x, int8_t y)
 355:../src/main.c **** {
 720               		.loc 1 355 0
 721               		.cfi_startproc
 722               	.LVL36:
 723 0000 AF92      		push r10
 724               	.LCFI22:
 725               		.cfi_def_cfa_offset 3
 726               		.cfi_offset 10, -2
 727 0002 BF92      		push r11
 728               	.LCFI23:
 729               		.cfi_def_cfa_offset 4
 730               		.cfi_offset 11, -3
 731 0004 CF92      		push r12
 732               	.LCFI24:
 733               		.cfi_def_cfa_offset 5
 734               		.cfi_offset 12, -4
 735 0006 DF92      		push r13
 736               	.LCFI25:
 737               		.cfi_def_cfa_offset 6
 738               		.cfi_offset 13, -5
 739 0008 EF92      		push r14
 740               	.LCFI26:
 741               		.cfi_def_cfa_offset 7
 742               		.cfi_offset 14, -6
 743 000a FF92      		push r15
 744               	.LCFI27:
 745               		.cfi_def_cfa_offset 8
 746               		.cfi_offset 15, -7
 747 000c 0F93      		push r16
 748               	.LCFI28:
 749               		.cfi_def_cfa_offset 9
 750               		.cfi_offset 16, -8
 751 000e 1F93      		push r17
 752               	.LCFI29:
 753               		.cfi_def_cfa_offset 10
 754               		.cfi_offset 17, -9
 755 0010 CF93      		push r28
 756               	.LCFI30:
 757               		.cfi_def_cfa_offset 11
 758               		.cfi_offset 28, -10
 759 0012 DF93      		push r29
 760               	.LCFI31:
 761               		.cfi_def_cfa_offset 12
 762               		.cfi_offset 29, -11
 763               	/* prologue: function */
 764               	/* frame size = 0 */
 765               	/* stack size = 10 */
 766               	.L__stack_usage = 10
 767               	.LVL37:
 768 0014 E0E0      		ldi r30,lo8(submarinosJugador2)
 769 0016 F0E0      		ldi r31,hi8(submarinosJugador2)
 770 0018 C0E0      		ldi r28,lo8(submarinosJugador2+9)
 771 001a D0E0      		ldi r29,hi8(submarinosJugador2+9)
 772               	.LBB23:
 356:../src/main.c **** 	for(int i=0; i<=2; i++)
 357:../src/main.c **** 	{
 358:../src/main.c **** 		if ((submarinosJugador2[i].x0 == x) & (submarinosJugador2[i].y0 == y))
 773               		.loc 1 358 0
 774 001c 482F      		mov r20,r24
 775 001e 880F      		lsl r24
 776 0020 550B      		sbc r21,r21
 777 0022 062E      		mov __tmp_reg__,r22
 778 0024 000C      		lsl r0
 779 0026 770B      		sbc r23,r23
 780 0028 81E0      		ldi r24,lo8(1)
 781               	.LVL38:
 782 002a F12C      		mov r15,__zero_reg__
 359:../src/main.c **** 		{
 360:../src/main.c **** 			submarinosJugador2[i].boolDisparado = 1;
 361:../src/main.c **** 			matrizJugador2[x][y] = Hundido;
 783               		.loc 1 361 0
 784 002c DB01      		movw r26,r22
 785 002e AA0F      		lsl r26
 786 0030 BB1F      		rol r27
 787 0032 9D01      		movw r18,r26
 788 0034 260F      		add r18,r22
 789 0036 371F      		adc r19,r23
 790 0038 DA01      		movw r26,r20
 791 003a AA0F      		lsl r26
 792 003c BB1F      		rol r27
 793 003e A40F      		add r26,r20
 794 0040 B51F      		adc r27,r21
 795 0042 AA0F      		lsl r26
 796 0044 BB1F      		rol r27
 797 0046 AA0F      		lsl r26
 798 0048 BB1F      		rol r27
 799 004a AA0F      		lsl r26
 800 004c BB1F      		rol r27
 801 004e A20F      		add r26,r18
 802 0050 B31F      		adc r27,r19
 803 0052 9D01      		movw r18,r26
 804 0054 2050      		subi r18,lo8(-(matrizJugador2))
 805 0056 3040      		sbci r19,hi8(-(matrizJugador2))
 806 0058 5901      		movw r10,r18
 807               	.LVL39:
 808               	.L55:
 809 005a 8F01      		movw r16,r30
 358:../src/main.c **** 		{
 810               		.loc 1 358 0
 811 005c 2081      		ld r18,Z
 812 005e 30E0      		ldi r19,0
 813 0060 982F      		mov r25,r24
 814 0062 2417      		cp r18,r20
 815 0064 3507      		cpc r19,r21
 816 0066 01F0      		breq .L53
 817 0068 9F2D      		mov r25,r15
 818               	.L53:
 819 006a 9923      		tst r25
 820 006c 01F0      		breq .L52
 821 006e D801      		movw r26,r16
 822 0070 1196      		adiw r26,1
 823 0072 2C91      		ld r18,X
 824 0074 30E0      		ldi r19,0
 825 0076 982F      		mov r25,r24
 826 0078 2617      		cp r18,r22
 827 007a 3707      		cpc r19,r23
 828 007c 01F0      		breq .L54
 829 007e 9F2D      		mov r25,r15
 830               	.L54:
 831 0080 9923      		tst r25
 832 0082 01F0      		breq .L52
 360:../src/main.c **** 			matrizJugador2[x][y] = Hundido;
 833               		.loc 1 360 0
 834 0084 D801      		movw r26,r16
 835 0086 1296      		adiw r26,2
 836 0088 8C93      		st X,r24
 837               		.loc 1 361 0
 838 008a C090 0000 		lds r12,Hundido
 839 008e D090 0000 		lds r13,Hundido+1
 840 0092 E090 0000 		lds r14,Hundido+2
 841 0096 D501      		movw r26,r10
 842 0098 CD92      		st X+,r12
 843 009a DD92      		st X+,r13
 844 009c EC92      		st X,r14
 845               	.L52:
 846 009e 3396      		adiw r30,3
 356:../src/main.c **** 	{
 847               		.loc 1 356 0 discriminator 2
 848 00a0 EC17      		cp r30,r28
 849 00a2 FD07      		cpc r31,r29
 850 00a4 01F4      		brne .L55
 851               	/* epilogue start */
 852               	.LBE23:
 362:../src/main.c **** 		}
 363:../src/main.c **** 	}
 364:../src/main.c **** }
 853               		.loc 1 364 0
 854 00a6 DF91      		pop r29
 855 00a8 CF91      		pop r28
 856 00aa 1F91      		pop r17
 857 00ac 0F91      		pop r16
 858 00ae FF90      		pop r15
 859 00b0 EF90      		pop r14
 860 00b2 DF90      		pop r13
 861 00b4 CF90      		pop r12
 862 00b6 BF90      		pop r11
 863 00b8 AF90      		pop r10
 864 00ba 0895      		ret
 865               		.cfi_endproc
 866               	.LFE83:
 868               		.section	.text.scanCargueros1,"ax",@progbits
 869               	.global	scanCargueros1
 871               	scanCargueros1:
 872               	.LFB84:
 365:../src/main.c **** 
 366:../src/main.c **** /* Takes coordinates x, y from 0:7 as arguments and scans Cargueros of player1.
 367:../src/main.c **** Sets MatrizJugador1 corresponding to the existance of a ship on the coordinates.*/
 368:../src/main.c **** void scanCargueros1(int8_t x, int8_t y)
 369:../src/main.c **** {
 873               		.loc 1 369 0
 874               		.cfi_startproc
 875               	.LVL40:
 876 0000 4F92      		push r4
 877               	.LCFI32:
 878               		.cfi_def_cfa_offset 3
 879               		.cfi_offset 4, -2
 880 0002 5F92      		push r5
 881               	.LCFI33:
 882               		.cfi_def_cfa_offset 4
 883               		.cfi_offset 5, -3
 884 0004 6F92      		push r6
 885               	.LCFI34:
 886               		.cfi_def_cfa_offset 5
 887               		.cfi_offset 6, -4
 888 0006 7F92      		push r7
 889               	.LCFI35:
 890               		.cfi_def_cfa_offset 6
 891               		.cfi_offset 7, -5
 892 0008 8F92      		push r8
 893               	.LCFI36:
 894               		.cfi_def_cfa_offset 7
 895               		.cfi_offset 8, -6
 896 000a AF92      		push r10
 897               	.LCFI37:
 898               		.cfi_def_cfa_offset 8
 899               		.cfi_offset 10, -7
 900 000c BF92      		push r11
 901               	.LCFI38:
 902               		.cfi_def_cfa_offset 9
 903               		.cfi_offset 11, -8
 904 000e CF92      		push r12
 905               	.LCFI39:
 906               		.cfi_def_cfa_offset 10
 907               		.cfi_offset 12, -9
 908 0010 DF92      		push r13
 909               	.LCFI40:
 910               		.cfi_def_cfa_offset 11
 911               		.cfi_offset 13, -10
 912 0012 EF92      		push r14
 913               	.LCFI41:
 914               		.cfi_def_cfa_offset 12
 915               		.cfi_offset 14, -11
 916 0014 FF92      		push r15
 917               	.LCFI42:
 918               		.cfi_def_cfa_offset 13
 919               		.cfi_offset 15, -12
 920 0016 0F93      		push r16
 921               	.LCFI43:
 922               		.cfi_def_cfa_offset 14
 923               		.cfi_offset 16, -13
 924 0018 1F93      		push r17
 925               	.LCFI44:
 926               		.cfi_def_cfa_offset 15
 927               		.cfi_offset 17, -14
 928 001a CF93      		push r28
 929               	.LCFI45:
 930               		.cfi_def_cfa_offset 16
 931               		.cfi_offset 28, -15
 932 001c DF93      		push r29
 933               	.LCFI46:
 934               		.cfi_def_cfa_offset 17
 935               		.cfi_offset 29, -16
 936               	/* prologue: function */
 937               	/* frame size = 0 */
 938               	/* stack size = 15 */
 939               	.L__stack_usage = 15
 940               	.LVL41:
 941 001e E0E0      		ldi r30,lo8(carguerosJugador1)
 942 0020 F0E0      		ldi r31,hi8(carguerosJugador1)
 943 0022 0F2E      		mov __tmp_reg__,r31
 944 0024 F0E0      		ldi r31,lo8(carguerosJugador1+12)
 945 0026 EF2E      		mov r14,r31
 946 0028 F0E0      		ldi r31,hi8(carguerosJugador1+12)
 947 002a FF2E      		mov r15,r31
 948 002c F02D      		mov r31,__tmp_reg__
 949               	.LBB24:
 370:../src/main.c **** 	for(int i=0; i<=1; i++)
 371:../src/main.c **** 	{
 372:../src/main.c **** 		if ((carguerosJugador1[i].x0 == x) & (carguerosJugador1[i].y0 == y))
 950               		.loc 1 372 0
 951 002e 082E      		mov __tmp_reg__,r24
 952 0030 000C      		lsl r0
 953 0032 990B      		sbc r25,r25
 954 0034 062E      		mov __tmp_reg__,r22
 955 0036 000C      		lsl r0
 956 0038 770B      		sbc r23,r23
 957 003a BB24      		clr r11
 958 003c B394      		inc r11
 959 003e A12C      		mov r10,__zero_reg__
 373:../src/main.c **** 		{
 374:../src/main.c **** 			carguerosJugador1[i].boolDisparado0 = 1;
 375:../src/main.c **** 			if ((carguerosJugador1[i].boolDisparado0 == 1) & (carguerosJugador1[i].boolDisparado1 == 1))
 376:../src/main.c **** 			{
 377:../src/main.c **** 				matrizJugador1[carguerosJugador1[i].x0][carguerosJugador1[i].y0] = Hundido;
 378:../src/main.c **** 				matrizJugador1[carguerosJugador1[i].x1][carguerosJugador1[i].y1] = Hundido;
 379:../src/main.c **** 			}
 380:../src/main.c **** 			else
 381:../src/main.c **** 				matrizJugador1[x][y] = Danado;
 382:../src/main.c **** 		}
 383:../src/main.c **** 		else if ((carguerosJugador1[i].x1 == x) & (carguerosJugador1[i].y1 == y))
 384:../src/main.c **** 		{
 385:../src/main.c **** 			carguerosJugador1[i].boolDisparado1 = 1;
 386:../src/main.c **** 			if ((carguerosJugador1[i].boolDisparado0 == 1) & (carguerosJugador1[i].boolDisparado1 == 1))
 387:../src/main.c **** 			{
 388:../src/main.c **** 				matrizJugador1[carguerosJugador1[i].x0][carguerosJugador1[i].y0] = Hundido;
 389:../src/main.c **** 				matrizJugador1[carguerosJugador1[i].x1][carguerosJugador1[i].y1] = Hundido;
 390:../src/main.c **** 			}
 391:../src/main.c **** 			else
 392:../src/main.c **** 				matrizJugador1[x][y] = Danado;
 960               		.loc 1 392 0
 961 0040 9B01      		movw r18,r22
 962 0042 220F      		lsl r18
 963 0044 331F      		rol r19
 964 0046 A901      		movw r20,r18
 965 0048 460F      		add r20,r22
 966 004a 571F      		adc r21,r23
 967 004c 9C01      		movw r18,r24
 968 004e 220F      		lsl r18
 969 0050 331F      		rol r19
 970 0052 280F      		add r18,r24
 971 0054 391F      		adc r19,r25
 972 0056 220F      		lsl r18
 973 0058 331F      		rol r19
 974 005a 220F      		lsl r18
 975 005c 331F      		rol r19
 976 005e 220F      		lsl r18
 977 0060 331F      		rol r19
 978 0062 240F      		add r18,r20
 979 0064 351F      		adc r19,r21
 980 0066 A901      		movw r20,r18
 981 0068 4050      		subi r20,lo8(-(matrizJugador1))
 982 006a 5040      		sbci r21,hi8(-(matrizJugador1))
 983 006c 2A01      		movw r4,r20
 984               	.LVL42:
 985               	.L66:
 986 006e EF01      		movw r28,r30
 372:../src/main.c **** 		{
 987               		.loc 1 372 0
 988 0070 2081      		ld r18,Z
 989 0072 30E0      		ldi r19,0
 990 0074 4181      		ldd r20,Z+1
 991 0076 50E0      		ldi r21,0
 992 0078 1B2D      		mov r17,r11
 993 007a 2817      		cp r18,r24
 994 007c 3907      		cpc r19,r25
 995 007e 01F0      		breq .L59
 996 0080 1A2D      		mov r17,r10
 997               	.L59:
 998 0082 1123      		tst r17
 999 0084 01F4      		brne .+2
 1000 0086 00C0      		rjmp .L58
 1001 0088 1B2D      		mov r17,r11
 1002 008a 4617      		cp r20,r22
 1003 008c 5707      		cpc r21,r23
 1004 008e 01F0      		breq .L60
 1005 0090 1A2D      		mov r17,r10
 1006               	.L60:
 1007 0092 1123      		tst r17
 1008 0094 01F4      		brne .+2
 1009 0096 00C0      		rjmp .L58
 374:../src/main.c **** 			if ((carguerosJugador1[i].boolDisparado0 == 1) & (carguerosJugador1[i].boolDisparado1 == 1))
 1010               		.loc 1 374 0
 1011 0098 BA82      		std Y+2,r11
 375:../src/main.c **** 			{
 1012               		.loc 1 375 0
 1013 009a 1D81      		ldd r17,Y+5
 1014 009c 1130      		cpi r17,lo8(1)
 1015 009e 01F4      		brne .L61
 377:../src/main.c **** 				matrizJugador1[carguerosJugador1[i].x1][carguerosJugador1[i].y1] = Hundido;
 1016               		.loc 1 377 0
 1017 00a0 8A01      		movw r16,r20
 1018 00a2 000F      		lsl r16
 1019 00a4 111F      		rol r17
 1020 00a6 400F      		add r20,r16
 1021 00a8 511F      		adc r21,r17
 1022 00aa 8901      		movw r16,r18
 1023 00ac 000F      		lsl r16
 1024 00ae 111F      		rol r17
 1025 00b0 200F      		add r18,r16
 1026 00b2 311F      		adc r19,r17
 1027 00b4 220F      		lsl r18
 1028 00b6 331F      		rol r19
 1029 00b8 220F      		lsl r18
 1030 00ba 331F      		rol r19
 1031 00bc 220F      		lsl r18
 1032 00be 331F      		rol r19
 1033 00c0 420F      		add r20,r18
 1034 00c2 531F      		adc r21,r19
 1035 00c4 4050      		subi r20,lo8(-(matrizJugador1))
 1036 00c6 5040      		sbci r21,hi8(-(matrizJugador1))
 1037 00c8 6090 0000 		lds r6,Hundido
 1038 00cc 7090 0000 		lds r7,Hundido+1
 1039 00d0 8090 0000 		lds r8,Hundido+2
 1040 00d4 DA01      		movw r26,r20
 1041 00d6 6D92      		st X+,r6
 1042 00d8 7D92      		st X+,r7
 1043 00da 8C92      		st X,r8
 378:../src/main.c **** 			}
 1044               		.loc 1 378 0
 1045 00dc 4C81      		ldd r20,Y+4
 1046 00de 50E0      		ldi r21,0
 1047 00e0 2B81      		ldd r18,Y+3
 1048 00e2 30E0      		ldi r19,0
 1049 00e4 EA01      		movw r28,r20
 1050 00e6 CC0F      		lsl r28
 1051 00e8 DD1F      		rol r29
 1052 00ea 4C0F      		add r20,r28
 1053 00ec 5D1F      		adc r21,r29
 1054 00ee E901      		movw r28,r18
 1055 00f0 CC0F      		lsl r28
 1056 00f2 DD1F      		rol r29
 1057 00f4 C20F      		add r28,r18
 1058 00f6 D31F      		adc r29,r19
 1059 00f8 CC0F      		lsl r28
 1060 00fa DD1F      		rol r29
 1061 00fc CC0F      		lsl r28
 1062 00fe DD1F      		rol r29
 1063 0100 CC0F      		lsl r28
 1064 0102 DD1F      		rol r29
 1065 0104 4C0F      		add r20,r28
 1066 0106 5D1F      		adc r21,r29
 1067 0108 EA01      		movw r28,r20
 1068 010a C050      		subi r28,lo8(-(matrizJugador1))
 1069 010c D040      		sbci r29,hi8(-(matrizJugador1))
 1070 010e 6882      		st Y,r6
 1071 0110 7982      		std Y+1,r7
 1072 0112 8A82      		std Y+2,r8
 1073 0114 00C0      		rjmp .L62
 1074               	.L61:
 381:../src/main.c **** 		}
 1075               		.loc 1 381 0
 1076 0116 2091 0000 		lds r18,Danado
 1077 011a 3091 0000 		lds r19,Danado+1
 1078 011e 4091 0000 		lds r20,Danado+2
 1079 0122 D201      		movw r26,r4
 1080 0124 2D93      		st X+,r18
 1081 0126 3D93      		st X+,r19
 1082 0128 4C93      		st X,r20
 1083 012a 00C0      		rjmp .L62
 1084               	.L58:
 383:../src/main.c **** 		{
 1085               		.loc 1 383 0
 1086 012c 0B81      		ldd r16,Y+3
 1087 012e 10E0      		ldi r17,0
 1088 0130 CC80      		ldd r12,Y+4
 1089 0132 D12C      		mov r13,__zero_reg__
 1090 0134 8B2C      		mov r8,r11
 1091 0136 8017      		cp r24,r16
 1092 0138 9107      		cpc r25,r17
 1093 013a 01F0      		breq .L63
 1094 013c 8A2C      		mov r8,r10
 1095               	.L63:
 1096 013e 8820      		tst r8
 1097 0140 01F4      		brne .+2
 1098 0142 00C0      		rjmp .L62
 1099 0144 8B2C      		mov r8,r11
 1100 0146 6C15      		cp r22,r12
 1101 0148 7D05      		cpc r23,r13
 1102 014a 01F0      		breq .L64
 1103 014c 8A2C      		mov r8,r10
 1104               	.L64:
 1105 014e 8820      		tst r8
 1106 0150 01F4      		brne .+2
 1107 0152 00C0      		rjmp .L62
 385:../src/main.c **** 			if ((carguerosJugador1[i].boolDisparado0 == 1) & (carguerosJugador1[i].boolDisparado1 == 1))
 1108               		.loc 1 385 0
 1109 0154 BD82      		std Y+5,r11
 386:../src/main.c **** 			{
 1110               		.loc 1 386 0
 1111 0156 CA81      		ldd r28,Y+2
 1112 0158 C130      		cpi r28,lo8(1)
 1113 015a 01F4      		brne .L65
 388:../src/main.c **** 				matrizJugador1[carguerosJugador1[i].x1][carguerosJugador1[i].y1] = Hundido;
 1114               		.loc 1 388 0
 1115 015c EA01      		movw r28,r20
 1116 015e CC0F      		lsl r28
 1117 0160 DD1F      		rol r29
 1118 0162 4C0F      		add r20,r28
 1119 0164 5D1F      		adc r21,r29
 1120 0166 E901      		movw r28,r18
 1121 0168 CC0F      		lsl r28
 1122 016a DD1F      		rol r29
 1123 016c C20F      		add r28,r18
 1124 016e D31F      		adc r29,r19
 1125 0170 CC0F      		lsl r28
 1126 0172 DD1F      		rol r29
 1127 0174 CC0F      		lsl r28
 1128 0176 DD1F      		rol r29
 1129 0178 CC0F      		lsl r28
 1130 017a DD1F      		rol r29
 1131 017c 4C0F      		add r20,r28
 1132 017e 5D1F      		adc r21,r29
 1133 0180 EA01      		movw r28,r20
 1134 0182 C050      		subi r28,lo8(-(matrizJugador1))
 1135 0184 D040      		sbci r29,hi8(-(matrizJugador1))
 1136 0186 2091 0000 		lds r18,Hundido
 1137 018a 3091 0000 		lds r19,Hundido+1
 1138 018e 4091 0000 		lds r20,Hundido+2
 1139 0192 2883      		st Y,r18
 1140 0194 3983      		std Y+1,r19
 1141 0196 4A83      		std Y+2,r20
 389:../src/main.c **** 			}
 1142               		.loc 1 389 0
 1143 0198 E601      		movw r28,r12
 1144 019a CC0F      		lsl r28
 1145 019c DD1F      		rol r29
 1146 019e CC0E      		add r12,r28
 1147 01a0 DD1E      		adc r13,r29
 1148 01a2 E801      		movw r28,r16
 1149 01a4 CC0F      		lsl r28
 1150 01a6 DD1F      		rol r29
 1151 01a8 C00F      		add r28,r16
 1152 01aa D11F      		adc r29,r17
 1153 01ac CC0F      		lsl r28
 1154 01ae DD1F      		rol r29
 1155 01b0 CC0F      		lsl r28
 1156 01b2 DD1F      		rol r29
 1157 01b4 CC0F      		lsl r28
 1158 01b6 DD1F      		rol r29
 1159 01b8 CC0D      		add r28,r12
 1160 01ba DD1D      		adc r29,r13
 1161 01bc C050      		subi r28,lo8(-(matrizJugador1))
 1162 01be D040      		sbci r29,hi8(-(matrizJugador1))
 1163 01c0 2883      		st Y,r18
 1164 01c2 3983      		std Y+1,r19
 1165 01c4 4A83      		std Y+2,r20
 1166 01c6 00C0      		rjmp .L62
 1167               	.L65:
 1168               		.loc 1 392 0
 1169 01c8 2091 0000 		lds r18,Danado
 1170 01cc 3091 0000 		lds r19,Danado+1
 1171 01d0 4091 0000 		lds r20,Danado+2
 1172 01d4 D201      		movw r26,r4
 1173 01d6 2D93      		st X+,r18
 1174 01d8 3D93      		st X+,r19
 1175 01da 4C93      		st X,r20
 1176               	.L62:
 1177 01dc 3696      		adiw r30,6
 370:../src/main.c **** 	{
 1178               		.loc 1 370 0 discriminator 2
 1179 01de EE15      		cp r30,r14
 1180 01e0 FF05      		cpc r31,r15
 1181 01e2 01F0      		breq .+2
 1182 01e4 00C0      		rjmp .L66
 1183               	/* epilogue start */
 1184               	.LBE24:
 393:../src/main.c **** 		}
 394:../src/main.c **** 	}
 395:../src/main.c **** }
 1185               		.loc 1 395 0
 1186 01e6 DF91      		pop r29
 1187 01e8 CF91      		pop r28
 1188 01ea 1F91      		pop r17
 1189 01ec 0F91      		pop r16
 1190 01ee FF90      		pop r15
 1191 01f0 EF90      		pop r14
 1192 01f2 DF90      		pop r13
 1193 01f4 CF90      		pop r12
 1194 01f6 BF90      		pop r11
 1195 01f8 AF90      		pop r10
 1196 01fa 8F90      		pop r8
 1197 01fc 7F90      		pop r7
 1198 01fe 6F90      		pop r6
 1199 0200 5F90      		pop r5
 1200 0202 4F90      		pop r4
 1201 0204 0895      		ret
 1202               		.cfi_endproc
 1203               	.LFE84:
 1205               		.section	.text.shootPlayer1,"ax",@progbits
 1206               	.global	shootPlayer1
 1208               	shootPlayer1:
 1209               	.LFB80:
 324:../src/main.c **** 	matrizJugador1[x][y] = Agua;
 1210               		.loc 1 324 0
 1211               		.cfi_startproc
 1212               	.LVL43:
 1213 0000 CF93      		push r28
 1214               	.LCFI47:
 1215               		.cfi_def_cfa_offset 3
 1216               		.cfi_offset 28, -2
 1217 0002 DF93      		push r29
 1218               	.LCFI48:
 1219               		.cfi_def_cfa_offset 4
 1220               		.cfi_offset 29, -3
 1221               	/* prologue: function */
 1222               	/* frame size = 0 */
 1223               	/* stack size = 2 */
 1224               	.L__stack_usage = 2
 1225 0004 C82F      		mov r28,r24
 1226 0006 D62F      		mov r29,r22
 325:../src/main.c **** 	scanSubmarinos1(x, y);
 1227               		.loc 1 325 0
 1228 0008 E62F      		mov r30,r22
 1229 000a 062E      		mov __tmp_reg__,r22
 1230 000c 000C      		lsl r0
 1231 000e FF0B      		sbc r31,r31
 1232 0010 082E      		mov __tmp_reg__,r24
 1233 0012 000C      		lsl r0
 1234 0014 990B      		sbc r25,r25
 1235               	.LVL44:
 1236 0016 9F01      		movw r18,r30
 1237 0018 220F      		lsl r18
 1238 001a 331F      		rol r19
 1239 001c E20F      		add r30,r18
 1240 001e F31F      		adc r31,r19
 1241 0020 9C01      		movw r18,r24
 1242 0022 220F      		lsl r18
 1243 0024 331F      		rol r19
 1244 0026 820F      		add r24,r18
 1245 0028 931F      		adc r25,r19
 1246 002a 880F      		lsl r24
 1247 002c 991F      		rol r25
 1248 002e 880F      		lsl r24
 1249 0030 991F      		rol r25
 1250 0032 880F      		lsl r24
 1251 0034 991F      		rol r25
 1252 0036 E80F      		add r30,r24
 1253 0038 F91F      		adc r31,r25
 1254 003a E050      		subi r30,lo8(-(matrizJugador1))
 1255 003c F040      		sbci r31,hi8(-(matrizJugador1))
 1256 003e 8091 0000 		lds r24,Agua
 1257 0042 9091 0000 		lds r25,Agua+1
 1258 0046 A091 0000 		lds r26,Agua+2
 1259 004a 8083      		st Z,r24
 1260 004c 9183      		std Z+1,r25
 1261 004e A283      		std Z+2,r26
 326:../src/main.c **** 	scanCargueros1(x, y);
 1262               		.loc 1 326 0
 1263 0050 8C2F      		mov r24,r28
 1264 0052 0E94 0000 		call scanSubmarinos1
 1265               	.LVL45:
 327:../src/main.c **** }
 1266               		.loc 1 327 0
 1267 0056 6D2F      		mov r22,r29
 1268 0058 8C2F      		mov r24,r28
 1269 005a 0E94 0000 		call scanCargueros1
 1270               	.LVL46:
 1271               	/* epilogue start */
 328:../src/main.c **** 
 1272               		.loc 1 328 0
 1273 005e DF91      		pop r29
 1274               	.LVL47:
 1275 0060 CF91      		pop r28
 1276               	.LVL48:
 1277 0062 0895      		ret
 1278               		.cfi_endproc
 1279               	.LFE80:
 1281               		.section	.text.playPlayer2,"ax",@progbits
 1282               	.global	playPlayer2
 1284               	playPlayer2:
 1285               	.LFB74:
 194:../src/main.c **** 	// Actions to do only once per cycle
 1286               		.loc 1 194 0
 1287               		.cfi_startproc
 1288 0000 0F93      		push r16
 1289               	.LCFI49:
 1290               		.cfi_def_cfa_offset 3
 1291               		.cfi_offset 16, -2
 1292 0002 1F93      		push r17
 1293               	.LCFI50:
 1294               		.cfi_def_cfa_offset 4
 1295               		.cfi_offset 17, -3
 1296 0004 CF93      		push r28
 1297               	.LCFI51:
 1298               		.cfi_def_cfa_offset 5
 1299               		.cfi_offset 28, -4
 1300 0006 DF93      		push r29
 1301               	.LCFI52:
 1302               		.cfi_def_cfa_offset 6
 1303               		.cfi_offset 29, -5
 1304 0008 00D0      		rcall .
 1305               	.LCFI53:
 1306               		.cfi_def_cfa_offset 8
 1307 000a CDB7      		in r28,__SP_L__
 1308 000c DEB7      		in r29,__SP_H__
 1309               	.LCFI54:
 1310               		.cfi_def_cfa_register 28
 1311               	/* prologue: function */
 1312               	/* frame size = 2 */
 1313               	/* stack size = 6 */
 1314               	.L__stack_usage = 6
 196:../src/main.c **** 	
 1315               		.loc 1 196 0
 1316 000e 84E1      		ldi r24,lo8(20)
 1317 0010 90E0      		ldi r25,0
 1318 0012 9A83      		std Y+2,r25
 1319 0014 8983      		std Y+1,r24
 198:../src/main.c **** 	{
 1320               		.loc 1 198 0
 1321 0016 8091 0000 		lds r24,jButton
 1322 001a 8823      		tst r24
 1323 001c 01F4      		brne .+2
 1324 001e 00C0      		rjmp .L70
 204:../src/main.c **** 		}
 1325               		.loc 1 204 0
 1326 0020 04E1      		ldi r16,lo8(20)
 1327 0022 10E0      		ldi r17,0
 1328               	.L75:
 200:../src/main.c **** 		{
 1329               		.loc 1 200 0
 1330 0024 8981      		ldd r24,Y+1
 1331 0026 9A81      		ldd r25,Y+2
 1332 0028 892B      		or r24,r25
 1333 002a 01F4      		brne .L71
 202:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 1334               		.loc 1 202 0
 1335 002c 0E94 0000 		call copyArrayOf1
 1336               	.LVL49:
 203:../src/main.c **** 			gamePointerTilt = GAME_POINTER_SPEED;
 1337               		.loc 1 203 0
 1338 0030 E091 0000 		lds r30,yMovement
 1339 0034 F0E0      		ldi r31,0
 1340 0036 8091 0000 		lds r24,xMovement
 1341 003a 90E0      		ldi r25,0
 1342 003c 9F01      		movw r18,r30
 1343 003e 220F      		lsl r18
 1344 0040 331F      		rol r19
 1345 0042 E20F      		add r30,r18
 1346 0044 F31F      		adc r31,r19
 1347 0046 9C01      		movw r18,r24
 1348 0048 220F      		lsl r18
 1349 004a 331F      		rol r19
 1350 004c 820F      		add r24,r18
 1351 004e 931F      		adc r25,r19
 1352 0050 880F      		lsl r24
 1353 0052 991F      		rol r25
 1354 0054 880F      		lsl r24
 1355 0056 991F      		rol r25
 1356 0058 880F      		lsl r24
 1357 005a 991F      		rol r25
 1358 005c E80F      		add r30,r24
 1359 005e F91F      		adc r31,r25
 1360 0060 E050      		subi r30,lo8(-(display_rgb))
 1361 0062 F040      		sbci r31,hi8(-(display_rgb))
 1362 0064 8091 0000 		lds r24,GamePointer
 1363 0068 9091 0000 		lds r25,GamePointer+1
 1364 006c A091 0000 		lds r26,GamePointer+2
 1365 0070 8083      		st Z,r24
 1366 0072 9183      		std Z+1,r25
 1367 0074 A283      		std Z+2,r26
 204:../src/main.c **** 		}
 1368               		.loc 1 204 0
 1369 0076 1A83      		std Y+2,r17
 1370 0078 0983      		std Y+1,r16
 1371 007a 00C0      		rjmp .L72
 1372               	.L71:
 206:../src/main.c **** 		{
 1373               		.loc 1 206 0
 1374 007c 8981      		ldd r24,Y+1
 1375 007e 9A81      		ldd r25,Y+2
 1376 0080 0A97      		sbiw r24,10
 1377 0082 04F0      		brlt .L73
 208:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 1378               		.loc 1 208 0
 1379 0084 0E94 0000 		call copyArrayOf1
 1380               	.LVL50:
 209:../src/main.c **** 			gamePointerTilt--;
 1381               		.loc 1 209 0
 1382 0088 E091 0000 		lds r30,yMovement
 1383 008c F0E0      		ldi r31,0
 1384 008e 8091 0000 		lds r24,xMovement
 1385 0092 90E0      		ldi r25,0
 1386 0094 9F01      		movw r18,r30
 1387 0096 220F      		lsl r18
 1388 0098 331F      		rol r19
 1389 009a E20F      		add r30,r18
 1390 009c F31F      		adc r31,r19
 1391 009e 9C01      		movw r18,r24
 1392 00a0 220F      		lsl r18
 1393 00a2 331F      		rol r19
 1394 00a4 820F      		add r24,r18
 1395 00a6 931F      		adc r25,r19
 1396 00a8 880F      		lsl r24
 1397 00aa 991F      		rol r25
 1398 00ac 880F      		lsl r24
 1399 00ae 991F      		rol r25
 1400 00b0 880F      		lsl r24
 1401 00b2 991F      		rol r25
 1402 00b4 E80F      		add r30,r24
 1403 00b6 F91F      		adc r31,r25
 1404 00b8 E050      		subi r30,lo8(-(display_rgb))
 1405 00ba F040      		sbci r31,hi8(-(display_rgb))
 1406 00bc 8091 0000 		lds r24,GamePointer
 1407 00c0 9091 0000 		lds r25,GamePointer+1
 1408 00c4 A091 0000 		lds r26,GamePointer+2
 1409 00c8 8083      		st Z,r24
 1410 00ca 9183      		std Z+1,r25
 1411 00cc A283      		std Z+2,r26
 210:../src/main.c **** 		}
 1412               		.loc 1 210 0
 1413 00ce 8981      		ldd r24,Y+1
 1414 00d0 9A81      		ldd r25,Y+2
 1415 00d2 0197      		sbiw r24,1
 1416 00d4 9A83      		std Y+2,r25
 1417 00d6 8983      		std Y+1,r24
 1418 00d8 00C0      		rjmp .L72
 1419               	.L73:
 214:../src/main.c **** 			gamePointerTilt--;
 1420               		.loc 1 214 0
 1421 00da 0E94 0000 		call copyArrayOf1
 1422               	.LVL51:
 215:../src/main.c **** 		}
 1423               		.loc 1 215 0
 1424 00de 8981      		ldd r24,Y+1
 1425 00e0 9A81      		ldd r25,Y+2
 1426 00e2 0197      		sbiw r24,1
 1427 00e4 9A83      		std Y+2,r25
 1428 00e6 8983      		std Y+1,r24
 1429               	.L72:
 218:../src/main.c **** 		
 1430               		.loc 1 218 0
 1431 00e8 8091 0000 		lds r24,p2disp
 1432 00ec 9091 0000 		lds r25,p2disp+1
 1433 00f0 0E94 0000 		call wrt_ws2812
 1434               	.LVL52:
 1435               	.LBB25:
 1436               	.LBB26:
 1437               		.loc 2 187 0
 1438 00f4 2FEF      		ldi r18,lo8(63999)
 1439 00f6 89EF      		ldi r24,hi8(63999)
 1440 00f8 90E0      		ldi r25,hlo8(63999)
 1441 00fa 2150      	1:	subi r18,1
 1442 00fc 8040      		sbci r24,0
 1443 00fe 9040      		sbci r25,0
 1444 0100 01F4      		brne 1b
 1445 0102 00C0      		rjmp .
 1446 0104 0000      		nop
 1447               	.LBE26:
 1448               	.LBE25:
 198:../src/main.c **** 	{
 1449               		.loc 1 198 0
 1450 0106 8091 0000 		lds r24,jButton
 1451 010a 8111      		cpse r24,__zero_reg__
 1452 010c 00C0      		rjmp .L75
 1453               	.LVL53:
 1454               	.L70:
 223:../src/main.c **** 	
 1455               		.loc 1 223 0
 1456 010e 6091 0000 		lds r22,yMovement
 1457 0112 8091 0000 		lds r24,xMovement
 1458 0116 0E94 0000 		call shootPlayer1
 1459               	.LVL54:
 225:../src/main.c **** 	wrt_ws2812(p2disp);
 1460               		.loc 1 225 0
 1461 011a 0E94 0000 		call copyArrayOf1
 1462               	.LVL55:
 226:../src/main.c **** 	
 1463               		.loc 1 226 0
 1464 011e 8091 0000 		lds r24,p2disp
 1465 0122 9091 0000 		lds r25,p2disp+1
 1466 0126 0E94 0000 		call wrt_ws2812
 1467               	.LVL56:
 228:../src/main.c **** 	playerTurn = 1;
 1468               		.loc 1 228 0
 1469 012a 83E0      		ldi r24,lo8(3)
 1470 012c 0E94 0000 		call delaySeconds
 1471               	.LVL57:
 229:../src/main.c **** }
 1472               		.loc 1 229 0
 1473 0130 81E0      		ldi r24,lo8(1)
 1474 0132 8093 0000 		sts playerTurn,r24
 1475               	/* epilogue start */
 230:../src/main.c **** 
 1476               		.loc 1 230 0
 1477 0136 0F90      		pop __tmp_reg__
 1478 0138 0F90      		pop __tmp_reg__
 1479 013a DF91      		pop r29
 1480 013c CF91      		pop r28
 1481 013e 1F91      		pop r17
 1482 0140 0F91      		pop r16
 1483 0142 0895      		ret
 1484               		.cfi_endproc
 1485               	.LFE74:
 1487               		.section	.text.scanCargueros2,"ax",@progbits
 1488               	.global	scanCargueros2
 1490               	scanCargueros2:
 1491               	.LFB85:
 396:../src/main.c **** 
 397:../src/main.c **** /* Takes coordinates x, y from 0:7 as arguments and scans Cargueros of player2.
 398:../src/main.c **** Sets MatrizJugador2 corresponding to the existance of a ship on the coordinates.*/
 399:../src/main.c **** void scanCargueros2(int8_t x, int8_t y)
 400:../src/main.c **** {	
 1492               		.loc 1 400 0
 1493               		.cfi_startproc
 1494               	.LVL58:
 1495 0000 4F92      		push r4
 1496               	.LCFI55:
 1497               		.cfi_def_cfa_offset 3
 1498               		.cfi_offset 4, -2
 1499 0002 5F92      		push r5
 1500               	.LCFI56:
 1501               		.cfi_def_cfa_offset 4
 1502               		.cfi_offset 5, -3
 1503 0004 6F92      		push r6
 1504               	.LCFI57:
 1505               		.cfi_def_cfa_offset 5
 1506               		.cfi_offset 6, -4
 1507 0006 7F92      		push r7
 1508               	.LCFI58:
 1509               		.cfi_def_cfa_offset 6
 1510               		.cfi_offset 7, -5
 1511 0008 8F92      		push r8
 1512               	.LCFI59:
 1513               		.cfi_def_cfa_offset 7
 1514               		.cfi_offset 8, -6
 1515 000a AF92      		push r10
 1516               	.LCFI60:
 1517               		.cfi_def_cfa_offset 8
 1518               		.cfi_offset 10, -7
 1519 000c BF92      		push r11
 1520               	.LCFI61:
 1521               		.cfi_def_cfa_offset 9
 1522               		.cfi_offset 11, -8
 1523 000e CF92      		push r12
 1524               	.LCFI62:
 1525               		.cfi_def_cfa_offset 10
 1526               		.cfi_offset 12, -9
 1527 0010 DF92      		push r13
 1528               	.LCFI63:
 1529               		.cfi_def_cfa_offset 11
 1530               		.cfi_offset 13, -10
 1531 0012 EF92      		push r14
 1532               	.LCFI64:
 1533               		.cfi_def_cfa_offset 12
 1534               		.cfi_offset 14, -11
 1535 0014 FF92      		push r15
 1536               	.LCFI65:
 1537               		.cfi_def_cfa_offset 13
 1538               		.cfi_offset 15, -12
 1539 0016 0F93      		push r16
 1540               	.LCFI66:
 1541               		.cfi_def_cfa_offset 14
 1542               		.cfi_offset 16, -13
 1543 0018 1F93      		push r17
 1544               	.LCFI67:
 1545               		.cfi_def_cfa_offset 15
 1546               		.cfi_offset 17, -14
 1547 001a CF93      		push r28
 1548               	.LCFI68:
 1549               		.cfi_def_cfa_offset 16
 1550               		.cfi_offset 28, -15
 1551 001c DF93      		push r29
 1552               	.LCFI69:
 1553               		.cfi_def_cfa_offset 17
 1554               		.cfi_offset 29, -16
 1555               	/* prologue: function */
 1556               	/* frame size = 0 */
 1557               	/* stack size = 15 */
 1558               	.L__stack_usage = 15
 1559               	.LVL59:
 1560 001e E0E0      		ldi r30,lo8(carguerosJugador2)
 1561 0020 F0E0      		ldi r31,hi8(carguerosJugador2)
 1562 0022 0F2E      		mov __tmp_reg__,r31
 1563 0024 F0E0      		ldi r31,lo8(carguerosJugador2+12)
 1564 0026 EF2E      		mov r14,r31
 1565 0028 F0E0      		ldi r31,hi8(carguerosJugador2+12)
 1566 002a FF2E      		mov r15,r31
 1567 002c F02D      		mov r31,__tmp_reg__
 1568               	.LBB27:
 401:../src/main.c **** 	for(int i=0; i<=1; i++)
 402:../src/main.c **** 	{
 403:../src/main.c **** 		if ((carguerosJugador2[i].x0 == x) & (carguerosJugador2[i].y0 == y))
 1569               		.loc 1 403 0
 1570 002e 082E      		mov __tmp_reg__,r24
 1571 0030 000C      		lsl r0
 1572 0032 990B      		sbc r25,r25
 1573 0034 062E      		mov __tmp_reg__,r22
 1574 0036 000C      		lsl r0
 1575 0038 770B      		sbc r23,r23
 1576 003a BB24      		clr r11
 1577 003c B394      		inc r11
 1578 003e A12C      		mov r10,__zero_reg__
 404:../src/main.c **** 		{
 405:../src/main.c **** 			carguerosJugador2[i].boolDisparado0 = 1;
 406:../src/main.c **** 			if ((carguerosJugador2[i].boolDisparado0 == 1) & (carguerosJugador2[i].boolDisparado1 == 1))
 407:../src/main.c **** 			{
 408:../src/main.c **** 				matrizJugador2[carguerosJugador2[i].x0][carguerosJugador2[i].y0] = Hundido;
 409:../src/main.c **** 				matrizJugador2[carguerosJugador2[i].x1][carguerosJugador2[i].y1] = Hundido;
 410:../src/main.c **** 			}
 411:../src/main.c **** 			else
 412:../src/main.c **** 				matrizJugador2[x][y] = Danado;
 413:../src/main.c **** 		}
 414:../src/main.c **** 		else if ((carguerosJugador2[i].x1 == x) & (carguerosJugador2[i].y1 == y))
 415:../src/main.c **** 		{
 416:../src/main.c **** 			carguerosJugador2[i].boolDisparado1 = 1;
 417:../src/main.c **** 			if ((carguerosJugador2[i].boolDisparado0 == 1) & (carguerosJugador2[i].boolDisparado1 == 1))
 418:../src/main.c **** 			{
 419:../src/main.c **** 				matrizJugador2[carguerosJugador2[i].x0][carguerosJugador2[i].y0] = Hundido;
 420:../src/main.c **** 				matrizJugador2[carguerosJugador2[i].x1][carguerosJugador2[i].y1] = Hundido;
 421:../src/main.c **** 			}
 422:../src/main.c **** 			else
 423:../src/main.c **** 				matrizJugador2[x][y] = Danado;
 1579               		.loc 1 423 0
 1580 0040 9B01      		movw r18,r22
 1581 0042 220F      		lsl r18
 1582 0044 331F      		rol r19
 1583 0046 A901      		movw r20,r18
 1584 0048 460F      		add r20,r22
 1585 004a 571F      		adc r21,r23
 1586 004c 9C01      		movw r18,r24
 1587 004e 220F      		lsl r18
 1588 0050 331F      		rol r19
 1589 0052 280F      		add r18,r24
 1590 0054 391F      		adc r19,r25
 1591 0056 220F      		lsl r18
 1592 0058 331F      		rol r19
 1593 005a 220F      		lsl r18
 1594 005c 331F      		rol r19
 1595 005e 220F      		lsl r18
 1596 0060 331F      		rol r19
 1597 0062 240F      		add r18,r20
 1598 0064 351F      		adc r19,r21
 1599 0066 A901      		movw r20,r18
 1600 0068 4050      		subi r20,lo8(-(matrizJugador2))
 1601 006a 5040      		sbci r21,hi8(-(matrizJugador2))
 1602 006c 2A01      		movw r4,r20
 1603               	.LVL60:
 1604               	.L86:
 1605 006e EF01      		movw r28,r30
 403:../src/main.c **** 		{
 1606               		.loc 1 403 0
 1607 0070 2081      		ld r18,Z
 1608 0072 30E0      		ldi r19,0
 1609 0074 4181      		ldd r20,Z+1
 1610 0076 50E0      		ldi r21,0
 1611 0078 1B2D      		mov r17,r11
 1612 007a 2817      		cp r18,r24
 1613 007c 3907      		cpc r19,r25
 1614 007e 01F0      		breq .L79
 1615 0080 1A2D      		mov r17,r10
 1616               	.L79:
 1617 0082 1123      		tst r17
 1618 0084 01F4      		brne .+2
 1619 0086 00C0      		rjmp .L78
 1620 0088 1B2D      		mov r17,r11
 1621 008a 4617      		cp r20,r22
 1622 008c 5707      		cpc r21,r23
 1623 008e 01F0      		breq .L80
 1624 0090 1A2D      		mov r17,r10
 1625               	.L80:
 1626 0092 1123      		tst r17
 1627 0094 01F4      		brne .+2
 1628 0096 00C0      		rjmp .L78
 405:../src/main.c **** 			if ((carguerosJugador2[i].boolDisparado0 == 1) & (carguerosJugador2[i].boolDisparado1 == 1))
 1629               		.loc 1 405 0
 1630 0098 BA82      		std Y+2,r11
 406:../src/main.c **** 			{
 1631               		.loc 1 406 0
 1632 009a 1D81      		ldd r17,Y+5
 1633 009c 1130      		cpi r17,lo8(1)
 1634 009e 01F4      		brne .L81
 408:../src/main.c **** 				matrizJugador2[carguerosJugador2[i].x1][carguerosJugador2[i].y1] = Hundido;
 1635               		.loc 1 408 0
 1636 00a0 8A01      		movw r16,r20
 1637 00a2 000F      		lsl r16
 1638 00a4 111F      		rol r17
 1639 00a6 400F      		add r20,r16
 1640 00a8 511F      		adc r21,r17
 1641 00aa 8901      		movw r16,r18
 1642 00ac 000F      		lsl r16
 1643 00ae 111F      		rol r17
 1644 00b0 200F      		add r18,r16
 1645 00b2 311F      		adc r19,r17
 1646 00b4 220F      		lsl r18
 1647 00b6 331F      		rol r19
 1648 00b8 220F      		lsl r18
 1649 00ba 331F      		rol r19
 1650 00bc 220F      		lsl r18
 1651 00be 331F      		rol r19
 1652 00c0 420F      		add r20,r18
 1653 00c2 531F      		adc r21,r19
 1654 00c4 4050      		subi r20,lo8(-(matrizJugador2))
 1655 00c6 5040      		sbci r21,hi8(-(matrizJugador2))
 1656 00c8 6090 0000 		lds r6,Hundido
 1657 00cc 7090 0000 		lds r7,Hundido+1
 1658 00d0 8090 0000 		lds r8,Hundido+2
 1659 00d4 DA01      		movw r26,r20
 1660 00d6 6D92      		st X+,r6
 1661 00d8 7D92      		st X+,r7
 1662 00da 8C92      		st X,r8
 409:../src/main.c **** 			}
 1663               		.loc 1 409 0
 1664 00dc 4C81      		ldd r20,Y+4
 1665 00de 50E0      		ldi r21,0
 1666 00e0 2B81      		ldd r18,Y+3
 1667 00e2 30E0      		ldi r19,0
 1668 00e4 EA01      		movw r28,r20
 1669 00e6 CC0F      		lsl r28
 1670 00e8 DD1F      		rol r29
 1671 00ea 4C0F      		add r20,r28
 1672 00ec 5D1F      		adc r21,r29
 1673 00ee E901      		movw r28,r18
 1674 00f0 CC0F      		lsl r28
 1675 00f2 DD1F      		rol r29
 1676 00f4 C20F      		add r28,r18
 1677 00f6 D31F      		adc r29,r19
 1678 00f8 CC0F      		lsl r28
 1679 00fa DD1F      		rol r29
 1680 00fc CC0F      		lsl r28
 1681 00fe DD1F      		rol r29
 1682 0100 CC0F      		lsl r28
 1683 0102 DD1F      		rol r29
 1684 0104 4C0F      		add r20,r28
 1685 0106 5D1F      		adc r21,r29
 1686 0108 EA01      		movw r28,r20
 1687 010a C050      		subi r28,lo8(-(matrizJugador2))
 1688 010c D040      		sbci r29,hi8(-(matrizJugador2))
 1689 010e 6882      		st Y,r6
 1690 0110 7982      		std Y+1,r7
 1691 0112 8A82      		std Y+2,r8
 1692 0114 00C0      		rjmp .L82
 1693               	.L81:
 412:../src/main.c **** 		}
 1694               		.loc 1 412 0
 1695 0116 2091 0000 		lds r18,Danado
 1696 011a 3091 0000 		lds r19,Danado+1
 1697 011e 4091 0000 		lds r20,Danado+2
 1698 0122 D201      		movw r26,r4
 1699 0124 2D93      		st X+,r18
 1700 0126 3D93      		st X+,r19
 1701 0128 4C93      		st X,r20
 1702 012a 00C0      		rjmp .L82
 1703               	.L78:
 414:../src/main.c **** 		{
 1704               		.loc 1 414 0
 1705 012c 0B81      		ldd r16,Y+3
 1706 012e 10E0      		ldi r17,0
 1707 0130 CC80      		ldd r12,Y+4
 1708 0132 D12C      		mov r13,__zero_reg__
 1709 0134 8B2C      		mov r8,r11
 1710 0136 8017      		cp r24,r16
 1711 0138 9107      		cpc r25,r17
 1712 013a 01F0      		breq .L83
 1713 013c 8A2C      		mov r8,r10
 1714               	.L83:
 1715 013e 8820      		tst r8
 1716 0140 01F4      		brne .+2
 1717 0142 00C0      		rjmp .L82
 1718 0144 8B2C      		mov r8,r11
 1719 0146 6C15      		cp r22,r12
 1720 0148 7D05      		cpc r23,r13
 1721 014a 01F0      		breq .L84
 1722 014c 8A2C      		mov r8,r10
 1723               	.L84:
 1724 014e 8820      		tst r8
 1725 0150 01F4      		brne .+2
 1726 0152 00C0      		rjmp .L82
 416:../src/main.c **** 			if ((carguerosJugador2[i].boolDisparado0 == 1) & (carguerosJugador2[i].boolDisparado1 == 1))
 1727               		.loc 1 416 0
 1728 0154 BD82      		std Y+5,r11
 417:../src/main.c **** 			{
 1729               		.loc 1 417 0
 1730 0156 CA81      		ldd r28,Y+2
 1731 0158 C130      		cpi r28,lo8(1)
 1732 015a 01F4      		brne .L85
 419:../src/main.c **** 				matrizJugador2[carguerosJugador2[i].x1][carguerosJugador2[i].y1] = Hundido;
 1733               		.loc 1 419 0
 1734 015c EA01      		movw r28,r20
 1735 015e CC0F      		lsl r28
 1736 0160 DD1F      		rol r29
 1737 0162 4C0F      		add r20,r28
 1738 0164 5D1F      		adc r21,r29
 1739 0166 E901      		movw r28,r18
 1740 0168 CC0F      		lsl r28
 1741 016a DD1F      		rol r29
 1742 016c C20F      		add r28,r18
 1743 016e D31F      		adc r29,r19
 1744 0170 CC0F      		lsl r28
 1745 0172 DD1F      		rol r29
 1746 0174 CC0F      		lsl r28
 1747 0176 DD1F      		rol r29
 1748 0178 CC0F      		lsl r28
 1749 017a DD1F      		rol r29
 1750 017c 4C0F      		add r20,r28
 1751 017e 5D1F      		adc r21,r29
 1752 0180 EA01      		movw r28,r20
 1753 0182 C050      		subi r28,lo8(-(matrizJugador2))
 1754 0184 D040      		sbci r29,hi8(-(matrizJugador2))
 1755 0186 2091 0000 		lds r18,Hundido
 1756 018a 3091 0000 		lds r19,Hundido+1
 1757 018e 4091 0000 		lds r20,Hundido+2
 1758 0192 2883      		st Y,r18
 1759 0194 3983      		std Y+1,r19
 1760 0196 4A83      		std Y+2,r20
 420:../src/main.c **** 			}
 1761               		.loc 1 420 0
 1762 0198 E601      		movw r28,r12
 1763 019a CC0F      		lsl r28
 1764 019c DD1F      		rol r29
 1765 019e CC0E      		add r12,r28
 1766 01a0 DD1E      		adc r13,r29
 1767 01a2 E801      		movw r28,r16
 1768 01a4 CC0F      		lsl r28
 1769 01a6 DD1F      		rol r29
 1770 01a8 C00F      		add r28,r16
 1771 01aa D11F      		adc r29,r17
 1772 01ac CC0F      		lsl r28
 1773 01ae DD1F      		rol r29
 1774 01b0 CC0F      		lsl r28
 1775 01b2 DD1F      		rol r29
 1776 01b4 CC0F      		lsl r28
 1777 01b6 DD1F      		rol r29
 1778 01b8 CC0D      		add r28,r12
 1779 01ba DD1D      		adc r29,r13
 1780 01bc C050      		subi r28,lo8(-(matrizJugador2))
 1781 01be D040      		sbci r29,hi8(-(matrizJugador2))
 1782 01c0 2883      		st Y,r18
 1783 01c2 3983      		std Y+1,r19
 1784 01c4 4A83      		std Y+2,r20
 1785 01c6 00C0      		rjmp .L82
 1786               	.L85:
 1787               		.loc 1 423 0
 1788 01c8 2091 0000 		lds r18,Danado
 1789 01cc 3091 0000 		lds r19,Danado+1
 1790 01d0 4091 0000 		lds r20,Danado+2
 1791 01d4 D201      		movw r26,r4
 1792 01d6 2D93      		st X+,r18
 1793 01d8 3D93      		st X+,r19
 1794 01da 4C93      		st X,r20
 1795               	.L82:
 1796 01dc 3696      		adiw r30,6
 401:../src/main.c **** 	{
 1797               		.loc 1 401 0 discriminator 2
 1798 01de EE15      		cp r30,r14
 1799 01e0 FF05      		cpc r31,r15
 1800 01e2 01F0      		breq .+2
 1801 01e4 00C0      		rjmp .L86
 1802               	/* epilogue start */
 1803               	.LBE27:
 424:../src/main.c **** 		}
 425:../src/main.c **** 	}
 426:../src/main.c **** }
 1804               		.loc 1 426 0
 1805 01e6 DF91      		pop r29
 1806 01e8 CF91      		pop r28
 1807 01ea 1F91      		pop r17
 1808 01ec 0F91      		pop r16
 1809 01ee FF90      		pop r15
 1810 01f0 EF90      		pop r14
 1811 01f2 DF90      		pop r13
 1812 01f4 CF90      		pop r12
 1813 01f6 BF90      		pop r11
 1814 01f8 AF90      		pop r10
 1815 01fa 8F90      		pop r8
 1816 01fc 7F90      		pop r7
 1817 01fe 6F90      		pop r6
 1818 0200 5F90      		pop r5
 1819 0202 4F90      		pop r4
 1820 0204 0895      		ret
 1821               		.cfi_endproc
 1822               	.LFE85:
 1824               		.section	.text.shootPlayer2,"ax",@progbits
 1825               	.global	shootPlayer2
 1827               	shootPlayer2:
 1828               	.LFB81:
 332:../src/main.c **** 	matrizJugador2[x][y] = Agua;
 1829               		.loc 1 332 0
 1830               		.cfi_startproc
 1831               	.LVL61:
 1832 0000 CF93      		push r28
 1833               	.LCFI70:
 1834               		.cfi_def_cfa_offset 3
 1835               		.cfi_offset 28, -2
 1836 0002 DF93      		push r29
 1837               	.LCFI71:
 1838               		.cfi_def_cfa_offset 4
 1839               		.cfi_offset 29, -3
 1840               	/* prologue: function */
 1841               	/* frame size = 0 */
 1842               	/* stack size = 2 */
 1843               	.L__stack_usage = 2
 1844 0004 C82F      		mov r28,r24
 1845 0006 D62F      		mov r29,r22
 333:../src/main.c **** 	scanSubmarinos2(x, y);
 1846               		.loc 1 333 0
 1847 0008 E62F      		mov r30,r22
 1848 000a 062E      		mov __tmp_reg__,r22
 1849 000c 000C      		lsl r0
 1850 000e FF0B      		sbc r31,r31
 1851 0010 082E      		mov __tmp_reg__,r24
 1852 0012 000C      		lsl r0
 1853 0014 990B      		sbc r25,r25
 1854               	.LVL62:
 1855 0016 9F01      		movw r18,r30
 1856 0018 220F      		lsl r18
 1857 001a 331F      		rol r19
 1858 001c E20F      		add r30,r18
 1859 001e F31F      		adc r31,r19
 1860 0020 9C01      		movw r18,r24
 1861 0022 220F      		lsl r18
 1862 0024 331F      		rol r19
 1863 0026 820F      		add r24,r18
 1864 0028 931F      		adc r25,r19
 1865 002a 880F      		lsl r24
 1866 002c 991F      		rol r25
 1867 002e 880F      		lsl r24
 1868 0030 991F      		rol r25
 1869 0032 880F      		lsl r24
 1870 0034 991F      		rol r25
 1871 0036 E80F      		add r30,r24
 1872 0038 F91F      		adc r31,r25
 1873 003a E050      		subi r30,lo8(-(matrizJugador2))
 1874 003c F040      		sbci r31,hi8(-(matrizJugador2))
 1875 003e 8091 0000 		lds r24,Agua
 1876 0042 9091 0000 		lds r25,Agua+1
 1877 0046 A091 0000 		lds r26,Agua+2
 1878 004a 8083      		st Z,r24
 1879 004c 9183      		std Z+1,r25
 1880 004e A283      		std Z+2,r26
 334:../src/main.c **** 	scanCargueros2(x, y);
 1881               		.loc 1 334 0
 1882 0050 8C2F      		mov r24,r28
 1883 0052 0E94 0000 		call scanSubmarinos2
 1884               	.LVL63:
 335:../src/main.c **** }
 1885               		.loc 1 335 0
 1886 0056 6D2F      		mov r22,r29
 1887 0058 8C2F      		mov r24,r28
 1888 005a 0E94 0000 		call scanCargueros2
 1889               	.LVL64:
 1890               	/* epilogue start */
 336:../src/main.c **** 
 1891               		.loc 1 336 0
 1892 005e DF91      		pop r29
 1893               	.LVL65:
 1894 0060 CF91      		pop r28
 1895               	.LVL66:
 1896 0062 0895      		ret
 1897               		.cfi_endproc
 1898               	.LFE81:
 1900               		.section	.text.playPlayer1,"ax",@progbits
 1901               	.global	playPlayer1
 1903               	playPlayer1:
 1904               	.LFB73:
 154:../src/main.c **** 	// Actions to do only once per cycle
 1905               		.loc 1 154 0
 1906               		.cfi_startproc
 1907 0000 0F93      		push r16
 1908               	.LCFI72:
 1909               		.cfi_def_cfa_offset 3
 1910               		.cfi_offset 16, -2
 1911 0002 1F93      		push r17
 1912               	.LCFI73:
 1913               		.cfi_def_cfa_offset 4
 1914               		.cfi_offset 17, -3
 1915 0004 CF93      		push r28
 1916               	.LCFI74:
 1917               		.cfi_def_cfa_offset 5
 1918               		.cfi_offset 28, -4
 1919 0006 DF93      		push r29
 1920               	.LCFI75:
 1921               		.cfi_def_cfa_offset 6
 1922               		.cfi_offset 29, -5
 1923 0008 00D0      		rcall .
 1924               	.LCFI76:
 1925               		.cfi_def_cfa_offset 8
 1926 000a CDB7      		in r28,__SP_L__
 1927 000c DEB7      		in r29,__SP_H__
 1928               	.LCFI77:
 1929               		.cfi_def_cfa_register 28
 1930               	/* prologue: function */
 1931               	/* frame size = 2 */
 1932               	/* stack size = 6 */
 1933               	.L__stack_usage = 6
 156:../src/main.c **** 	
 1934               		.loc 1 156 0
 1935 000e 84E1      		ldi r24,lo8(20)
 1936 0010 90E0      		ldi r25,0
 1937 0012 9A83      		std Y+2,r25
 1938 0014 8983      		std Y+1,r24
 158:../src/main.c **** 	{
 1939               		.loc 1 158 0
 1940 0016 8091 0000 		lds r24,jButton
 1941 001a 8823      		tst r24
 1942 001c 01F4      		brne .+2
 1943 001e 00C0      		rjmp .L90
 164:../src/main.c **** 		}
 1944               		.loc 1 164 0
 1945 0020 04E1      		ldi r16,lo8(20)
 1946 0022 10E0      		ldi r17,0
 1947               	.L95:
 160:../src/main.c **** 		{
 1948               		.loc 1 160 0
 1949 0024 8981      		ldd r24,Y+1
 1950 0026 9A81      		ldd r25,Y+2
 1951 0028 892B      		or r24,r25
 1952 002a 01F4      		brne .L91
 162:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 1953               		.loc 1 162 0
 1954 002c 0E94 0000 		call copyArrayOf2
 1955               	.LVL67:
 163:../src/main.c **** 			gamePointerTilt = GAME_POINTER_SPEED;
 1956               		.loc 1 163 0
 1957 0030 E091 0000 		lds r30,yMovement
 1958 0034 F0E0      		ldi r31,0
 1959 0036 8091 0000 		lds r24,xMovement
 1960 003a 90E0      		ldi r25,0
 1961 003c 9F01      		movw r18,r30
 1962 003e 220F      		lsl r18
 1963 0040 331F      		rol r19
 1964 0042 E20F      		add r30,r18
 1965 0044 F31F      		adc r31,r19
 1966 0046 9C01      		movw r18,r24
 1967 0048 220F      		lsl r18
 1968 004a 331F      		rol r19
 1969 004c 820F      		add r24,r18
 1970 004e 931F      		adc r25,r19
 1971 0050 880F      		lsl r24
 1972 0052 991F      		rol r25
 1973 0054 880F      		lsl r24
 1974 0056 991F      		rol r25
 1975 0058 880F      		lsl r24
 1976 005a 991F      		rol r25
 1977 005c E80F      		add r30,r24
 1978 005e F91F      		adc r31,r25
 1979 0060 E050      		subi r30,lo8(-(display_rgb))
 1980 0062 F040      		sbci r31,hi8(-(display_rgb))
 1981 0064 8091 0000 		lds r24,GamePointer
 1982 0068 9091 0000 		lds r25,GamePointer+1
 1983 006c A091 0000 		lds r26,GamePointer+2
 1984 0070 8083      		st Z,r24
 1985 0072 9183      		std Z+1,r25
 1986 0074 A283      		std Z+2,r26
 164:../src/main.c **** 		}
 1987               		.loc 1 164 0
 1988 0076 1A83      		std Y+2,r17
 1989 0078 0983      		std Y+1,r16
 1990 007a 00C0      		rjmp .L92
 1991               	.L91:
 166:../src/main.c **** 		{
 1992               		.loc 1 166 0
 1993 007c 8981      		ldd r24,Y+1
 1994 007e 9A81      		ldd r25,Y+2
 1995 0080 0A97      		sbiw r24,10
 1996 0082 04F0      		brlt .L93
 168:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 1997               		.loc 1 168 0
 1998 0084 0E94 0000 		call copyArrayOf2
 1999               	.LVL68:
 169:../src/main.c **** 			gamePointerTilt--;
 2000               		.loc 1 169 0
 2001 0088 E091 0000 		lds r30,yMovement
 2002 008c F0E0      		ldi r31,0
 2003 008e 8091 0000 		lds r24,xMovement
 2004 0092 90E0      		ldi r25,0
 2005 0094 9F01      		movw r18,r30
 2006 0096 220F      		lsl r18
 2007 0098 331F      		rol r19
 2008 009a E20F      		add r30,r18
 2009 009c F31F      		adc r31,r19
 2010 009e 9C01      		movw r18,r24
 2011 00a0 220F      		lsl r18
 2012 00a2 331F      		rol r19
 2013 00a4 820F      		add r24,r18
 2014 00a6 931F      		adc r25,r19
 2015 00a8 880F      		lsl r24
 2016 00aa 991F      		rol r25
 2017 00ac 880F      		lsl r24
 2018 00ae 991F      		rol r25
 2019 00b0 880F      		lsl r24
 2020 00b2 991F      		rol r25
 2021 00b4 E80F      		add r30,r24
 2022 00b6 F91F      		adc r31,r25
 2023 00b8 E050      		subi r30,lo8(-(display_rgb))
 2024 00ba F040      		sbci r31,hi8(-(display_rgb))
 2025 00bc 8091 0000 		lds r24,GamePointer
 2026 00c0 9091 0000 		lds r25,GamePointer+1
 2027 00c4 A091 0000 		lds r26,GamePointer+2
 2028 00c8 8083      		st Z,r24
 2029 00ca 9183      		std Z+1,r25
 2030 00cc A283      		std Z+2,r26
 170:../src/main.c **** 		}
 2031               		.loc 1 170 0
 2032 00ce 8981      		ldd r24,Y+1
 2033 00d0 9A81      		ldd r25,Y+2
 2034 00d2 0197      		sbiw r24,1
 2035 00d4 9A83      		std Y+2,r25
 2036 00d6 8983      		std Y+1,r24
 2037 00d8 00C0      		rjmp .L92
 2038               	.L93:
 174:../src/main.c **** 			gamePointerTilt--;
 2039               		.loc 1 174 0
 2040 00da 0E94 0000 		call copyArrayOf2
 2041               	.LVL69:
 175:../src/main.c **** 		}
 2042               		.loc 1 175 0
 2043 00de 8981      		ldd r24,Y+1
 2044 00e0 9A81      		ldd r25,Y+2
 2045 00e2 0197      		sbiw r24,1
 2046 00e4 9A83      		std Y+2,r25
 2047 00e6 8983      		std Y+1,r24
 2048               	.L92:
 178:../src/main.c **** 		
 2049               		.loc 1 178 0
 2050 00e8 8091 0000 		lds r24,p2disp
 2051 00ec 9091 0000 		lds r25,p2disp+1
 2052 00f0 0E94 0000 		call wrt_ws2812
 2053               	.LVL70:
 2054               	.LBB28:
 2055               	.LBB29:
 2056               		.loc 2 187 0
 2057 00f4 2FEF      		ldi r18,lo8(63999)
 2058 00f6 89EF      		ldi r24,hi8(63999)
 2059 00f8 90E0      		ldi r25,hlo8(63999)
 2060 00fa 2150      	1:	subi r18,1
 2061 00fc 8040      		sbci r24,0
 2062 00fe 9040      		sbci r25,0
 2063 0100 01F4      		brne 1b
 2064 0102 00C0      		rjmp .
 2065 0104 0000      		nop
 2066               	.LBE29:
 2067               	.LBE28:
 158:../src/main.c **** 	{
 2068               		.loc 1 158 0
 2069 0106 8091 0000 		lds r24,jButton
 2070 010a 8111      		cpse r24,__zero_reg__
 2071 010c 00C0      		rjmp .L95
 2072               	.LVL71:
 2073               	.L90:
 183:../src/main.c **** 	
 2074               		.loc 1 183 0
 2075 010e 6091 0000 		lds r22,yMovement
 2076 0112 8091 0000 		lds r24,xMovement
 2077 0116 0E94 0000 		call shootPlayer2
 2078               	.LVL72:
 185:../src/main.c **** 	wrt_ws2812(p2disp);
 2079               		.loc 1 185 0
 2080 011a 0E94 0000 		call copyArrayOf2
 2081               	.LVL73:
 186:../src/main.c **** 	
 2082               		.loc 1 186 0
 2083 011e 8091 0000 		lds r24,p2disp
 2084 0122 9091 0000 		lds r25,p2disp+1
 2085 0126 0E94 0000 		call wrt_ws2812
 2086               	.LVL74:
 188:../src/main.c **** 	playerTurn = 2;
 2087               		.loc 1 188 0
 2088 012a 83E0      		ldi r24,lo8(3)
 2089 012c 0E94 0000 		call delaySeconds
 2090               	.LVL75:
 189:../src/main.c **** }
 2091               		.loc 1 189 0
 2092 0130 82E0      		ldi r24,lo8(2)
 2093 0132 8093 0000 		sts playerTurn,r24
 2094               	/* epilogue start */
 190:../src/main.c **** 
 2095               		.loc 1 190 0
 2096 0136 0F90      		pop __tmp_reg__
 2097 0138 0F90      		pop __tmp_reg__
 2098 013a DF91      		pop r29
 2099 013c CF91      		pop r28
 2100 013e 1F91      		pop r17
 2101 0140 0F91      		pop r16
 2102 0142 0895      		ret
 2103               		.cfi_endproc
 2104               	.LFE73:
 2106               		.section	.text.gameOn,"ax",@progbits
 2107               	.global	gameOn
 2109               	gameOn:
 2110               	.LFB72:
 130:../src/main.c **** 	while ((playerTurn == 1) | (playerTurn == 2))
 2111               		.loc 1 130 0
 2112               		.cfi_startproc
 2113               	/* prologue: function */
 2114               	/* frame size = 0 */
 2115               	/* stack size = 0 */
 2116               	.L__stack_usage = 0
 137:../src/main.c **** 		
 2117               		.loc 1 137 0
 2118 0000 D3E0      		ldi r29,lo8(3)
 143:../src/main.c **** 	}
 2119               		.loc 1 143 0
 2120 0002 C4E0      		ldi r28,lo8(4)
 131:../src/main.c **** 	{
 2121               		.loc 1 131 0
 2122 0004 00C0      		rjmp .L103
 2123               	.L107:
 134:../src/main.c **** 	
 2124               		.loc 1 134 0
 2125 0006 0E94 0000 		call playPlayer1
 2126               	.LVL76:
 133:../src/main.c **** 			playPlayer1();
 2127               		.loc 1 133 0
 2128 000a 8091 0000 		lds r24,playerTurn
 2129 000e 8130      		cpi r24,lo8(1)
 2130 0010 01F0      		breq .L107
 2131               	.L105:
 136:../src/main.c **** 			playerTurn = WINPLAYER1;
 2132               		.loc 1 136 0
 2133 0012 0E94 0000 		call checkPlayer1Win
 2134               	.LVL77:
 2135 0016 8130      		cpi r24,lo8(1)
 2136 0018 01F4      		brne .L100
 137:../src/main.c **** 		
 2137               		.loc 1 137 0
 2138 001a D093 0000 		sts playerTurn,r29
 2139 001e 00C0      		rjmp .L101
 2140               	.L100:
 139:../src/main.c **** 			playPlayer2();
 2141               		.loc 1 139 0
 2142 0020 8091 0000 		lds r24,playerTurn
 2143 0024 8230      		cpi r24,lo8(2)
 2144 0026 01F4      		brne .L101
 2145               	.L106:
 140:../src/main.c **** 		
 2146               		.loc 1 140 0
 2147 0028 0E94 0000 		call playPlayer2
 2148               	.LVL78:
 139:../src/main.c **** 			playPlayer2();
 2149               		.loc 1 139 0
 2150 002c 8091 0000 		lds r24,playerTurn
 2151 0030 8230      		cpi r24,lo8(2)
 2152 0032 01F0      		breq .L106
 2153               	.L101:
 142:../src/main.c **** 			playerTurn = WINPLAYER2;
 2154               		.loc 1 142 0
 2155 0034 0E94 0000 		call checkPlayer2Win
 2156               	.LVL79:
 2157 0038 8130      		cpi r24,lo8(1)
 2158 003a 01F4      		brne .L103
 143:../src/main.c **** 	}
 2159               		.loc 1 143 0
 2160 003c C093 0000 		sts playerTurn,r28
 2161               	.L103:
 131:../src/main.c **** 	{
 2162               		.loc 1 131 0
 2163 0040 8091 0000 		lds r24,playerTurn
 2164 0044 9FEF      		ldi r25,lo8(-1)
 2165 0046 980F      		add r25,r24
 2166 0048 9230      		cpi r25,lo8(2)
 2167 004a 00F4      		brsh .L104
 133:../src/main.c **** 			playPlayer1();
 2168               		.loc 1 133 0
 2169 004c 8130      		cpi r24,lo8(1)
 2170 004e 01F0      		breq .L107
 2171 0050 00C0      		rjmp .L105
 2172               	.L104:
 2173               	.L111:
 2174 0052 00C0      		rjmp .L111
 2175               		.cfi_endproc
 2176               	.LFE72:
 2178               		.section	.text.main,"ax",@progbits
 2179               	.global	main
 2181               	main:
 2182               	.LFB71:
 106:../src/main.c **** 	init_ws2812();		// Initialize RGB Display driver
 2183               		.loc 1 106 0
 2184               		.cfi_startproc
 2185               	/* prologue: function */
 2186               	/* frame size = 0 */
 2187               	/* stack size = 0 */
 2188               	.L__stack_usage = 0
 107:../src/main.c **** 	init_RTI();			// Initialize Periodic Real Time Interrupt(Timer)
 2189               		.loc 1 107 0
 2190 0000 0E94 0000 		call init_ws2812
 2191               	.LVL80:
 108:../src/main.c **** 	UART_Init();		// Initialize serial port driver (UART)
 2192               		.loc 1 108 0
 2193 0004 0E94 0000 		call init_RTI
 2194               	.LVL81:
 109:../src/main.c **** 	adc_init();			// Initialize Analog to digital converter (Joystick)
 2195               		.loc 1 109 0
 2196 0008 0E94 0000 		call UART_Init
 2197               	.LVL82:
 110:../src/main.c **** 	wrt_Digit_Init();	// Initialize the Seven Segments Display
 2198               		.loc 1 110 0
 2199 000c 0E94 0000 		call adc_init
 2200               	.LVL83:
 111:../src/main.c **** 	playerTurn = 1;		// Sets the value of the first player
 2201               		.loc 1 111 0
 2202 0010 0E94 0000 		call wrt_Digit_Init
 2203               	.LVL84:
 112:../src/main.c **** 		
 2204               		.loc 1 112 0
 2205 0014 81E0      		ldi r24,lo8(1)
 2206 0016 8093 0000 		sts playerTurn,r24
 114:../src/main.c **** 	
 2207               		.loc 1 114 0
 2208 001a 80E0      		ldi r24,lo8(display_rgb)
 2209 001c 90E0      		ldi r25,hi8(display_rgb)
 2210 001e 9093 0000 		sts p2disp+1,r25
 2211 0022 8093 0000 		sts p2disp,r24
 2212               	.LVL85:
 2213 0026 E0E0      		ldi r30,lo8(matrizJugador1)
 2214 0028 F0E0      		ldi r31,hi8(matrizJugador1)
 2215 002a 40E0      		ldi r20,lo8(matrizJugador1+192)
 2216 002c 50E0      		ldi r21,hi8(matrizJugador1+192)
 2217 002e 00C0      		rjmp .L113
 2218               	.LVL86:
 2219               	.L114:
 2220               	.LBB30:
 2221               	.LBB31:
 118:../src/main.c **** 
 2222               		.loc 1 118 0 discriminator 3
 2223 0030 8091 0000 		lds r24,Apagado
 2224 0034 9091 0000 		lds r25,Apagado+1
 2225 0038 A091 0000 		lds r26,Apagado+2
 2226 003c 8193      		st Z+,r24
 2227 003e 9193      		st Z+,r25
 2228 0040 A193      		st Z+,r26
 2229               	.LVL87:
 117:../src/main.c **** 			matrizJugador1[i][j] = Apagado;
 2230               		.loc 1 117 0 discriminator 3
 2231 0042 E217      		cp r30,r18
 2232 0044 F307      		cpc r31,r19
 2233 0046 01F4      		brne .L114
 2234 0048 F901      		movw r30,r18
 2235               	.LBE31:
 116:../src/main.c **** 		for (int j=0; j<=7; j++)
 2236               		.loc 1 116 0 discriminator 2
 2237 004a 4217      		cp r20,r18
 2238 004c 5307      		cpc r21,r19
 2239 004e 01F4      		brne .L113
 2240 0050 E0E0      		ldi r30,lo8(matrizJugador2)
 2241 0052 F0E0      		ldi r31,hi8(matrizJugador2)
 2242 0054 40E0      		ldi r20,lo8(matrizJugador2+192)
 2243 0056 50E0      		ldi r21,hi8(matrizJugador2+192)
 2244 0058 00C0      		rjmp .L115
 2245               	.L113:
 2246               	.LVL88:
 2247 005a 9F01      		movw r18,r30
 2248 005c 285E      		subi r18,-24
 2249 005e 3F4F      		sbci r19,-1
 2250 0060 00C0      		rjmp .L114
 2251               	.LVL89:
 2252               	.L116:
 2253               	.LBE30:
 2254               	.LBB32:
 2255               	.LBB33:
 122:../src/main.c **** 			
 2256               		.loc 1 122 0 discriminator 3
 2257 0062 8091 0000 		lds r24,Apagado
 2258 0066 9091 0000 		lds r25,Apagado+1
 2259 006a A091 0000 		lds r26,Apagado+2
 2260 006e 8193      		st Z+,r24
 2261 0070 9193      		st Z+,r25
 2262 0072 A193      		st Z+,r26
 2263               	.LVL90:
 121:../src/main.c **** 			matrizJugador2[i][j] = Apagado;
 2264               		.loc 1 121 0 discriminator 3
 2265 0074 E217      		cp r30,r18
 2266 0076 F307      		cpc r31,r19
 2267 0078 01F4      		brne .L116
 2268               	.LVL91:
 2269 007a F901      		movw r30,r18
 2270               	.LBE33:
 120:../src/main.c **** 		for (int j=0; j<=7; j++)
 2271               		.loc 1 120 0 discriminator 2
 2272 007c 4217      		cp r20,r18
 2273 007e 5307      		cpc r21,r19
 2274 0080 01F0      		breq .L117
 2275               	.L115:
 2276               	.LVL92:
 2277 0082 9F01      		movw r18,r30
 2278 0084 285E      		subi r18,-24
 2279 0086 3F4F      		sbci r19,-1
 2280 0088 00C0      		rjmp .L116
 2281               	.LVL93:
 2282               	.L117:
 2283               	.LBE32:
 124:../src/main.c **** 	
 2284               		.loc 1 124 0
 2285               	/* #APP */
 2286               	 ;  124 "../src/main.c" 1
 2287 008a 7894      		sei
 2288               	 ;  0 "" 2
 126:../src/main.c **** }
 2289               		.loc 1 126 0
 2290               	/* #NOAPP */
 2291 008c 0E94 0000 		call gameOn
 2292               	.LVL94:
 2293               		.cfi_endproc
 2294               	.LFE71:
 2296               		.section	.text.clear_disp,"ax",@progbits
 2297               	.global	clear_disp
 2299               	clear_disp:
 2300               	.LFB86:
 427:../src/main.c **** 
 428:../src/main.c **** void clear_disp(void)
 429:../src/main.c **** {
 2301               		.loc 1 429 0
 2302               		.cfi_startproc
 2303               	/* prologue: function */
 2304               	/* frame size = 0 */
 2305               	/* stack size = 0 */
 2306               	.L__stack_usage = 0
 2307               	.LVL95:
 2308 0000 E0E0      		ldi r30,lo8(display_rgb)
 2309 0002 F0E0      		ldi r31,hi8(display_rgb)
 2310 0004 40E0      		ldi r20,lo8(display_rgb+192)
 2311 0006 50E0      		ldi r21,hi8(display_rgb+192)
 2312 0008 00C0      		rjmp .L122
 2313               	.LVL96:
 2314               	.L123:
 2315               	.LBB34:
 2316               	.LBB35:
 430:../src/main.c **** 	for(int r=0;r<=7;r++)
 431:../src/main.c **** 		for(int c=0;c<=7;c++)
 432:../src/main.c **** 			display_rgb[r][c] = Apagado;
 2317               		.loc 1 432 0 discriminator 3
 2318 000a 8091 0000 		lds r24,Apagado
 2319 000e 9091 0000 		lds r25,Apagado+1
 2320 0012 A091 0000 		lds r26,Apagado+2
 2321 0016 8193      		st Z+,r24
 2322 0018 9193      		st Z+,r25
 2323 001a A193      		st Z+,r26
 2324               	.LVL97:
 431:../src/main.c **** 			display_rgb[r][c] = Apagado;
 2325               		.loc 1 431 0 discriminator 3
 2326 001c E217      		cp r30,r18
 2327 001e F307      		cpc r31,r19
 2328 0020 01F4      		brne .L123
 2329 0022 F901      		movw r30,r18
 2330               	.LBE35:
 430:../src/main.c **** 	for(int r=0;r<=7;r++)
 2331               		.loc 1 430 0 discriminator 2
 2332 0024 4217      		cp r20,r18
 2333 0026 5307      		cpc r21,r19
 2334 0028 01F0      		breq .L121
 2335               	.L122:
 2336               	.LVL98:
 2337 002a 9F01      		movw r18,r30
 2338 002c 285E      		subi r18,-24
 2339 002e 3F4F      		sbci r19,-1
 2340 0030 00C0      		rjmp .L123
 2341               	.LVL99:
 2342               	.L121:
 2343 0032 0895      		ret
 2344               	.LBE34:
 2345               		.cfi_endproc
 2346               	.LFE86:
 2348               		.section	.text.softdelay,"ax",@progbits
 2349               	.global	softdelay
 2351               	softdelay:
 2352               	.LFB87:
 433:../src/main.c **** 				
 434:../src/main.c **** }
 435:../src/main.c **** 
 436:../src/main.c **** void softdelay(void)
 437:../src/main.c **** {
 2353               		.loc 1 437 0
 2354               		.cfi_startproc
 2355 0000 CF93      		push r28
 2356               	.LCFI78:
 2357               		.cfi_def_cfa_offset 3
 2358               		.cfi_offset 28, -2
 2359 0002 DF93      		push r29
 2360               	.LCFI79:
 2361               		.cfi_def_cfa_offset 4
 2362               		.cfi_offset 29, -3
 2363 0004 00D0      		rcall .
 2364 0006 00D0      		rcall .
 2365               	.LCFI80:
 2366               		.cfi_def_cfa_offset 8
 2367 0008 CDB7      		in r28,__SP_L__
 2368 000a DEB7      		in r29,__SP_H__
 2369               	.LCFI81:
 2370               		.cfi_def_cfa_register 28
 2371               	/* prologue: function */
 2372               	/* frame size = 4 */
 2373               	/* stack size = 6 */
 2374               	.L__stack_usage = 6
 438:../src/main.c **** 	volatile long int d;
 439:../src/main.c **** 	
 440:../src/main.c **** 	for (d=400000;d;d--)
 2375               		.loc 1 440 0
 2376 000c 80E8      		ldi r24,lo8(-128)
 2377 000e 9AE1      		ldi r25,lo8(26)
 2378 0010 A6E0      		ldi r26,lo8(6)
 2379 0012 B0E0      		ldi r27,0
 2380 0014 8983      		std Y+1,r24
 2381 0016 9A83      		std Y+2,r25
 2382 0018 AB83      		std Y+3,r26
 2383 001a BC83      		std Y+4,r27
 2384 001c 8981      		ldd r24,Y+1
 2385 001e 9A81      		ldd r25,Y+2
 2386 0020 AB81      		ldd r26,Y+3
 2387 0022 BC81      		ldd r27,Y+4
 2388 0024 892B      		or r24,r25
 2389 0026 8A2B      		or r24,r26
 2390 0028 8B2B      		or r24,r27
 2391 002a 01F0      		breq .L126
 2392               	.L129:
 2393               		.loc 1 440 0 is_stmt 0 discriminator 3
 2394 002c 8981      		ldd r24,Y+1
 2395 002e 9A81      		ldd r25,Y+2
 2396 0030 AB81      		ldd r26,Y+3
 2397 0032 BC81      		ldd r27,Y+4
 2398 0034 0197      		sbiw r24,1
 2399 0036 A109      		sbc r26,__zero_reg__
 2400 0038 B109      		sbc r27,__zero_reg__
 2401 003a 8983      		std Y+1,r24
 2402 003c 9A83      		std Y+2,r25
 2403 003e AB83      		std Y+3,r26
 2404 0040 BC83      		std Y+4,r27
 2405 0042 8981      		ldd r24,Y+1
 2406 0044 9A81      		ldd r25,Y+2
 2407 0046 AB81      		ldd r26,Y+3
 2408 0048 BC81      		ldd r27,Y+4
 2409 004a 892B      		or r24,r25
 2410 004c 8A2B      		or r24,r26
 2411 004e 8B2B      		or r24,r27
 2412 0050 01F4      		brne .L129
 2413               	.L126:
 2414               	/* epilogue start */
 441:../src/main.c **** 	{
 442:../src/main.c **** 	};
 443:../src/main.c **** 	
 444:../src/main.c **** }
 2415               		.loc 1 444 0 is_stmt 1
 2416 0052 0F90      		pop __tmp_reg__
 2417 0054 0F90      		pop __tmp_reg__
 2418 0056 0F90      		pop __tmp_reg__
 2419 0058 0F90      		pop __tmp_reg__
 2420 005a DF91      		pop r29
 2421 005c CF91      		pop r28
 2422 005e 0895      		ret
 2423               		.cfi_endproc
 2424               	.LFE87:
 2426               	.global	msg
 2427               		.section	.data.msg,"aw",@progbits
 2430               	msg:
 2431 0000 4865 6C6C 		.string	"Hello from ATmega328p\r\n  "
 2431      6F20 6672 
 2431      6F6D 2041 
 2431      546D 6567 
 2431      6133 3238 
 2432               	.global	carguerosJugador2
 2433               		.section	.data.carguerosJugador2,"aw",@progbits
 2436               	carguerosJugador2:
 2437 0000 06        		.byte	6
 2438 0001 06        		.byte	6
 2439 0002 00        		.byte	0
 2440 0003 07        		.byte	7
 2441 0004 06        		.byte	6
 2442 0005 00        		.byte	0
 2443 0006 02        		.byte	2
 2444 0007 02        		.byte	2
 2445 0008 00        		.byte	0
 2446 0009 02        		.byte	2
 2447 000a 03        		.byte	3
 2448 000b 00        		.byte	0
 2449               	.global	submarinosJugador2
 2450               		.section	.data.submarinosJugador2,"aw",@progbits
 2453               	submarinosJugador2:
 2454 0000 01        		.byte	1
 2455 0001 06        		.byte	6
 2456 0002 00        		.byte	0
 2457 0003 01        		.byte	1
 2458 0004 04        		.byte	4
 2459 0005 00        		.byte	0
 2460 0006 03        		.byte	3
 2461 0007 04        		.byte	4
 2462 0008 00        		.byte	0
 2463               	.global	carguerosJugador1
 2464               		.section	.data.carguerosJugador1,"aw",@progbits
 2467               	carguerosJugador1:
 2468 0000 07        		.byte	7
 2469 0001 07        		.byte	7
 2470 0002 00        		.byte	0
 2471 0003 07        		.byte	7
 2472 0004 06        		.byte	6
 2473 0005 00        		.byte	0
 2474 0006 05        		.byte	5
 2475 0007 05        		.byte	5
 2476 0008 00        		.byte	0
 2477 0009 04        		.byte	4
 2478 000a 05        		.byte	5
 2479 000b 00        		.byte	0
 2480               	.global	submarinosJugador1
 2481               		.section	.data.submarinosJugador1,"aw",@progbits
 2484               	submarinosJugador1:
 2485 0000 00        		.byte	0
 2486 0001 03        		.byte	3
 2487 0002 00        		.byte	0
 2488 0003 02        		.byte	2
 2489 0004 03        		.byte	3
 2490 0005 00        		.byte	0
 2491 0006 06        		.byte	6
 2492 0007 03        		.byte	3
 2493 0008 00        		.byte	0
 2494               		.comm	matrizJugador2,192,1
 2495               		.comm	matrizJugador1,192,1
 2496               		.comm	display_rgb,192,1
 2497               	.global	Apagado
 2498               		.section	.bss.Apagado,"aw",@nobits
 2501               	Apagado:
 2502 0000 0000 00   		.zero	3
 2503               	.global	Danado
 2504               		.section	.data.Danado,"aw",@progbits
 2507               	Danado:
 2508 0000 1E        		.byte	30
 2509 0001 1E        		.byte	30
 2510 0002 00        		.byte	0
 2511               	.global	Agua
 2512               		.section	.data.Agua,"aw",@progbits
 2515               	Agua:
 2516 0000 00        		.byte	0
 2517 0001 00        		.byte	0
 2518 0002 1E        		.byte	30
 2519               	.global	Hundido
 2520               		.section	.data.Hundido,"aw",@progbits
 2523               	Hundido:
 2524 0000 00        		.byte	0
 2525 0001 1E        		.byte	30
 2526 0002 00        		.byte	0
 2527               	.global	GamePointer
 2528               		.section	.data.GamePointer,"aw",@progbits
 2531               	GamePointer:
 2532 0000 19        		.byte	25
 2533 0001 00        		.byte	0
 2534 0002 00        		.byte	0
 2535               		.comm	p2disp,2,1
 2536               		.text
 2537               	.Letext0:
 2538               		.file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 2539               		.file 4 "../src/Timer.h"
 2540               		.file 5 "../src/joystickReads.h"
 2541               		.file 6 "../src/UART.h"
 2542               		.file 7 "../src/ADC.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
              main.s:2      *ABS*:0000003e __SP_H__
              main.s:3      *ABS*:0000003d __SP_L__
              main.s:4      *ABS*:0000003f __SREG__
              main.s:5      *ABS*:00000000 __tmp_reg__
              main.s:6      *ABS*:00000001 __zero_reg__
              main.s:13     .text.checkPlayer1Win:00000000 checkPlayer1Win
              main.s:2453   .data.submarinosJugador2:00000000 submarinosJugador2
              main.s:2436   .data.carguerosJugador2:00000000 carguerosJugador2
              main.s:177    .text.checkPlayer2Win:00000000 checkPlayer2Win
              main.s:2484   .data.submarinosJugador1:00000000 submarinosJugador1
              main.s:2467   .data.carguerosJugador1:00000000 carguerosJugador1
              main.s:340    .text.delaySeconds:00000000 delaySeconds
              main.s:427    .text.copyArrayOf1:00000000 copyArrayOf1
                            *COM*:000000c0 matrizJugador1
                            *COM*:000000c0 display_rgb
              main.s:496    .text.copyArrayOf2:00000000 copyArrayOf2
                            *COM*:000000c0 matrizJugador2
              main.s:565    .text.scanSubmarinos1:00000000 scanSubmarinos1
              main.s:2523   .data.Hundido:00000000 Hundido
              main.s:718    .text.scanSubmarinos2:00000000 scanSubmarinos2
              main.s:871    .text.scanCargueros1:00000000 scanCargueros1
              main.s:2507   .data.Danado:00000000 Danado
              main.s:1208   .text.shootPlayer1:00000000 shootPlayer1
              main.s:2515   .data.Agua:00000000 Agua
              main.s:1284   .text.playPlayer2:00000000 playPlayer2
              main.s:2531   .data.GamePointer:00000000 GamePointer
                            *COM*:00000002 p2disp
              main.s:1490   .text.scanCargueros2:00000000 scanCargueros2
              main.s:1827   .text.shootPlayer2:00000000 shootPlayer2
              main.s:1903   .text.playPlayer1:00000000 playPlayer1
              main.s:2109   .text.gameOn:00000000 gameOn
              main.s:2181   .text.main:00000000 main
              main.s:2501   .bss.Apagado:00000000 Apagado
              main.s:2299   .text.clear_disp:00000000 clear_disp
              main.s:2351   .text.softdelay:00000000 softdelay
              main.s:2430   .data.msg:00000000 msg
                           .group:00000000 wm4.parts.h.38.424177e1c4c7502bdf2cd6eac0e66f1e
                           .group:00000000 wm4.sfr_defs.h.36.473802ecbcb5d4d38de6c7efbfcd3c60
                           .group:00000000 wm4.stdint.h.41.052d062c327f27e210bb72c3d087afe5
                           .group:00000000 wm4.inttypes.h.96.afb9c4be73a069861f8689c997efc518
                           .group:00000000 wm4.sfr_defs.h.128.38ceebe2fb099c106e85a566519e0f1a
                           .group:00000000 wm4.iom328p.h.44.29c929f46483155923fc58520c74ebf7
                           .group:00000000 wm4.portpins.h.34.21289185946cbf62723ecc8db6cdc3ff
                           .group:00000000 wm4.common.h.35.c7e66042b2128622b9d3bddccc9a39f4
                           .group:00000000 wm4.version.h.54.85699b1a50c61c991a37d67b69e79e95
                           .group:00000000 wm4.fuse.h.36.5c373c650020c0efef2cbaa98ea802c3
                           .group:00000000 wm4.lock.h.36.51f311078904691e8f8c3d70111251d8
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.stdlib.h.40.248a6087ef49adb4f4328833c0282d4b
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.stdlib.h.51.3a36e1d757b19eb9d8852fbf8bb7cd30
                           .group:00000000 wm4.compiler.h.71.f9633126e8a32454fdb20497dc57808e
                           .group:00000000 wm4.interrupt.h.36.b2193b640edda749ea0a45a8be5976c8
                           .group:00000000 wm4.interrupt_avr8.h.89.988a0fb0a0728821bb2ce6a5fad9a217
                           .group:00000000 wm4.pgmspace.h.83.7bf4a326041279617a872e0717310315
                           .group:00000000 wm4.pgmspace.h.98.de80e653d80602932888d287eea24d43
                           .group:00000000 wm4.progmem.h.56.1d8b28eb4bdbace2fba3d4aa9d1800d3
                           .group:00000000 wm4.compiler.h.162.3bca7208a79b237ff211f6b945969fd5
                           .group:00000000 wm4.ioport.h.38.48f501ae460febc49dd950c4a2361938
                           .group:00000000 wm4.mega_gpio.h.43.3e8869bf7dde66f4dae42caccabdc28f
                           .group:00000000 wm4.board.h.41.2d9694df0f6b670341666b9015632b94
                           .group:00000000 wm4.led.h.38.8c4408d5cc264ea8e7bbcc0ac6971d10
                           .group:00000000 wm4.atmega328p_xplained_mini.h.47.411278661c63ad4794d5f415bca0f65b
                           .group:00000000 wm4.delay.h.36.9b049a49ceee302c08fd72aec728bf54
                           .group:00000000 wm4.math.h.49.a63885b3cd597bc58738696048bb49a6
                           .group:00000000 wm4.ADC.h.10.4375d630963ad1b8b9d883a341299c49

UNDEFINED SYMBOLS
jButton
yMovement
xMovement
wrt_ws2812
playerTurn
init_ws2812
init_RTI
UART_Init
adc_init
wrt_Digit_Init
__do_copy_data
__do_clear_bss
