   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.checkPlayer1Win,"ax",@progbits
  11               	.global	checkPlayer1Win
  13               	checkPlayer1Win:
  14               	.LFB75:
  15               		.file 1 "../src/main.c"
   1:../src/main.c **** 
   2:../src/main.c **** #include <asf.h>
   3:../src/main.c **** #include <stdint.h>
   4:../src/main.c **** #define F_CPU 16000000UL // Defining the CPU Frequency
   5:../src/main.c **** #include <util/delay.h>  // Generates a Blocking Delay
   6:../src/main.c **** 
   7:../src/main.c **** #include "UART.h"
   8:../src/main.c **** #include "ADC.h"
   9:../src/main.c **** #include "Timer.h"
  10:../src/main.c **** #include "joystickReads.h"
  11:../src/main.c **** /*
  12:../src/main.c **** GccWS2812_V3
  13:../src/main.c **** This version works like the assembly version "ws2812 efecto1"
  14:../src/main.c **** The main differences are:
  15:../src/main.c **** 1- The Assembly code is the same but the compiler is the GCC version
  16:../src/main.c ****    so pay attention to the differences.
  17:../src/main.c **** Eg.: .equ is replaced by #define , HIGH and LOW is replaced by hi8 and lo8
  18:../src/main.c ****      The argument of the latter macros (hi8,lo8) is not more 2*Address_Label
  19:../src/main.c **** 	 #define __SFR_OFFSET 0 must be defined
  20:../src/main.c **** 	 Macros syntax is different
  21:../src/main.c **** 	 .def is replaced with #define 
  22:../src/main.c **** 	 Tables in program segment are defined using .byte (not .db)
  23:../src/main.c **** */
  24:../src/main.c **** 
  25:../src/main.c **** 
  26:../src/main.c **** 
  27:../src/main.c **** typedef struct 
  28:../src/main.c **** 		{
  29:../src/main.c **** 			uint8_t green;   // WS2812 order (GRB)
  30:../src/main.c **** 			uint8_t red;
  31:../src/main.c **** 			uint8_t blue;
  32:../src/main.c **** 		} RGBled;
  33:../src/main.c **** 		
  34:../src/main.c **** 
  35:../src/main.c **** typedef struct  
  36:../src/main.c **** 		{
  37:../src/main.c **** 			uint8_t x0;		//	Coordenadas
  38:../src/main.c **** 			uint8_t y0;
  39:../src/main.c **** 			uint8_t boolDisparado;
  40:../src/main.c **** 		} Submarino;
  41:../src/main.c **** 		
  42:../src/main.c **** typedef struct
  43:../src/main.c **** 		{
  44:../src/main.c **** 			uint8_t x0;		//	Coordenadas
  45:../src/main.c **** 			uint8_t y0;
  46:../src/main.c **** 			uint8_t boolDisparado0;
  47:../src/main.c **** 			uint8_t x1;		//Largo 2 de barco
  48:../src/main.c **** 			uint8_t y1;
  49:../src/main.c **** 			uint8_t boolDisparado1;
  50:../src/main.c **** 		} Carguero;
  51:../src/main.c **** 		
  52:../src/main.c **** 
  53:../src/main.c **** #define LED (1<<5)				// Hackatronics Led "D1"
  54:../src/main.c **** typedef RGBled (*P2RGB);
  55:../src/main.c **** #define GAME_POINTER_SPEED 20		// SPEED * 10 ms because of the function delay
  56:../src/main.c **** #define WINPLAYER1 3			// Corresponding value to the ISR check for the win
  57:../src/main.c **** #define WINPLAYER2 4			// Corresponding value to the ISR check for the win
  58:../src/main.c **** 
  59:../src/main.c **** // Variables  
  60:../src/main.c **** P2RGB p2disp;
  61:../src/main.c **** 
  62:../src/main.c **** RGBled GamePointer = {25,0,0};	//Verde
  63:../src/main.c **** RGBled Hundido = {0,30,0};		//Rojo
  64:../src/main.c **** RGBled Agua = {0,0,30};			//Azul
  65:../src/main.c **** RGBled Danado = {30,30,0};		//Amarillo
  66:../src/main.c **** RGBled Apagado = {0,0,0};	
  67:../src/main.c **** RGBled display_rgb[8][8];	
  68:../src/main.c **** 
  69:../src/main.c **** RGBled matrizJugador1[8][8];
  70:../src/main.c **** RGBled matrizJugador2[8][8];
  71:../src/main.c **** 
  72:../src/main.c **** Submarino submarinosJugador1[3] = {{0,3,0}, {2,3,0}, {6,3,0}};
  73:../src/main.c **** Carguero carguerosJugador1[2] = {{7,7,0,7,6,0}, {5,5,0,4,5,0}};
  74:../src/main.c **** 	
  75:../src/main.c **** Submarino submarinosJugador2[3] = {{1,6,0}, {1,4,0}, {3,4,0}};
  76:../src/main.c **** Carguero carguerosJugador2[2] = {{6,6,0,7,6,0}, {2,2,0,2,3,0}};
  77:../src/main.c **** 
  78:../src/main.c **** 		
  79:../src/main.c **** // Assembly functions
  80:../src/main.c **** extern void init_ws2812(void);
  81:../src/main.c **** extern void wrt_ws2812(P2RGB);
  82:../src/main.c **** extern void wrt_Digit_Init(void);
  83:../src/main.c **** 
  84:../src/main.c **** // Local prototypes
  85:../src/main.c **** void gameOn(void);
  86:../src/main.c **** void softdelay(void);
  87:../src/main.c **** void clear_disp(void);
  88:../src/main.c **** void copyArrayOf1(void);
  89:../src/main.c **** void copyArrayOf2(void);
  90:../src/main.c **** void playPlayer1(void);
  91:../src/main.c **** void playPlayer2(void);
  92:../src/main.c **** int8_t msg[] = "Hello from ATmega328p\r\n  ";
  93:../src/main.c **** uint8_t checkPlayer1Win(void);
  94:../src/main.c **** uint8_t checkPlayer2Win(void);
  95:../src/main.c **** void delaySeconds(uint8_t);
  96:../src/main.c **** void shootPlayer1(int8_t, int8_t);
  97:../src/main.c **** void shootPlayer2(int8_t, int8_t);
  98:../src/main.c **** void scanSubmarinos1(int8_t, int8_t);
  99:../src/main.c **** void scanCargueros1(int8_t, int8_t);
 100:../src/main.c **** void scanSubmarinos2(int8_t, int8_t);
 101:../src/main.c **** void scanCargueros2(int8_t, int8_t);
 102:../src/main.c **** 
 103:../src/main.c **** 
 104:../src/main.c **** int main (void)
 105:../src/main.c **** {		
 106:../src/main.c **** 	init_ws2812();		// Initialize RGB Display driver
 107:../src/main.c **** 	init_RTI();			// Initialize Periodic Real Time Interrupt(Timer)
 108:../src/main.c **** 	UART_Init();		// Initialize serial port driver (UART)
 109:../src/main.c **** 	adc_init();			// Initialize Analog to digital converter (Joystick)
 110:../src/main.c **** 	wrt_Digit_Init();	// Initialize the Seven Segments Display
 111:../src/main.c **** 	playerTurn = 1;		// Sets the value of the first player
 112:../src/main.c **** 		
 113:../src/main.c **** 	p2disp=&display_rgb[0][0];
 114:../src/main.c **** 	
 115:../src/main.c **** 	for (int i=0; i<=7; i++)				// Sets the initial 'Apagado' value for matrizJugador1 RGBled array.
 116:../src/main.c **** 		for (int j=0; j<=7; j++)
 117:../src/main.c **** 			matrizJugador1[i][j] = Apagado;
 118:../src/main.c **** 
 119:../src/main.c **** 	for (int i=0; i<=7; i++)				// Sets the initial 'Apagado' value for matrizJugador2 RGBled array.
 120:../src/main.c **** 		for (int j=0; j<=7; j++)
 121:../src/main.c **** 			matrizJugador2[i][j] = Apagado;
 122:../src/main.c **** 			
 123:../src/main.c **** 	sei();					// Enable global Interrupts
 124:../src/main.c **** 	
 125:../src/main.c **** 	gameOn();
 126:../src/main.c **** }
 127:../src/main.c **** 
 128:../src/main.c **** void gameOn(void)
 129:../src/main.c **** {
 130:../src/main.c **** 	while ((playerTurn == 1) | (playerTurn == 2))
 131:../src/main.c **** 	{
 132:../src/main.c **** 		while(playerTurn == 1)
 133:../src/main.c **** 			playPlayer1();
 134:../src/main.c **** 	
 135:../src/main.c **** 		if (checkPlayer1Win() == 1)
 136:../src/main.c **** 			playerTurn = WINPLAYER1;
 137:../src/main.c **** 		
 138:../src/main.c **** 		while (playerTurn == 2)
 139:../src/main.c **** 			playPlayer2();
 140:../src/main.c **** 		
 141:../src/main.c **** 		if (checkPlayer2Win() == 1)
 142:../src/main.c **** 			playerTurn = WINPLAYER2;
 143:../src/main.c **** 	}
 144:../src/main.c **** 	
 145:../src/main.c **** 	while(1)
 146:../src/main.c **** 	{
 147:../src/main.c **** 		
 148:../src/main.c **** 	}
 149:../src/main.c **** }
 150:../src/main.c **** 
 151:../src/main.c **** /* Cycle of a shot for player1.*/
 152:../src/main.c **** void playPlayer1(void)
 153:../src/main.c **** {
 154:../src/main.c **** 	// Actions to do only once per cycle
 155:../src/main.c **** 	volatile int gamePointerTilt = GAME_POINTER_SPEED;
 156:../src/main.c **** 	
 157:../src/main.c **** 	while(jButton != 0)
 158:../src/main.c **** 	{
 159:../src/main.c **** 		if (gamePointerTilt == 0)
 160:../src/main.c **** 		{
 161:../src/main.c **** 			copyArrayOf2();
 162:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 163:../src/main.c **** 			gamePointerTilt = GAME_POINTER_SPEED;
 164:../src/main.c **** 		}
 165:../src/main.c **** 		else if (gamePointerTilt >= GAME_POINTER_SPEED/2)
 166:../src/main.c **** 		{
 167:../src/main.c **** 			copyArrayOf2();
 168:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 169:../src/main.c **** 			gamePointerTilt--;
 170:../src/main.c **** 		}
 171:../src/main.c **** 		else
 172:../src/main.c **** 		{
 173:../src/main.c **** 			copyArrayOf2();
 174:../src/main.c **** 			gamePointerTilt--;
 175:../src/main.c **** 		}
 176:../src/main.c **** 		
 177:../src/main.c **** 		wrt_ws2812(p2disp);
 178:../src/main.c **** 		
 179:../src/main.c **** 		_delay_ms(10);
 180:../src/main.c **** 	}
 181:../src/main.c **** 	// Actions to end the player cycle
 182:../src/main.c **** 	shootPlayer2(xMovement, yMovement);
 183:../src/main.c **** 	
 184:../src/main.c **** 	copyArrayOf2();
 185:../src/main.c **** 	wrt_ws2812(p2disp);
 186:../src/main.c **** 	
 187:../src/main.c **** 	delaySeconds(0);
 188:../src/main.c **** 	playerTurn = 2;
 189:../src/main.c **** }
 190:../src/main.c **** 
 191:../src/main.c **** /* Cycle of a shot for player2.*/
 192:../src/main.c **** void playPlayer2(void)
 193:../src/main.c **** {
 194:../src/main.c **** 	// Actions to do only once per cycle
 195:../src/main.c **** 	volatile int gamePointerTilt = GAME_POINTER_SPEED;
 196:../src/main.c **** 	
 197:../src/main.c **** 	while(jButton != 0)
 198:../src/main.c **** 	{
 199:../src/main.c **** 		if (gamePointerTilt == 0)
 200:../src/main.c **** 		{
 201:../src/main.c **** 			copyArrayOf1();
 202:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 203:../src/main.c **** 			gamePointerTilt = GAME_POINTER_SPEED;
 204:../src/main.c **** 		}
 205:../src/main.c **** 		else if (gamePointerTilt >= GAME_POINTER_SPEED/2)
 206:../src/main.c **** 		{
 207:../src/main.c **** 			copyArrayOf1();
 208:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 209:../src/main.c **** 			gamePointerTilt--;
 210:../src/main.c **** 		}
 211:../src/main.c **** 		else
 212:../src/main.c **** 		{
 213:../src/main.c **** 			copyArrayOf1();
 214:../src/main.c **** 			gamePointerTilt--;
 215:../src/main.c **** 		}
 216:../src/main.c **** 		
 217:../src/main.c **** 		wrt_ws2812(p2disp);
 218:../src/main.c **** 		
 219:../src/main.c **** 		_delay_ms(10);
 220:../src/main.c **** 	}
 221:../src/main.c **** 	// Actions to end the player cycle
 222:../src/main.c **** 	shootPlayer1(xMovement, yMovement);
 223:../src/main.c **** 	
 224:../src/main.c **** 	copyArrayOf1();
 225:../src/main.c **** 	wrt_ws2812(p2disp);
 226:../src/main.c **** 	
 227:../src/main.c **** 	delaySeconds(0);
 228:../src/main.c **** 	playerTurn = 1;
 229:../src/main.c **** }
 230:../src/main.c **** 
 231:../src/main.c **** /* Returns 1 if player1 Won.*/
 232:../src/main.c **** uint8_t checkPlayer1Win(void)
 233:../src/main.c **** {
  16               		.loc 1 233 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LVL0:
 234:../src/main.c **** 	uint8_t checks[7] = {0, 0, 0, 0, 0, 0, 0};
 235:../src/main.c **** 	uint8_t checksTrue[7] = {1, 1, 1, 1, 1, 1, 1};
 236:../src/main.c **** 	for (uint8_t c=0; c<=2; c++)
 237:../src/main.c **** 	{
 238:../src/main.c **** 		if (submarinosJugador2[c].boolDisparado == 1)
 239:../src/main.c **** 			checks[c] = 1;
 240:../src/main.c **** 	}
 241:../src/main.c **** 	for (uint8_t c=0; c<=1; c++)
 242:../src/main.c **** 	{
 243:../src/main.c **** 		if (carguerosJugador2[c].boolDisparado0 == 1)
 244:../src/main.c **** 		{
 245:../src/main.c **** 			checks[c+3] = 1;
 246:../src/main.c **** 		}
 247:../src/main.c **** 		if (carguerosJugador2[c].boolDisparado1 == 1)
 248:../src/main.c **** 		{
 249:../src/main.c **** 			checks[c+5] = 1;
 250:../src/main.c **** 		}
 251:../src/main.c **** 	}
 252:../src/main.c **** 	
 253:../src/main.c **** 	
 254:../src/main.c **** 	if (checks == checksTrue)
 255:../src/main.c **** 	{
 256:../src/main.c **** 		return 1;
 257:../src/main.c **** 	}
 258:../src/main.c **** 	else
 259:../src/main.c **** 	{
 260:../src/main.c **** 		return 0;
 261:../src/main.c **** 	}
 262:../src/main.c **** }
  23               		.loc 1 262 0
  24 0000 80E0      		ldi r24,0
  25 0002 0895      		ret
  26               		.cfi_endproc
  27               	.LFE75:
  29               		.section	.text.checkPlayer2Win,"ax",@progbits
  30               	.global	checkPlayer2Win
  32               	checkPlayer2Win:
  33               	.LFB76:
 263:../src/main.c **** 
 264:../src/main.c **** /* Returns 1 if player2 Won.*/
 265:../src/main.c **** uint8_t checkPlayer2Win(void)
 266:../src/main.c **** {
  34               		.loc 1 266 0
  35               		.cfi_startproc
  36 0000 CF93      		push r28
  37               	.LCFI0:
  38               		.cfi_def_cfa_offset 3
  39               		.cfi_offset 28, -2
  40 0002 DF93      		push r29
  41               	.LCFI1:
  42               		.cfi_def_cfa_offset 4
  43               		.cfi_offset 29, -3
  44 0004 CDB7      		in r28,__SP_L__
  45 0006 DEB7      		in r29,__SP_H__
  46               	.LCFI2:
  47               		.cfi_def_cfa_register 28
  48 0008 2797      		sbiw r28,7
  49               	.LCFI3:
  50               		.cfi_def_cfa_offset 11
  51 000a 0FB6      		in __tmp_reg__,__SREG__
  52 000c F894      		cli
  53 000e DEBF      		out __SP_H__,r29
  54 0010 0FBE      		out __SREG__,__tmp_reg__
  55 0012 CDBF      		out __SP_L__,r28
  56               	/* prologue: function */
  57               	/* frame size = 7 */
  58               	/* stack size = 9 */
  59               	.L__stack_usage = 9
 267:../src/main.c **** 	uint8_t checks[7] = {0, 0, 0, 0, 0, 0, 0};
  60               		.loc 1 267 0
  61 0014 DE01      		movw r26,r28
  62 0016 1196      		adiw r26,1
  63 0018 87E0      		ldi r24,lo8(7)
  64 001a FD01      		movw r30,r26
  65               		0:
  66 001c 1192      		st Z+,__zero_reg__
  67 001e 8A95      		dec r24
  68 0020 01F4      		brne 0b
  69               	.LVL1:
  70 0022 E0E0      		ldi r30,lo8(submarinosJugador1)
  71 0024 F0E0      		ldi r31,hi8(submarinosJugador1)
  72 0026 20E0      		ldi r18,lo8(submarinosJugador1+9)
  73 0028 30E0      		ldi r19,hi8(submarinosJugador1+9)
  74               	.LBB10:
 268:../src/main.c **** 	for (uint8_t c=0; c<=2; c++)
 269:../src/main.c **** 	{
 270:../src/main.c **** 		if (submarinosJugador1[c].boolDisparado == 1)
 271:../src/main.c **** 		checks[c] = 1;
  75               		.loc 1 271 0
  76 002a 91E0      		ldi r25,lo8(1)
  77               	.LVL2:
  78               	.L4:
 270:../src/main.c **** 		checks[c] = 1;
  79               		.loc 1 270 0
  80 002c 8281      		ldd r24,Z+2
  81 002e 8130      		cpi r24,lo8(1)
  82 0030 01F4      		brne .L3
  83               		.loc 1 271 0
  84 0032 9C93      		st X,r25
  85               	.L3:
  86               	.LVL3:
  87 0034 3396      		adiw r30,3
  88 0036 1196      		adiw r26,1
  89               	.LVL4:
 268:../src/main.c **** 	for (uint8_t c=0; c<=2; c++)
  90               		.loc 1 268 0 discriminator 2
  91 0038 E217      		cp r30,r18
  92 003a F307      		cpc r31,r19
  93 003c 01F4      		brne .L4
  94               	.LVL5:
  95               	.LBE10:
  96               	.LBB11:
 272:../src/main.c **** 	}
 273:../src/main.c **** 	for (uint8_t c=0; c<=1; c++)
 274:../src/main.c **** 	{
 275:../src/main.c **** 		if (carguerosJugador1[c].boolDisparado0 == 1)
  97               		.loc 1 275 0
  98 003e 8091 0000 		lds r24,carguerosJugador1+2
  99 0042 8130      		cpi r24,lo8(1)
 100 0044 01F4      		brne .L5
 276:../src/main.c **** 		{
 277:../src/main.c **** 			checks[c+3] = 1;
 101               		.loc 1 277 0
 102 0046 8C83      		std Y+4,r24
 103               	.L5:
 278:../src/main.c **** 		}
 279:../src/main.c **** 		if (carguerosJugador1[c].boolDisparado1 == 1)
 104               		.loc 1 279 0
 105 0048 8091 0000 		lds r24,carguerosJugador1+5
 106 004c 8130      		cpi r24,lo8(1)
 107 004e 01F4      		brne .L6
 280:../src/main.c **** 		{
 281:../src/main.c **** 			checks[c+5] = 1;
 108               		.loc 1 281 0
 109 0050 8E83      		std Y+6,r24
 110               	.L6:
 111               	.LVL6:
 275:../src/main.c **** 		{
 112               		.loc 1 275 0
 113 0052 8091 0000 		lds r24,carguerosJugador1+8
 114 0056 8130      		cpi r24,lo8(1)
 115 0058 01F4      		brne .L7
 277:../src/main.c **** 		}
 116               		.loc 1 277 0
 117 005a 8D83      		std Y+5,r24
 118               	.L7:
 279:../src/main.c **** 		{
 119               		.loc 1 279 0
 120 005c 8091 0000 		lds r24,carguerosJugador1+11
 121 0060 8130      		cpi r24,lo8(1)
 122 0062 01F4      		brne .L8
 123               		.loc 1 281 0
 124 0064 8F83      		std Y+7,r24
 125               	.L8:
 126               	.LVL7:
 127               	.LBE11:
 282:../src/main.c **** 		}
 283:../src/main.c **** 	}
 284:../src/main.c **** 	
 285:../src/main.c **** 	
 286:../src/main.c **** 	if ((checks[0] == 1) & (checks[1] == 1) & (checks[2] == 1) & (checks[3] == 1) & (checks[4] == 1) &
 287:../src/main.c **** 	{
 288:../src/main.c **** 		return 1;
 128               		.loc 1 288 0 discriminator 2
 129 0066 31E0      		ldi r19,lo8(1)
 130 0068 8981      		ldd r24,Y+1
 131 006a 8130      		cpi r24,lo8(1)
 132 006c 01F0      		breq .L9
 133 006e 30E0      		ldi r19,0
 134               	.L9:
 135 0070 81E0      		ldi r24,lo8(1)
 136 0072 9A81      		ldd r25,Y+2
 137 0074 9130      		cpi r25,lo8(1)
 138 0076 01F0      		breq .L10
 139 0078 80E0      		ldi r24,0
 140               	.L10:
 141 007a 8323      		and r24,r19
 142 007c 31E0      		ldi r19,lo8(1)
 143 007e 9B81      		ldd r25,Y+3
 144 0080 9130      		cpi r25,lo8(1)
 145 0082 01F0      		breq .L11
 146 0084 30E0      		ldi r19,0
 147               	.L11:
 148 0086 8323      		and r24,r19
 149 0088 21E0      		ldi r18,lo8(1)
 150 008a 9C81      		ldd r25,Y+4
 151 008c 9130      		cpi r25,lo8(1)
 152 008e 01F0      		breq .L12
 153 0090 20E0      		ldi r18,0
 154               	.L12:
 155 0092 982F      		mov r25,r24
 156 0094 9223      		and r25,r18
 157 0096 81E0      		ldi r24,lo8(1)
 158 0098 2D81      		ldd r18,Y+5
 159 009a 2130      		cpi r18,lo8(1)
 160 009c 01F0      		breq .L13
 161 009e 80E0      		ldi r24,0
 162               	.L13:
 163 00a0 8923      		and r24,r25
 164 00a2 91E0      		ldi r25,lo8(1)
 165 00a4 2E81      		ldd r18,Y+6
 166 00a6 2130      		cpi r18,lo8(1)
 167 00a8 01F0      		breq .L14
 168 00aa 90E0      		ldi r25,0
 169               	.L14:
 170 00ac 9823      		and r25,r24
 171 00ae 81E0      		ldi r24,lo8(1)
 172 00b0 2F81      		ldd r18,Y+7
 173 00b2 2130      		cpi r18,lo8(1)
 174 00b4 01F0      		breq .L15
 175 00b6 80E0      		ldi r24,0
 176               	.L15:
 289:../src/main.c **** 	}
 290:../src/main.c **** 	else
 291:../src/main.c **** 	{
 292:../src/main.c **** 		return 0;
 293:../src/main.c **** 	}
 294:../src/main.c **** }
 177               		.loc 1 294 0 discriminator 2
 178 00b8 8923      		and r24,r25
 179               	/* epilogue start */
 180 00ba 2796      		adiw r28,7
 181 00bc 0FB6      		in __tmp_reg__,__SREG__
 182 00be F894      		cli
 183 00c0 DEBF      		out __SP_H__,r29
 184 00c2 0FBE      		out __SREG__,__tmp_reg__
 185 00c4 CDBF      		out __SP_L__,r28
 186 00c6 DF91      		pop r29
 187 00c8 CF91      		pop r28
 188 00ca 0895      		ret
 189               		.cfi_endproc
 190               	.LFE76:
 192               		.section	.text.delaySeconds,"ax",@progbits
 193               	.global	delaySeconds
 195               	delaySeconds:
 196               	.LFB77:
 295:../src/main.c **** 
 296:../src/main.c **** /* Blocking delay in seconds.*/ 
 297:../src/main.c **** void delaySeconds(uint8_t seconds)
 298:../src/main.c **** {
 197               		.loc 1 298 0
 198               		.cfi_startproc
 199               	.LVL8:
 200               	/* prologue: function */
 201               	/* frame size = 0 */
 202               	/* stack size = 0 */
 203               	.L__stack_usage = 0
 204               	.LBB12:
 299:../src/main.c **** 	for(int8_t i=1; i<=seconds; i++)
 205               		.loc 1 299 0
 206 0000 482F      		mov r20,r24
 207 0002 50E0      		ldi r21,0
 208 0004 1416      		cp __zero_reg__,r20
 209 0006 1506      		cpc __zero_reg__,r21
 210 0008 04F4      		brge .L17
 211 000a 91E0      		ldi r25,lo8(1)
 212               	.LVL9:
 213               	.L19:
 214               	.LBB13:
 215               	.LBB14:
 216               	.LBB15:
 217               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
   1:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 218               		.loc 2 187 0 discriminator 1
 219 000c 2FEF      		ldi r18,lo8(799999)
 220 000e 34E3      		ldi r19,hi8(799999)
 221 0010 8CE0      		ldi r24,hlo8(799999)
 222 0012 2150      	1:	subi r18,1
 223 0014 3040      		sbci r19,0
 224 0016 8040      		sbci r24,0
 225 0018 01F4      		brne 1b
 226 001a 00C0      		rjmp .
 227 001c 0000      		nop
 228               	.LVL10:
 229 001e 2FEF      		ldi r18,lo8(799999)
 230 0020 34E3      		ldi r19,hi8(799999)
 231 0022 8CE0      		ldi r24,hlo8(799999)
 232 0024 2150      	1:	subi r18,1
 233 0026 3040      		sbci r19,0
 234 0028 8040      		sbci r24,0
 235 002a 01F4      		brne 1b
 236 002c 00C0      		rjmp .
 237 002e 0000      		nop
 238               	.LVL11:
 239 0030 2FEF      		ldi r18,lo8(799999)
 240 0032 34E3      		ldi r19,hi8(799999)
 241 0034 8CE0      		ldi r24,hlo8(799999)
 242 0036 2150      	1:	subi r18,1
 243 0038 3040      		sbci r19,0
 244 003a 8040      		sbci r24,0
 245 003c 01F4      		brne 1b
 246 003e 00C0      		rjmp .
 247 0040 0000      		nop
 248               	.LVL12:
 249 0042 2FEF      		ldi r18,lo8(799999)
 250 0044 34E3      		ldi r19,hi8(799999)
 251 0046 8CE0      		ldi r24,hlo8(799999)
 252 0048 2150      	1:	subi r18,1
 253 004a 3040      		sbci r19,0
 254 004c 8040      		sbci r24,0
 255 004e 01F4      		brne 1b
 256 0050 00C0      		rjmp .
 257 0052 0000      		nop
 258               	.LVL13:
 259 0054 9F5F      		subi r25,lo8(-(1))
 260               	.LVL14:
 261               	.LBE15:
 262               	.LBE14:
 263               	.LBE13:
 264               		.loc 1 299 0 discriminator 1
 265 0056 292F      		mov r18,r25
 266 0058 092E      		mov __tmp_reg__,r25
 267 005a 000C      		lsl r0
 268 005c 330B      		sbc r19,r19
 269 005e 4217      		cp r20,r18
 270 0060 5307      		cpc r21,r19
 271 0062 04F4      		brge .L19
 272               	.LVL15:
 273               	.L17:
 274 0064 0895      		ret
 275               	.LBE12:
 276               		.cfi_endproc
 277               	.LFE77:
 279               		.section	.text.copyArrayOf1,"ax",@progbits
 280               	.global	copyArrayOf1
 282               	copyArrayOf1:
 283               	.LFB78:
 300:../src/main.c **** 	{
 301:../src/main.c **** 		for(int8_t i=0; i<=3; i++)
 302:../src/main.c **** 		{
 303:../src/main.c **** 			_delay_ms(250);
 304:../src/main.c **** 		}
 305:../src/main.c **** 	}
 306:../src/main.c **** }
 307:../src/main.c **** 
 308:../src/main.c **** /* Copies matrizJugador1 in display_rgb.*/
 309:../src/main.c **** void copyArrayOf1(void)
 310:../src/main.c **** {
 284               		.loc 1 310 0
 285               		.cfi_startproc
 286 0000 CF93      		push r28
 287               	.LCFI4:
 288               		.cfi_def_cfa_offset 3
 289               		.cfi_offset 28, -2
 290 0002 DF93      		push r29
 291               	.LCFI5:
 292               		.cfi_def_cfa_offset 4
 293               		.cfi_offset 29, -3
 294               	/* prologue: function */
 295               	/* frame size = 0 */
 296               	/* stack size = 2 */
 297               	.L__stack_usage = 2
 298               	.LVL16:
 299 0004 E0E0      		ldi r30,lo8(matrizJugador1)
 300 0006 F0E0      		ldi r31,hi8(matrizJugador1)
 301 0008 60E0      		ldi r22,lo8(display_rgb)
 302 000a 70E0      		ldi r23,hi8(display_rgb)
 303 000c C0E0      		ldi r28,lo8(matrizJugador1+192)
 304 000e D0E0      		ldi r29,hi8(matrizJugador1+192)
 305 0010 00C0      		rjmp .L22
 306               	.LVL17:
 307               	.L23:
 308               	.LBB16:
 309               	.LBB17:
 311:../src/main.c **** 	for (int i=0; i<=7; i++)
 312:../src/main.c **** 		for (int j=0; j<=7; j++)
 313:../src/main.c **** 			display_rgb[i][j] = matrizJugador1[i][j];
 310               		.loc 1 313 0 discriminator 3
 311 0012 2191      		ld r18,Z+
 312 0014 3191      		ld r19,Z+
 313 0016 4191      		ld r20,Z+
 314 0018 2D93      		st X+,r18
 315 001a 3D93      		st X+,r19
 316 001c 4D93      		st X+,r20
 317               	.LVL18:
 312:../src/main.c **** 			display_rgb[i][j] = matrizJugador1[i][j];
 318               		.loc 1 312 0 discriminator 3
 319 001e E817      		cp r30,r24
 320 0020 F907      		cpc r31,r25
 321 0022 01F4      		brne .L23
 322 0024 685E      		subi r22,-24
 323 0026 7F4F      		sbci r23,-1
 324 0028 FC01      		movw r30,r24
 325               	.LBE17:
 311:../src/main.c **** 	for (int i=0; i<=7; i++)
 326               		.loc 1 311 0 discriminator 2
 327 002a C817      		cp r28,r24
 328 002c D907      		cpc r29,r25
 329 002e 01F0      		breq .L21
 330               	.L22:
 331               	.LVL19:
 332 0030 CF01      		movw r24,r30
 333 0032 4896      		adiw r24,24
 334               	.LBE16:
 310:../src/main.c **** 	for (int i=0; i<=7; i++)
 335               		.loc 1 310 0 discriminator 1
 336 0034 DB01      		movw r26,r22
 337 0036 00C0      		rjmp .L23
 338               	.LVL20:
 339               	.L21:
 340               	/* epilogue start */
 314:../src/main.c **** }
 341               		.loc 1 314 0
 342 0038 DF91      		pop r29
 343 003a CF91      		pop r28
 344 003c 0895      		ret
 345               		.cfi_endproc
 346               	.LFE78:
 348               		.section	.text.copyArrayOf2,"ax",@progbits
 349               	.global	copyArrayOf2
 351               	copyArrayOf2:
 352               	.LFB79:
 315:../src/main.c **** 
 316:../src/main.c **** /* Copies matrizJugador2 in display_rgb.*/
 317:../src/main.c **** void copyArrayOf2(void)
 318:../src/main.c **** {
 353               		.loc 1 318 0
 354               		.cfi_startproc
 355 0000 CF93      		push r28
 356               	.LCFI6:
 357               		.cfi_def_cfa_offset 3
 358               		.cfi_offset 28, -2
 359 0002 DF93      		push r29
 360               	.LCFI7:
 361               		.cfi_def_cfa_offset 4
 362               		.cfi_offset 29, -3
 363               	/* prologue: function */
 364               	/* frame size = 0 */
 365               	/* stack size = 2 */
 366               	.L__stack_usage = 2
 367               	.LVL21:
 368 0004 E0E0      		ldi r30,lo8(matrizJugador2)
 369 0006 F0E0      		ldi r31,hi8(matrizJugador2)
 370 0008 60E0      		ldi r22,lo8(display_rgb)
 371 000a 70E0      		ldi r23,hi8(display_rgb)
 372 000c C0E0      		ldi r28,lo8(matrizJugador2+192)
 373 000e D0E0      		ldi r29,hi8(matrizJugador2+192)
 374 0010 00C0      		rjmp .L27
 375               	.LVL22:
 376               	.L28:
 377               	.LBB18:
 378               	.LBB19:
 319:../src/main.c **** 	for (int i=0; i<=7; i++)
 320:../src/main.c **** 		for (int j=0; j<=7; j++)
 321:../src/main.c **** 			display_rgb[i][j] = matrizJugador2[i][j];
 379               		.loc 1 321 0 discriminator 3
 380 0012 2191      		ld r18,Z+
 381 0014 3191      		ld r19,Z+
 382 0016 4191      		ld r20,Z+
 383 0018 2D93      		st X+,r18
 384 001a 3D93      		st X+,r19
 385 001c 4D93      		st X+,r20
 386               	.LVL23:
 320:../src/main.c **** 			display_rgb[i][j] = matrizJugador2[i][j];
 387               		.loc 1 320 0 discriminator 3
 388 001e E817      		cp r30,r24
 389 0020 F907      		cpc r31,r25
 390 0022 01F4      		brne .L28
 391 0024 685E      		subi r22,-24
 392 0026 7F4F      		sbci r23,-1
 393 0028 FC01      		movw r30,r24
 394               	.LBE19:
 319:../src/main.c **** 	for (int i=0; i<=7; i++)
 395               		.loc 1 319 0 discriminator 2
 396 002a C817      		cp r28,r24
 397 002c D907      		cpc r29,r25
 398 002e 01F0      		breq .L26
 399               	.L27:
 400               	.LVL24:
 401 0030 CF01      		movw r24,r30
 402 0032 4896      		adiw r24,24
 403               	.LBE18:
 318:../src/main.c **** 	for (int i=0; i<=7; i++)
 404               		.loc 1 318 0 discriminator 1
 405 0034 DB01      		movw r26,r22
 406 0036 00C0      		rjmp .L28
 407               	.LVL25:
 408               	.L26:
 409               	/* epilogue start */
 322:../src/main.c **** }
 410               		.loc 1 322 0
 411 0038 DF91      		pop r29
 412 003a CF91      		pop r28
 413 003c 0895      		ret
 414               		.cfi_endproc
 415               	.LFE79:
 417               		.section	.text.scanSubmarinos1,"ax",@progbits
 418               	.global	scanSubmarinos1
 420               	scanSubmarinos1:
 421               	.LFB82:
 323:../src/main.c **** 
 324:../src/main.c **** /* Takes coordinates x, y from 0:7 as arguments and shoots player1 there.*/
 325:../src/main.c **** void shootPlayer1(int8_t x, int8_t y)
 326:../src/main.c **** {
 327:../src/main.c **** 	matrizJugador1[x][y] = Agua;
 328:../src/main.c **** 	scanSubmarinos1(x, y);
 329:../src/main.c **** 	scanCargueros1(x, y);
 330:../src/main.c **** }
 331:../src/main.c **** 
 332:../src/main.c **** /* Takes coordinates x, y from 0:7 as arguments and shoots player2 there.*/
 333:../src/main.c **** void shootPlayer2(int8_t x, int8_t y)
 334:../src/main.c **** {
 335:../src/main.c **** 	matrizJugador2[x][y] = Agua;
 336:../src/main.c **** 	scanSubmarinos2(x, y);
 337:../src/main.c **** 	scanCargueros2(x, y);
 338:../src/main.c **** }
 339:../src/main.c **** 
 340:../src/main.c **** /* Takes coordinates x, y from 0:7 as arguments and scans Submarinos of player1.
 341:../src/main.c **** Sets MatrizJugador1 corresponding to the existance of a ship on the coordinates.*/
 342:../src/main.c **** void scanSubmarinos1(int8_t x, int8_t y)
 343:../src/main.c **** {
 422               		.loc 1 343 0
 423               		.cfi_startproc
 424               	.LVL26:
 425 0000 AF92      		push r10
 426               	.LCFI8:
 427               		.cfi_def_cfa_offset 3
 428               		.cfi_offset 10, -2
 429 0002 BF92      		push r11
 430               	.LCFI9:
 431               		.cfi_def_cfa_offset 4
 432               		.cfi_offset 11, -3
 433 0004 CF92      		push r12
 434               	.LCFI10:
 435               		.cfi_def_cfa_offset 5
 436               		.cfi_offset 12, -4
 437 0006 DF92      		push r13
 438               	.LCFI11:
 439               		.cfi_def_cfa_offset 6
 440               		.cfi_offset 13, -5
 441 0008 EF92      		push r14
 442               	.LCFI12:
 443               		.cfi_def_cfa_offset 7
 444               		.cfi_offset 14, -6
 445 000a FF92      		push r15
 446               	.LCFI13:
 447               		.cfi_def_cfa_offset 8
 448               		.cfi_offset 15, -7
 449 000c 0F93      		push r16
 450               	.LCFI14:
 451               		.cfi_def_cfa_offset 9
 452               		.cfi_offset 16, -8
 453 000e 1F93      		push r17
 454               	.LCFI15:
 455               		.cfi_def_cfa_offset 10
 456               		.cfi_offset 17, -9
 457 0010 CF93      		push r28
 458               	.LCFI16:
 459               		.cfi_def_cfa_offset 11
 460               		.cfi_offset 28, -10
 461 0012 DF93      		push r29
 462               	.LCFI17:
 463               		.cfi_def_cfa_offset 12
 464               		.cfi_offset 29, -11
 465               	/* prologue: function */
 466               	/* frame size = 0 */
 467               	/* stack size = 10 */
 468               	.L__stack_usage = 10
 469               	.LVL27:
 470 0014 E0E0      		ldi r30,lo8(submarinosJugador1)
 471 0016 F0E0      		ldi r31,hi8(submarinosJugador1)
 472 0018 C0E0      		ldi r28,lo8(submarinosJugador1+9)
 473 001a D0E0      		ldi r29,hi8(submarinosJugador1+9)
 474               	.LBB20:
 344:../src/main.c **** 	for(int i=0; i<=2; i++)
 345:../src/main.c **** 	{
 346:../src/main.c **** 		if ((submarinosJugador1[i].x0 == x) & (submarinosJugador1[i].y0 == y))
 475               		.loc 1 346 0
 476 001c 482F      		mov r20,r24
 477 001e 880F      		lsl r24
 478 0020 550B      		sbc r21,r21
 479 0022 062E      		mov __tmp_reg__,r22
 480 0024 000C      		lsl r0
 481 0026 770B      		sbc r23,r23
 482 0028 81E0      		ldi r24,lo8(1)
 483               	.LVL28:
 484 002a F12C      		mov r15,__zero_reg__
 347:../src/main.c **** 		{
 348:../src/main.c **** 			submarinosJugador1[i].boolDisparado = 1;
 349:../src/main.c **** 			matrizJugador1[x][y] = Hundido;
 485               		.loc 1 349 0
 486 002c DB01      		movw r26,r22
 487 002e AA0F      		lsl r26
 488 0030 BB1F      		rol r27
 489 0032 9D01      		movw r18,r26
 490 0034 260F      		add r18,r22
 491 0036 371F      		adc r19,r23
 492 0038 DA01      		movw r26,r20
 493 003a AA0F      		lsl r26
 494 003c BB1F      		rol r27
 495 003e A40F      		add r26,r20
 496 0040 B51F      		adc r27,r21
 497 0042 AA0F      		lsl r26
 498 0044 BB1F      		rol r27
 499 0046 AA0F      		lsl r26
 500 0048 BB1F      		rol r27
 501 004a AA0F      		lsl r26
 502 004c BB1F      		rol r27
 503 004e A20F      		add r26,r18
 504 0050 B31F      		adc r27,r19
 505 0052 9D01      		movw r18,r26
 506 0054 2050      		subi r18,lo8(-(matrizJugador1))
 507 0056 3040      		sbci r19,hi8(-(matrizJugador1))
 508 0058 5901      		movw r10,r18
 509               	.LVL29:
 510               	.L35:
 511 005a 8F01      		movw r16,r30
 346:../src/main.c **** 		{
 512               		.loc 1 346 0
 513 005c 2081      		ld r18,Z
 514 005e 30E0      		ldi r19,0
 515 0060 982F      		mov r25,r24
 516 0062 2417      		cp r18,r20
 517 0064 3507      		cpc r19,r21
 518 0066 01F0      		breq .L33
 519 0068 9F2D      		mov r25,r15
 520               	.L33:
 521 006a 9923      		tst r25
 522 006c 01F0      		breq .L32
 523 006e D801      		movw r26,r16
 524 0070 1196      		adiw r26,1
 525 0072 2C91      		ld r18,X
 526 0074 30E0      		ldi r19,0
 527 0076 982F      		mov r25,r24
 528 0078 2617      		cp r18,r22
 529 007a 3707      		cpc r19,r23
 530 007c 01F0      		breq .L34
 531 007e 9F2D      		mov r25,r15
 532               	.L34:
 533 0080 9923      		tst r25
 534 0082 01F0      		breq .L32
 348:../src/main.c **** 			matrizJugador1[x][y] = Hundido;
 535               		.loc 1 348 0
 536 0084 D801      		movw r26,r16
 537 0086 1296      		adiw r26,2
 538 0088 8C93      		st X,r24
 539               		.loc 1 349 0
 540 008a C090 0000 		lds r12,Hundido
 541 008e D090 0000 		lds r13,Hundido+1
 542 0092 E090 0000 		lds r14,Hundido+2
 543 0096 D501      		movw r26,r10
 544 0098 CD92      		st X+,r12
 545 009a DD92      		st X+,r13
 546 009c EC92      		st X,r14
 547               	.L32:
 548 009e 3396      		adiw r30,3
 344:../src/main.c **** 	{
 549               		.loc 1 344 0 discriminator 2
 550 00a0 EC17      		cp r30,r28
 551 00a2 FD07      		cpc r31,r29
 552 00a4 01F4      		brne .L35
 553               	/* epilogue start */
 554               	.LBE20:
 350:../src/main.c **** 		}
 351:../src/main.c **** 	}
 352:../src/main.c **** }
 555               		.loc 1 352 0
 556 00a6 DF91      		pop r29
 557 00a8 CF91      		pop r28
 558 00aa 1F91      		pop r17
 559 00ac 0F91      		pop r16
 560 00ae FF90      		pop r15
 561 00b0 EF90      		pop r14
 562 00b2 DF90      		pop r13
 563 00b4 CF90      		pop r12
 564 00b6 BF90      		pop r11
 565 00b8 AF90      		pop r10
 566 00ba 0895      		ret
 567               		.cfi_endproc
 568               	.LFE82:
 570               		.section	.text.scanSubmarinos2,"ax",@progbits
 571               	.global	scanSubmarinos2
 573               	scanSubmarinos2:
 574               	.LFB83:
 353:../src/main.c **** 
 354:../src/main.c **** /* Takes coordinates x, y from 0:7 as arguments and scans Submarinos of player2.
 355:../src/main.c **** Sets MatrizJugador2 corresponding to the existance of a ship on the coordinates.*/
 356:../src/main.c **** void scanSubmarinos2(int8_t x, int8_t y)
 357:../src/main.c **** {
 575               		.loc 1 357 0
 576               		.cfi_startproc
 577               	.LVL30:
 578 0000 AF92      		push r10
 579               	.LCFI18:
 580               		.cfi_def_cfa_offset 3
 581               		.cfi_offset 10, -2
 582 0002 BF92      		push r11
 583               	.LCFI19:
 584               		.cfi_def_cfa_offset 4
 585               		.cfi_offset 11, -3
 586 0004 CF92      		push r12
 587               	.LCFI20:
 588               		.cfi_def_cfa_offset 5
 589               		.cfi_offset 12, -4
 590 0006 DF92      		push r13
 591               	.LCFI21:
 592               		.cfi_def_cfa_offset 6
 593               		.cfi_offset 13, -5
 594 0008 EF92      		push r14
 595               	.LCFI22:
 596               		.cfi_def_cfa_offset 7
 597               		.cfi_offset 14, -6
 598 000a FF92      		push r15
 599               	.LCFI23:
 600               		.cfi_def_cfa_offset 8
 601               		.cfi_offset 15, -7
 602 000c 0F93      		push r16
 603               	.LCFI24:
 604               		.cfi_def_cfa_offset 9
 605               		.cfi_offset 16, -8
 606 000e 1F93      		push r17
 607               	.LCFI25:
 608               		.cfi_def_cfa_offset 10
 609               		.cfi_offset 17, -9
 610 0010 CF93      		push r28
 611               	.LCFI26:
 612               		.cfi_def_cfa_offset 11
 613               		.cfi_offset 28, -10
 614 0012 DF93      		push r29
 615               	.LCFI27:
 616               		.cfi_def_cfa_offset 12
 617               		.cfi_offset 29, -11
 618               	/* prologue: function */
 619               	/* frame size = 0 */
 620               	/* stack size = 10 */
 621               	.L__stack_usage = 10
 622               	.LVL31:
 623 0014 E0E0      		ldi r30,lo8(submarinosJugador2)
 624 0016 F0E0      		ldi r31,hi8(submarinosJugador2)
 625 0018 C0E0      		ldi r28,lo8(submarinosJugador2+9)
 626 001a D0E0      		ldi r29,hi8(submarinosJugador2+9)
 627               	.LBB21:
 358:../src/main.c **** 	for(int i=0; i<=2; i++)
 359:../src/main.c **** 	{
 360:../src/main.c **** 		if ((submarinosJugador2[i].x0 == x) & (submarinosJugador2[i].y0 == y))
 628               		.loc 1 360 0
 629 001c 482F      		mov r20,r24
 630 001e 880F      		lsl r24
 631 0020 550B      		sbc r21,r21
 632 0022 062E      		mov __tmp_reg__,r22
 633 0024 000C      		lsl r0
 634 0026 770B      		sbc r23,r23
 635 0028 81E0      		ldi r24,lo8(1)
 636               	.LVL32:
 637 002a F12C      		mov r15,__zero_reg__
 361:../src/main.c **** 		{
 362:../src/main.c **** 			submarinosJugador2[i].boolDisparado = 1;
 363:../src/main.c **** 			matrizJugador2[x][y] = Hundido;
 638               		.loc 1 363 0
 639 002c DB01      		movw r26,r22
 640 002e AA0F      		lsl r26
 641 0030 BB1F      		rol r27
 642 0032 9D01      		movw r18,r26
 643 0034 260F      		add r18,r22
 644 0036 371F      		adc r19,r23
 645 0038 DA01      		movw r26,r20
 646 003a AA0F      		lsl r26
 647 003c BB1F      		rol r27
 648 003e A40F      		add r26,r20
 649 0040 B51F      		adc r27,r21
 650 0042 AA0F      		lsl r26
 651 0044 BB1F      		rol r27
 652 0046 AA0F      		lsl r26
 653 0048 BB1F      		rol r27
 654 004a AA0F      		lsl r26
 655 004c BB1F      		rol r27
 656 004e A20F      		add r26,r18
 657 0050 B31F      		adc r27,r19
 658 0052 9D01      		movw r18,r26
 659 0054 2050      		subi r18,lo8(-(matrizJugador2))
 660 0056 3040      		sbci r19,hi8(-(matrizJugador2))
 661 0058 5901      		movw r10,r18
 662               	.LVL33:
 663               	.L41:
 664 005a 8F01      		movw r16,r30
 360:../src/main.c **** 		{
 665               		.loc 1 360 0
 666 005c 2081      		ld r18,Z
 667 005e 30E0      		ldi r19,0
 668 0060 982F      		mov r25,r24
 669 0062 2417      		cp r18,r20
 670 0064 3507      		cpc r19,r21
 671 0066 01F0      		breq .L39
 672 0068 9F2D      		mov r25,r15
 673               	.L39:
 674 006a 9923      		tst r25
 675 006c 01F0      		breq .L38
 676 006e D801      		movw r26,r16
 677 0070 1196      		adiw r26,1
 678 0072 2C91      		ld r18,X
 679 0074 30E0      		ldi r19,0
 680 0076 982F      		mov r25,r24
 681 0078 2617      		cp r18,r22
 682 007a 3707      		cpc r19,r23
 683 007c 01F0      		breq .L40
 684 007e 9F2D      		mov r25,r15
 685               	.L40:
 686 0080 9923      		tst r25
 687 0082 01F0      		breq .L38
 362:../src/main.c **** 			matrizJugador2[x][y] = Hundido;
 688               		.loc 1 362 0
 689 0084 D801      		movw r26,r16
 690 0086 1296      		adiw r26,2
 691 0088 8C93      		st X,r24
 692               		.loc 1 363 0
 693 008a C090 0000 		lds r12,Hundido
 694 008e D090 0000 		lds r13,Hundido+1
 695 0092 E090 0000 		lds r14,Hundido+2
 696 0096 D501      		movw r26,r10
 697 0098 CD92      		st X+,r12
 698 009a DD92      		st X+,r13
 699 009c EC92      		st X,r14
 700               	.L38:
 701 009e 3396      		adiw r30,3
 358:../src/main.c **** 	{
 702               		.loc 1 358 0 discriminator 2
 703 00a0 EC17      		cp r30,r28
 704 00a2 FD07      		cpc r31,r29
 705 00a4 01F4      		brne .L41
 706               	/* epilogue start */
 707               	.LBE21:
 364:../src/main.c **** 		}
 365:../src/main.c **** 	}
 366:../src/main.c **** }
 708               		.loc 1 366 0
 709 00a6 DF91      		pop r29
 710 00a8 CF91      		pop r28
 711 00aa 1F91      		pop r17
 712 00ac 0F91      		pop r16
 713 00ae FF90      		pop r15
 714 00b0 EF90      		pop r14
 715 00b2 DF90      		pop r13
 716 00b4 CF90      		pop r12
 717 00b6 BF90      		pop r11
 718 00b8 AF90      		pop r10
 719 00ba 0895      		ret
 720               		.cfi_endproc
 721               	.LFE83:
 723               		.section	.text.scanCargueros1,"ax",@progbits
 724               	.global	scanCargueros1
 726               	scanCargueros1:
 727               	.LFB84:
 367:../src/main.c **** 
 368:../src/main.c **** /* Takes coordinates x, y from 0:7 as arguments and scans Cargueros of player1.
 369:../src/main.c **** Sets MatrizJugador1 corresponding to the existance of a ship on the coordinates.*/
 370:../src/main.c **** void scanCargueros1(int8_t x, int8_t y)
 371:../src/main.c **** {
 728               		.loc 1 371 0
 729               		.cfi_startproc
 730               	.LVL34:
 731 0000 4F92      		push r4
 732               	.LCFI28:
 733               		.cfi_def_cfa_offset 3
 734               		.cfi_offset 4, -2
 735 0002 5F92      		push r5
 736               	.LCFI29:
 737               		.cfi_def_cfa_offset 4
 738               		.cfi_offset 5, -3
 739 0004 6F92      		push r6
 740               	.LCFI30:
 741               		.cfi_def_cfa_offset 5
 742               		.cfi_offset 6, -4
 743 0006 7F92      		push r7
 744               	.LCFI31:
 745               		.cfi_def_cfa_offset 6
 746               		.cfi_offset 7, -5
 747 0008 8F92      		push r8
 748               	.LCFI32:
 749               		.cfi_def_cfa_offset 7
 750               		.cfi_offset 8, -6
 751 000a AF92      		push r10
 752               	.LCFI33:
 753               		.cfi_def_cfa_offset 8
 754               		.cfi_offset 10, -7
 755 000c BF92      		push r11
 756               	.LCFI34:
 757               		.cfi_def_cfa_offset 9
 758               		.cfi_offset 11, -8
 759 000e CF92      		push r12
 760               	.LCFI35:
 761               		.cfi_def_cfa_offset 10
 762               		.cfi_offset 12, -9
 763 0010 DF92      		push r13
 764               	.LCFI36:
 765               		.cfi_def_cfa_offset 11
 766               		.cfi_offset 13, -10
 767 0012 EF92      		push r14
 768               	.LCFI37:
 769               		.cfi_def_cfa_offset 12
 770               		.cfi_offset 14, -11
 771 0014 FF92      		push r15
 772               	.LCFI38:
 773               		.cfi_def_cfa_offset 13
 774               		.cfi_offset 15, -12
 775 0016 0F93      		push r16
 776               	.LCFI39:
 777               		.cfi_def_cfa_offset 14
 778               		.cfi_offset 16, -13
 779 0018 1F93      		push r17
 780               	.LCFI40:
 781               		.cfi_def_cfa_offset 15
 782               		.cfi_offset 17, -14
 783 001a CF93      		push r28
 784               	.LCFI41:
 785               		.cfi_def_cfa_offset 16
 786               		.cfi_offset 28, -15
 787 001c DF93      		push r29
 788               	.LCFI42:
 789               		.cfi_def_cfa_offset 17
 790               		.cfi_offset 29, -16
 791               	/* prologue: function */
 792               	/* frame size = 0 */
 793               	/* stack size = 15 */
 794               	.L__stack_usage = 15
 795               	.LVL35:
 796 001e E0E0      		ldi r30,lo8(carguerosJugador1)
 797 0020 F0E0      		ldi r31,hi8(carguerosJugador1)
 798 0022 0F2E      		mov __tmp_reg__,r31
 799 0024 F0E0      		ldi r31,lo8(carguerosJugador1+12)
 800 0026 EF2E      		mov r14,r31
 801 0028 F0E0      		ldi r31,hi8(carguerosJugador1+12)
 802 002a FF2E      		mov r15,r31
 803 002c F02D      		mov r31,__tmp_reg__
 804               	.LBB22:
 372:../src/main.c **** 	for(int i=0; i<=1; i++)
 373:../src/main.c **** 	{
 374:../src/main.c **** 		if ((carguerosJugador1[i].x0 == x) & (carguerosJugador1[i].y0 == y))
 805               		.loc 1 374 0
 806 002e 082E      		mov __tmp_reg__,r24
 807 0030 000C      		lsl r0
 808 0032 990B      		sbc r25,r25
 809 0034 062E      		mov __tmp_reg__,r22
 810 0036 000C      		lsl r0
 811 0038 770B      		sbc r23,r23
 812 003a BB24      		clr r11
 813 003c B394      		inc r11
 814 003e A12C      		mov r10,__zero_reg__
 375:../src/main.c **** 		{
 376:../src/main.c **** 			carguerosJugador1[i].boolDisparado0 = 1;
 377:../src/main.c **** 			if ((carguerosJugador1[i].boolDisparado0 == 1) & (carguerosJugador1[i].boolDisparado1 == 1))
 378:../src/main.c **** 			{
 379:../src/main.c **** 				matrizJugador1[carguerosJugador1[i].x0][carguerosJugador1[i].y0] = Hundido;
 380:../src/main.c **** 				matrizJugador1[carguerosJugador1[i].x1][carguerosJugador1[i].y1] = Hundido;
 381:../src/main.c **** 			}
 382:../src/main.c **** 			else
 383:../src/main.c **** 				matrizJugador1[x][y] = Danado;
 384:../src/main.c **** 		}
 385:../src/main.c **** 		else if ((carguerosJugador1[i].x1 == x) & (carguerosJugador1[i].y1 == y))
 386:../src/main.c **** 		{
 387:../src/main.c **** 			carguerosJugador1[i].boolDisparado1 = 1;
 388:../src/main.c **** 			if ((carguerosJugador1[i].boolDisparado0 == 1) & (carguerosJugador1[i].boolDisparado1 == 1))
 389:../src/main.c **** 			{
 390:../src/main.c **** 				matrizJugador1[carguerosJugador1[i].x0][carguerosJugador1[i].y0] = Hundido;
 391:../src/main.c **** 				matrizJugador1[carguerosJugador1[i].x1][carguerosJugador1[i].y1] = Hundido;
 392:../src/main.c **** 			}
 393:../src/main.c **** 			else
 394:../src/main.c **** 				matrizJugador1[x][y] = Danado;
 815               		.loc 1 394 0
 816 0040 9B01      		movw r18,r22
 817 0042 220F      		lsl r18
 818 0044 331F      		rol r19
 819 0046 A901      		movw r20,r18
 820 0048 460F      		add r20,r22
 821 004a 571F      		adc r21,r23
 822 004c 9C01      		movw r18,r24
 823 004e 220F      		lsl r18
 824 0050 331F      		rol r19
 825 0052 280F      		add r18,r24
 826 0054 391F      		adc r19,r25
 827 0056 220F      		lsl r18
 828 0058 331F      		rol r19
 829 005a 220F      		lsl r18
 830 005c 331F      		rol r19
 831 005e 220F      		lsl r18
 832 0060 331F      		rol r19
 833 0062 240F      		add r18,r20
 834 0064 351F      		adc r19,r21
 835 0066 A901      		movw r20,r18
 836 0068 4050      		subi r20,lo8(-(matrizJugador1))
 837 006a 5040      		sbci r21,hi8(-(matrizJugador1))
 838 006c 2A01      		movw r4,r20
 839               	.LVL36:
 840               	.L52:
 841 006e EF01      		movw r28,r30
 374:../src/main.c **** 		{
 842               		.loc 1 374 0
 843 0070 2081      		ld r18,Z
 844 0072 30E0      		ldi r19,0
 845 0074 4181      		ldd r20,Z+1
 846 0076 50E0      		ldi r21,0
 847 0078 1B2D      		mov r17,r11
 848 007a 2817      		cp r18,r24
 849 007c 3907      		cpc r19,r25
 850 007e 01F0      		breq .L45
 851 0080 1A2D      		mov r17,r10
 852               	.L45:
 853 0082 1123      		tst r17
 854 0084 01F4      		brne .+2
 855 0086 00C0      		rjmp .L44
 856 0088 1B2D      		mov r17,r11
 857 008a 4617      		cp r20,r22
 858 008c 5707      		cpc r21,r23
 859 008e 01F0      		breq .L46
 860 0090 1A2D      		mov r17,r10
 861               	.L46:
 862 0092 1123      		tst r17
 863 0094 01F4      		brne .+2
 864 0096 00C0      		rjmp .L44
 376:../src/main.c **** 			if ((carguerosJugador1[i].boolDisparado0 == 1) & (carguerosJugador1[i].boolDisparado1 == 1))
 865               		.loc 1 376 0
 866 0098 BA82      		std Y+2,r11
 377:../src/main.c **** 			{
 867               		.loc 1 377 0
 868 009a 1D81      		ldd r17,Y+5
 869 009c 1130      		cpi r17,lo8(1)
 870 009e 01F4      		brne .L47
 379:../src/main.c **** 				matrizJugador1[carguerosJugador1[i].x1][carguerosJugador1[i].y1] = Hundido;
 871               		.loc 1 379 0
 872 00a0 8A01      		movw r16,r20
 873 00a2 000F      		lsl r16
 874 00a4 111F      		rol r17
 875 00a6 400F      		add r20,r16
 876 00a8 511F      		adc r21,r17
 877 00aa 8901      		movw r16,r18
 878 00ac 000F      		lsl r16
 879 00ae 111F      		rol r17
 880 00b0 200F      		add r18,r16
 881 00b2 311F      		adc r19,r17
 882 00b4 220F      		lsl r18
 883 00b6 331F      		rol r19
 884 00b8 220F      		lsl r18
 885 00ba 331F      		rol r19
 886 00bc 220F      		lsl r18
 887 00be 331F      		rol r19
 888 00c0 420F      		add r20,r18
 889 00c2 531F      		adc r21,r19
 890 00c4 4050      		subi r20,lo8(-(matrizJugador1))
 891 00c6 5040      		sbci r21,hi8(-(matrizJugador1))
 892 00c8 6090 0000 		lds r6,Hundido
 893 00cc 7090 0000 		lds r7,Hundido+1
 894 00d0 8090 0000 		lds r8,Hundido+2
 895 00d4 DA01      		movw r26,r20
 896 00d6 6D92      		st X+,r6
 897 00d8 7D92      		st X+,r7
 898 00da 8C92      		st X,r8
 380:../src/main.c **** 			}
 899               		.loc 1 380 0
 900 00dc 4C81      		ldd r20,Y+4
 901 00de 50E0      		ldi r21,0
 902 00e0 2B81      		ldd r18,Y+3
 903 00e2 30E0      		ldi r19,0
 904 00e4 EA01      		movw r28,r20
 905 00e6 CC0F      		lsl r28
 906 00e8 DD1F      		rol r29
 907 00ea 4C0F      		add r20,r28
 908 00ec 5D1F      		adc r21,r29
 909 00ee E901      		movw r28,r18
 910 00f0 CC0F      		lsl r28
 911 00f2 DD1F      		rol r29
 912 00f4 C20F      		add r28,r18
 913 00f6 D31F      		adc r29,r19
 914 00f8 CC0F      		lsl r28
 915 00fa DD1F      		rol r29
 916 00fc CC0F      		lsl r28
 917 00fe DD1F      		rol r29
 918 0100 CC0F      		lsl r28
 919 0102 DD1F      		rol r29
 920 0104 4C0F      		add r20,r28
 921 0106 5D1F      		adc r21,r29
 922 0108 EA01      		movw r28,r20
 923 010a C050      		subi r28,lo8(-(matrizJugador1))
 924 010c D040      		sbci r29,hi8(-(matrizJugador1))
 925 010e 6882      		st Y,r6
 926 0110 7982      		std Y+1,r7
 927 0112 8A82      		std Y+2,r8
 928 0114 00C0      		rjmp .L48
 929               	.L47:
 383:../src/main.c **** 		}
 930               		.loc 1 383 0
 931 0116 2091 0000 		lds r18,Danado
 932 011a 3091 0000 		lds r19,Danado+1
 933 011e 4091 0000 		lds r20,Danado+2
 934 0122 D201      		movw r26,r4
 935 0124 2D93      		st X+,r18
 936 0126 3D93      		st X+,r19
 937 0128 4C93      		st X,r20
 938 012a 00C0      		rjmp .L48
 939               	.L44:
 385:../src/main.c **** 		{
 940               		.loc 1 385 0
 941 012c 0B81      		ldd r16,Y+3
 942 012e 10E0      		ldi r17,0
 943 0130 CC80      		ldd r12,Y+4
 944 0132 D12C      		mov r13,__zero_reg__
 945 0134 8B2C      		mov r8,r11
 946 0136 8017      		cp r24,r16
 947 0138 9107      		cpc r25,r17
 948 013a 01F0      		breq .L49
 949 013c 8A2C      		mov r8,r10
 950               	.L49:
 951 013e 8820      		tst r8
 952 0140 01F4      		brne .+2
 953 0142 00C0      		rjmp .L48
 954 0144 8B2C      		mov r8,r11
 955 0146 6C15      		cp r22,r12
 956 0148 7D05      		cpc r23,r13
 957 014a 01F0      		breq .L50
 958 014c 8A2C      		mov r8,r10
 959               	.L50:
 960 014e 8820      		tst r8
 961 0150 01F4      		brne .+2
 962 0152 00C0      		rjmp .L48
 387:../src/main.c **** 			if ((carguerosJugador1[i].boolDisparado0 == 1) & (carguerosJugador1[i].boolDisparado1 == 1))
 963               		.loc 1 387 0
 964 0154 BD82      		std Y+5,r11
 388:../src/main.c **** 			{
 965               		.loc 1 388 0
 966 0156 CA81      		ldd r28,Y+2
 967 0158 C130      		cpi r28,lo8(1)
 968 015a 01F4      		brne .L51
 390:../src/main.c **** 				matrizJugador1[carguerosJugador1[i].x1][carguerosJugador1[i].y1] = Hundido;
 969               		.loc 1 390 0
 970 015c EA01      		movw r28,r20
 971 015e CC0F      		lsl r28
 972 0160 DD1F      		rol r29
 973 0162 4C0F      		add r20,r28
 974 0164 5D1F      		adc r21,r29
 975 0166 E901      		movw r28,r18
 976 0168 CC0F      		lsl r28
 977 016a DD1F      		rol r29
 978 016c C20F      		add r28,r18
 979 016e D31F      		adc r29,r19
 980 0170 CC0F      		lsl r28
 981 0172 DD1F      		rol r29
 982 0174 CC0F      		lsl r28
 983 0176 DD1F      		rol r29
 984 0178 CC0F      		lsl r28
 985 017a DD1F      		rol r29
 986 017c 4C0F      		add r20,r28
 987 017e 5D1F      		adc r21,r29
 988 0180 EA01      		movw r28,r20
 989 0182 C050      		subi r28,lo8(-(matrizJugador1))
 990 0184 D040      		sbci r29,hi8(-(matrizJugador1))
 991 0186 2091 0000 		lds r18,Hundido
 992 018a 3091 0000 		lds r19,Hundido+1
 993 018e 4091 0000 		lds r20,Hundido+2
 994 0192 2883      		st Y,r18
 995 0194 3983      		std Y+1,r19
 996 0196 4A83      		std Y+2,r20
 391:../src/main.c **** 			}
 997               		.loc 1 391 0
 998 0198 E601      		movw r28,r12
 999 019a CC0F      		lsl r28
 1000 019c DD1F      		rol r29
 1001 019e CC0E      		add r12,r28
 1002 01a0 DD1E      		adc r13,r29
 1003 01a2 E801      		movw r28,r16
 1004 01a4 CC0F      		lsl r28
 1005 01a6 DD1F      		rol r29
 1006 01a8 C00F      		add r28,r16
 1007 01aa D11F      		adc r29,r17
 1008 01ac CC0F      		lsl r28
 1009 01ae DD1F      		rol r29
 1010 01b0 CC0F      		lsl r28
 1011 01b2 DD1F      		rol r29
 1012 01b4 CC0F      		lsl r28
 1013 01b6 DD1F      		rol r29
 1014 01b8 CC0D      		add r28,r12
 1015 01ba DD1D      		adc r29,r13
 1016 01bc C050      		subi r28,lo8(-(matrizJugador1))
 1017 01be D040      		sbci r29,hi8(-(matrizJugador1))
 1018 01c0 2883      		st Y,r18
 1019 01c2 3983      		std Y+1,r19
 1020 01c4 4A83      		std Y+2,r20
 1021 01c6 00C0      		rjmp .L48
 1022               	.L51:
 1023               		.loc 1 394 0
 1024 01c8 2091 0000 		lds r18,Danado
 1025 01cc 3091 0000 		lds r19,Danado+1
 1026 01d0 4091 0000 		lds r20,Danado+2
 1027 01d4 D201      		movw r26,r4
 1028 01d6 2D93      		st X+,r18
 1029 01d8 3D93      		st X+,r19
 1030 01da 4C93      		st X,r20
 1031               	.L48:
 1032 01dc 3696      		adiw r30,6
 372:../src/main.c **** 	{
 1033               		.loc 1 372 0 discriminator 2
 1034 01de EE15      		cp r30,r14
 1035 01e0 FF05      		cpc r31,r15
 1036 01e2 01F0      		breq .+2
 1037 01e4 00C0      		rjmp .L52
 1038               	/* epilogue start */
 1039               	.LBE22:
 395:../src/main.c **** 		}
 396:../src/main.c **** 	}
 397:../src/main.c **** }
 1040               		.loc 1 397 0
 1041 01e6 DF91      		pop r29
 1042 01e8 CF91      		pop r28
 1043 01ea 1F91      		pop r17
 1044 01ec 0F91      		pop r16
 1045 01ee FF90      		pop r15
 1046 01f0 EF90      		pop r14
 1047 01f2 DF90      		pop r13
 1048 01f4 CF90      		pop r12
 1049 01f6 BF90      		pop r11
 1050 01f8 AF90      		pop r10
 1051 01fa 8F90      		pop r8
 1052 01fc 7F90      		pop r7
 1053 01fe 6F90      		pop r6
 1054 0200 5F90      		pop r5
 1055 0202 4F90      		pop r4
 1056 0204 0895      		ret
 1057               		.cfi_endproc
 1058               	.LFE84:
 1060               		.section	.text.shootPlayer1,"ax",@progbits
 1061               	.global	shootPlayer1
 1063               	shootPlayer1:
 1064               	.LFB80:
 326:../src/main.c **** 	matrizJugador1[x][y] = Agua;
 1065               		.loc 1 326 0
 1066               		.cfi_startproc
 1067               	.LVL37:
 1068 0000 CF93      		push r28
 1069               	.LCFI43:
 1070               		.cfi_def_cfa_offset 3
 1071               		.cfi_offset 28, -2
 1072 0002 DF93      		push r29
 1073               	.LCFI44:
 1074               		.cfi_def_cfa_offset 4
 1075               		.cfi_offset 29, -3
 1076               	/* prologue: function */
 1077               	/* frame size = 0 */
 1078               	/* stack size = 2 */
 1079               	.L__stack_usage = 2
 1080 0004 C82F      		mov r28,r24
 1081 0006 D62F      		mov r29,r22
 327:../src/main.c **** 	scanSubmarinos1(x, y);
 1082               		.loc 1 327 0
 1083 0008 E62F      		mov r30,r22
 1084 000a 062E      		mov __tmp_reg__,r22
 1085 000c 000C      		lsl r0
 1086 000e FF0B      		sbc r31,r31
 1087 0010 082E      		mov __tmp_reg__,r24
 1088 0012 000C      		lsl r0
 1089 0014 990B      		sbc r25,r25
 1090               	.LVL38:
 1091 0016 9F01      		movw r18,r30
 1092 0018 220F      		lsl r18
 1093 001a 331F      		rol r19
 1094 001c E20F      		add r30,r18
 1095 001e F31F      		adc r31,r19
 1096 0020 9C01      		movw r18,r24
 1097 0022 220F      		lsl r18
 1098 0024 331F      		rol r19
 1099 0026 820F      		add r24,r18
 1100 0028 931F      		adc r25,r19
 1101 002a 880F      		lsl r24
 1102 002c 991F      		rol r25
 1103 002e 880F      		lsl r24
 1104 0030 991F      		rol r25
 1105 0032 880F      		lsl r24
 1106 0034 991F      		rol r25
 1107 0036 E80F      		add r30,r24
 1108 0038 F91F      		adc r31,r25
 1109 003a E050      		subi r30,lo8(-(matrizJugador1))
 1110 003c F040      		sbci r31,hi8(-(matrizJugador1))
 1111 003e 8091 0000 		lds r24,Agua
 1112 0042 9091 0000 		lds r25,Agua+1
 1113 0046 A091 0000 		lds r26,Agua+2
 1114 004a 8083      		st Z,r24
 1115 004c 9183      		std Z+1,r25
 1116 004e A283      		std Z+2,r26
 328:../src/main.c **** 	scanCargueros1(x, y);
 1117               		.loc 1 328 0
 1118 0050 8C2F      		mov r24,r28
 1119 0052 0E94 0000 		call scanSubmarinos1
 1120               	.LVL39:
 329:../src/main.c **** }
 1121               		.loc 1 329 0
 1122 0056 6D2F      		mov r22,r29
 1123 0058 8C2F      		mov r24,r28
 1124 005a 0E94 0000 		call scanCargueros1
 1125               	.LVL40:
 1126               	/* epilogue start */
 330:../src/main.c **** 
 1127               		.loc 1 330 0
 1128 005e DF91      		pop r29
 1129               	.LVL41:
 1130 0060 CF91      		pop r28
 1131               	.LVL42:
 1132 0062 0895      		ret
 1133               		.cfi_endproc
 1134               	.LFE80:
 1136               		.section	.text.playPlayer2,"ax",@progbits
 1137               	.global	playPlayer2
 1139               	playPlayer2:
 1140               	.LFB74:
 193:../src/main.c **** 	// Actions to do only once per cycle
 1141               		.loc 1 193 0
 1142               		.cfi_startproc
 1143 0000 0F93      		push r16
 1144               	.LCFI45:
 1145               		.cfi_def_cfa_offset 3
 1146               		.cfi_offset 16, -2
 1147 0002 1F93      		push r17
 1148               	.LCFI46:
 1149               		.cfi_def_cfa_offset 4
 1150               		.cfi_offset 17, -3
 1151 0004 CF93      		push r28
 1152               	.LCFI47:
 1153               		.cfi_def_cfa_offset 5
 1154               		.cfi_offset 28, -4
 1155 0006 DF93      		push r29
 1156               	.LCFI48:
 1157               		.cfi_def_cfa_offset 6
 1158               		.cfi_offset 29, -5
 1159 0008 00D0      		rcall .
 1160               	.LCFI49:
 1161               		.cfi_def_cfa_offset 8
 1162 000a CDB7      		in r28,__SP_L__
 1163 000c DEB7      		in r29,__SP_H__
 1164               	.LCFI50:
 1165               		.cfi_def_cfa_register 28
 1166               	/* prologue: function */
 1167               	/* frame size = 2 */
 1168               	/* stack size = 6 */
 1169               	.L__stack_usage = 6
 195:../src/main.c **** 	
 1170               		.loc 1 195 0
 1171 000e 84E1      		ldi r24,lo8(20)
 1172 0010 90E0      		ldi r25,0
 1173 0012 9A83      		std Y+2,r25
 1174 0014 8983      		std Y+1,r24
 197:../src/main.c **** 	{
 1175               		.loc 1 197 0
 1176 0016 8091 0000 		lds r24,jButton
 1177 001a 8823      		tst r24
 1178 001c 01F4      		brne .+2
 1179 001e 00C0      		rjmp .L56
 203:../src/main.c **** 		}
 1180               		.loc 1 203 0
 1181 0020 04E1      		ldi r16,lo8(20)
 1182 0022 10E0      		ldi r17,0
 1183               	.L61:
 199:../src/main.c **** 		{
 1184               		.loc 1 199 0
 1185 0024 8981      		ldd r24,Y+1
 1186 0026 9A81      		ldd r25,Y+2
 1187 0028 892B      		or r24,r25
 1188 002a 01F4      		brne .L57
 201:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 1189               		.loc 1 201 0
 1190 002c 0E94 0000 		call copyArrayOf1
 1191               	.LVL43:
 202:../src/main.c **** 			gamePointerTilt = GAME_POINTER_SPEED;
 1192               		.loc 1 202 0
 1193 0030 E091 0000 		lds r30,yMovement
 1194 0034 F0E0      		ldi r31,0
 1195 0036 8091 0000 		lds r24,xMovement
 1196 003a 90E0      		ldi r25,0
 1197 003c 9F01      		movw r18,r30
 1198 003e 220F      		lsl r18
 1199 0040 331F      		rol r19
 1200 0042 E20F      		add r30,r18
 1201 0044 F31F      		adc r31,r19
 1202 0046 9C01      		movw r18,r24
 1203 0048 220F      		lsl r18
 1204 004a 331F      		rol r19
 1205 004c 820F      		add r24,r18
 1206 004e 931F      		adc r25,r19
 1207 0050 880F      		lsl r24
 1208 0052 991F      		rol r25
 1209 0054 880F      		lsl r24
 1210 0056 991F      		rol r25
 1211 0058 880F      		lsl r24
 1212 005a 991F      		rol r25
 1213 005c E80F      		add r30,r24
 1214 005e F91F      		adc r31,r25
 1215 0060 E050      		subi r30,lo8(-(display_rgb))
 1216 0062 F040      		sbci r31,hi8(-(display_rgb))
 1217 0064 8091 0000 		lds r24,GamePointer
 1218 0068 9091 0000 		lds r25,GamePointer+1
 1219 006c A091 0000 		lds r26,GamePointer+2
 1220 0070 8083      		st Z,r24
 1221 0072 9183      		std Z+1,r25
 1222 0074 A283      		std Z+2,r26
 203:../src/main.c **** 		}
 1223               		.loc 1 203 0
 1224 0076 1A83      		std Y+2,r17
 1225 0078 0983      		std Y+1,r16
 1226 007a 00C0      		rjmp .L58
 1227               	.L57:
 205:../src/main.c **** 		{
 1228               		.loc 1 205 0
 1229 007c 8981      		ldd r24,Y+1
 1230 007e 9A81      		ldd r25,Y+2
 1231 0080 0A97      		sbiw r24,10
 1232 0082 04F0      		brlt .L59
 207:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 1233               		.loc 1 207 0
 1234 0084 0E94 0000 		call copyArrayOf1
 1235               	.LVL44:
 208:../src/main.c **** 			gamePointerTilt--;
 1236               		.loc 1 208 0
 1237 0088 E091 0000 		lds r30,yMovement
 1238 008c F0E0      		ldi r31,0
 1239 008e 8091 0000 		lds r24,xMovement
 1240 0092 90E0      		ldi r25,0
 1241 0094 9F01      		movw r18,r30
 1242 0096 220F      		lsl r18
 1243 0098 331F      		rol r19
 1244 009a E20F      		add r30,r18
 1245 009c F31F      		adc r31,r19
 1246 009e 9C01      		movw r18,r24
 1247 00a0 220F      		lsl r18
 1248 00a2 331F      		rol r19
 1249 00a4 820F      		add r24,r18
 1250 00a6 931F      		adc r25,r19
 1251 00a8 880F      		lsl r24
 1252 00aa 991F      		rol r25
 1253 00ac 880F      		lsl r24
 1254 00ae 991F      		rol r25
 1255 00b0 880F      		lsl r24
 1256 00b2 991F      		rol r25
 1257 00b4 E80F      		add r30,r24
 1258 00b6 F91F      		adc r31,r25
 1259 00b8 E050      		subi r30,lo8(-(display_rgb))
 1260 00ba F040      		sbci r31,hi8(-(display_rgb))
 1261 00bc 8091 0000 		lds r24,GamePointer
 1262 00c0 9091 0000 		lds r25,GamePointer+1
 1263 00c4 A091 0000 		lds r26,GamePointer+2
 1264 00c8 8083      		st Z,r24
 1265 00ca 9183      		std Z+1,r25
 1266 00cc A283      		std Z+2,r26
 209:../src/main.c **** 		}
 1267               		.loc 1 209 0
 1268 00ce 8981      		ldd r24,Y+1
 1269 00d0 9A81      		ldd r25,Y+2
 1270 00d2 0197      		sbiw r24,1
 1271 00d4 9A83      		std Y+2,r25
 1272 00d6 8983      		std Y+1,r24
 1273 00d8 00C0      		rjmp .L58
 1274               	.L59:
 213:../src/main.c **** 			gamePointerTilt--;
 1275               		.loc 1 213 0
 1276 00da 0E94 0000 		call copyArrayOf1
 1277               	.LVL45:
 214:../src/main.c **** 		}
 1278               		.loc 1 214 0
 1279 00de 8981      		ldd r24,Y+1
 1280 00e0 9A81      		ldd r25,Y+2
 1281 00e2 0197      		sbiw r24,1
 1282 00e4 9A83      		std Y+2,r25
 1283 00e6 8983      		std Y+1,r24
 1284               	.L58:
 217:../src/main.c **** 		
 1285               		.loc 1 217 0
 1286 00e8 8091 0000 		lds r24,p2disp
 1287 00ec 9091 0000 		lds r25,p2disp+1
 1288 00f0 0E94 0000 		call wrt_ws2812
 1289               	.LVL46:
 1290               	.LBB23:
 1291               	.LBB24:
 1292               		.loc 2 187 0
 1293 00f4 8FE3      		ldi r24,lo8(-25537)
 1294 00f6 9CE9      		ldi r25,hi8(-25537)
 1295 00f8 0197      	1:	sbiw r24,1
 1296 00fa 01F4      		brne 1b
 1297 00fc 00C0      		rjmp .
 1298 00fe 0000      		nop
 1299               	.LBE24:
 1300               	.LBE23:
 197:../src/main.c **** 	{
 1301               		.loc 1 197 0
 1302 0100 8091 0000 		lds r24,jButton
 1303 0104 8111      		cpse r24,__zero_reg__
 1304 0106 00C0      		rjmp .L61
 1305               	.LVL47:
 1306               	.L56:
 222:../src/main.c **** 	
 1307               		.loc 1 222 0
 1308 0108 6091 0000 		lds r22,yMovement
 1309 010c 8091 0000 		lds r24,xMovement
 1310 0110 0E94 0000 		call shootPlayer1
 1311               	.LVL48:
 224:../src/main.c **** 	wrt_ws2812(p2disp);
 1312               		.loc 1 224 0
 1313 0114 0E94 0000 		call copyArrayOf1
 1314               	.LVL49:
 225:../src/main.c **** 	
 1315               		.loc 1 225 0
 1316 0118 8091 0000 		lds r24,p2disp
 1317 011c 9091 0000 		lds r25,p2disp+1
 1318 0120 0E94 0000 		call wrt_ws2812
 1319               	.LVL50:
 227:../src/main.c **** 	playerTurn = 1;
 1320               		.loc 1 227 0
 1321 0124 80E0      		ldi r24,0
 1322 0126 0E94 0000 		call delaySeconds
 1323               	.LVL51:
 228:../src/main.c **** }
 1324               		.loc 1 228 0
 1325 012a 81E0      		ldi r24,lo8(1)
 1326 012c 8093 0000 		sts playerTurn,r24
 1327               	/* epilogue start */
 229:../src/main.c **** 
 1328               		.loc 1 229 0
 1329 0130 0F90      		pop __tmp_reg__
 1330 0132 0F90      		pop __tmp_reg__
 1331 0134 DF91      		pop r29
 1332 0136 CF91      		pop r28
 1333 0138 1F91      		pop r17
 1334 013a 0F91      		pop r16
 1335 013c 0895      		ret
 1336               		.cfi_endproc
 1337               	.LFE74:
 1339               		.section	.text.scanCargueros2,"ax",@progbits
 1340               	.global	scanCargueros2
 1342               	scanCargueros2:
 1343               	.LFB85:
 398:../src/main.c **** 
 399:../src/main.c **** /* Takes coordinates x, y from 0:7 as arguments and scans Cargueros of player2.
 400:../src/main.c **** Sets MatrizJugador2 corresponding to the existance of a ship on the coordinates.*/
 401:../src/main.c **** void scanCargueros2(int8_t x, int8_t y)
 402:../src/main.c **** {	
 1344               		.loc 1 402 0
 1345               		.cfi_startproc
 1346               	.LVL52:
 1347 0000 4F92      		push r4
 1348               	.LCFI51:
 1349               		.cfi_def_cfa_offset 3
 1350               		.cfi_offset 4, -2
 1351 0002 5F92      		push r5
 1352               	.LCFI52:
 1353               		.cfi_def_cfa_offset 4
 1354               		.cfi_offset 5, -3
 1355 0004 6F92      		push r6
 1356               	.LCFI53:
 1357               		.cfi_def_cfa_offset 5
 1358               		.cfi_offset 6, -4
 1359 0006 7F92      		push r7
 1360               	.LCFI54:
 1361               		.cfi_def_cfa_offset 6
 1362               		.cfi_offset 7, -5
 1363 0008 8F92      		push r8
 1364               	.LCFI55:
 1365               		.cfi_def_cfa_offset 7
 1366               		.cfi_offset 8, -6
 1367 000a AF92      		push r10
 1368               	.LCFI56:
 1369               		.cfi_def_cfa_offset 8
 1370               		.cfi_offset 10, -7
 1371 000c BF92      		push r11
 1372               	.LCFI57:
 1373               		.cfi_def_cfa_offset 9
 1374               		.cfi_offset 11, -8
 1375 000e CF92      		push r12
 1376               	.LCFI58:
 1377               		.cfi_def_cfa_offset 10
 1378               		.cfi_offset 12, -9
 1379 0010 DF92      		push r13
 1380               	.LCFI59:
 1381               		.cfi_def_cfa_offset 11
 1382               		.cfi_offset 13, -10
 1383 0012 EF92      		push r14
 1384               	.LCFI60:
 1385               		.cfi_def_cfa_offset 12
 1386               		.cfi_offset 14, -11
 1387 0014 FF92      		push r15
 1388               	.LCFI61:
 1389               		.cfi_def_cfa_offset 13
 1390               		.cfi_offset 15, -12
 1391 0016 0F93      		push r16
 1392               	.LCFI62:
 1393               		.cfi_def_cfa_offset 14
 1394               		.cfi_offset 16, -13
 1395 0018 1F93      		push r17
 1396               	.LCFI63:
 1397               		.cfi_def_cfa_offset 15
 1398               		.cfi_offset 17, -14
 1399 001a CF93      		push r28
 1400               	.LCFI64:
 1401               		.cfi_def_cfa_offset 16
 1402               		.cfi_offset 28, -15
 1403 001c DF93      		push r29
 1404               	.LCFI65:
 1405               		.cfi_def_cfa_offset 17
 1406               		.cfi_offset 29, -16
 1407               	/* prologue: function */
 1408               	/* frame size = 0 */
 1409               	/* stack size = 15 */
 1410               	.L__stack_usage = 15
 1411               	.LVL53:
 1412 001e E0E0      		ldi r30,lo8(carguerosJugador2)
 1413 0020 F0E0      		ldi r31,hi8(carguerosJugador2)
 1414 0022 0F2E      		mov __tmp_reg__,r31
 1415 0024 F0E0      		ldi r31,lo8(carguerosJugador2+12)
 1416 0026 EF2E      		mov r14,r31
 1417 0028 F0E0      		ldi r31,hi8(carguerosJugador2+12)
 1418 002a FF2E      		mov r15,r31
 1419 002c F02D      		mov r31,__tmp_reg__
 1420               	.LBB25:
 403:../src/main.c **** 	for(int i=0; i<=1; i++)
 404:../src/main.c **** 	{
 405:../src/main.c **** 		if ((carguerosJugador2[i].x0 == x) & (carguerosJugador2[i].y0 == y))
 1421               		.loc 1 405 0
 1422 002e 082E      		mov __tmp_reg__,r24
 1423 0030 000C      		lsl r0
 1424 0032 990B      		sbc r25,r25
 1425 0034 062E      		mov __tmp_reg__,r22
 1426 0036 000C      		lsl r0
 1427 0038 770B      		sbc r23,r23
 1428 003a BB24      		clr r11
 1429 003c B394      		inc r11
 1430 003e A12C      		mov r10,__zero_reg__
 406:../src/main.c **** 		{
 407:../src/main.c **** 			carguerosJugador2[i].boolDisparado0 = 1;
 408:../src/main.c **** 			if ((carguerosJugador2[i].boolDisparado0 == 1) & (carguerosJugador2[i].boolDisparado1 == 1))
 409:../src/main.c **** 			{
 410:../src/main.c **** 				matrizJugador2[carguerosJugador2[i].x0][carguerosJugador2[i].y0] = Hundido;
 411:../src/main.c **** 				matrizJugador2[carguerosJugador2[i].x1][carguerosJugador2[i].y1] = Hundido;
 412:../src/main.c **** 			}
 413:../src/main.c **** 			else
 414:../src/main.c **** 				matrizJugador2[x][y] = Danado;
 415:../src/main.c **** 		}
 416:../src/main.c **** 		else if ((carguerosJugador2[i].x1 == x) & (carguerosJugador2[i].y1 == y))
 417:../src/main.c **** 		{
 418:../src/main.c **** 			carguerosJugador2[i].boolDisparado1 = 1;
 419:../src/main.c **** 			if ((carguerosJugador2[i].boolDisparado0 == 1) & (carguerosJugador2[i].boolDisparado1 == 1))
 420:../src/main.c **** 			{
 421:../src/main.c **** 				matrizJugador2[carguerosJugador2[i].x0][carguerosJugador2[i].y0] = Hundido;
 422:../src/main.c **** 				matrizJugador2[carguerosJugador2[i].x1][carguerosJugador2[i].y1] = Hundido;
 423:../src/main.c **** 			}
 424:../src/main.c **** 			else
 425:../src/main.c **** 				matrizJugador2[x][y] = Danado;
 1431               		.loc 1 425 0
 1432 0040 9B01      		movw r18,r22
 1433 0042 220F      		lsl r18
 1434 0044 331F      		rol r19
 1435 0046 A901      		movw r20,r18
 1436 0048 460F      		add r20,r22
 1437 004a 571F      		adc r21,r23
 1438 004c 9C01      		movw r18,r24
 1439 004e 220F      		lsl r18
 1440 0050 331F      		rol r19
 1441 0052 280F      		add r18,r24
 1442 0054 391F      		adc r19,r25
 1443 0056 220F      		lsl r18
 1444 0058 331F      		rol r19
 1445 005a 220F      		lsl r18
 1446 005c 331F      		rol r19
 1447 005e 220F      		lsl r18
 1448 0060 331F      		rol r19
 1449 0062 240F      		add r18,r20
 1450 0064 351F      		adc r19,r21
 1451 0066 A901      		movw r20,r18
 1452 0068 4050      		subi r20,lo8(-(matrizJugador2))
 1453 006a 5040      		sbci r21,hi8(-(matrizJugador2))
 1454 006c 2A01      		movw r4,r20
 1455               	.LVL54:
 1456               	.L72:
 1457 006e EF01      		movw r28,r30
 405:../src/main.c **** 		{
 1458               		.loc 1 405 0
 1459 0070 2081      		ld r18,Z
 1460 0072 30E0      		ldi r19,0
 1461 0074 4181      		ldd r20,Z+1
 1462 0076 50E0      		ldi r21,0
 1463 0078 1B2D      		mov r17,r11
 1464 007a 2817      		cp r18,r24
 1465 007c 3907      		cpc r19,r25
 1466 007e 01F0      		breq .L65
 1467 0080 1A2D      		mov r17,r10
 1468               	.L65:
 1469 0082 1123      		tst r17
 1470 0084 01F4      		brne .+2
 1471 0086 00C0      		rjmp .L64
 1472 0088 1B2D      		mov r17,r11
 1473 008a 4617      		cp r20,r22
 1474 008c 5707      		cpc r21,r23
 1475 008e 01F0      		breq .L66
 1476 0090 1A2D      		mov r17,r10
 1477               	.L66:
 1478 0092 1123      		tst r17
 1479 0094 01F4      		brne .+2
 1480 0096 00C0      		rjmp .L64
 407:../src/main.c **** 			if ((carguerosJugador2[i].boolDisparado0 == 1) & (carguerosJugador2[i].boolDisparado1 == 1))
 1481               		.loc 1 407 0
 1482 0098 BA82      		std Y+2,r11
 408:../src/main.c **** 			{
 1483               		.loc 1 408 0
 1484 009a 1D81      		ldd r17,Y+5
 1485 009c 1130      		cpi r17,lo8(1)
 1486 009e 01F4      		brne .L67
 410:../src/main.c **** 				matrizJugador2[carguerosJugador2[i].x1][carguerosJugador2[i].y1] = Hundido;
 1487               		.loc 1 410 0
 1488 00a0 8A01      		movw r16,r20
 1489 00a2 000F      		lsl r16
 1490 00a4 111F      		rol r17
 1491 00a6 400F      		add r20,r16
 1492 00a8 511F      		adc r21,r17
 1493 00aa 8901      		movw r16,r18
 1494 00ac 000F      		lsl r16
 1495 00ae 111F      		rol r17
 1496 00b0 200F      		add r18,r16
 1497 00b2 311F      		adc r19,r17
 1498 00b4 220F      		lsl r18
 1499 00b6 331F      		rol r19
 1500 00b8 220F      		lsl r18
 1501 00ba 331F      		rol r19
 1502 00bc 220F      		lsl r18
 1503 00be 331F      		rol r19
 1504 00c0 420F      		add r20,r18
 1505 00c2 531F      		adc r21,r19
 1506 00c4 4050      		subi r20,lo8(-(matrizJugador2))
 1507 00c6 5040      		sbci r21,hi8(-(matrizJugador2))
 1508 00c8 6090 0000 		lds r6,Hundido
 1509 00cc 7090 0000 		lds r7,Hundido+1
 1510 00d0 8090 0000 		lds r8,Hundido+2
 1511 00d4 DA01      		movw r26,r20
 1512 00d6 6D92      		st X+,r6
 1513 00d8 7D92      		st X+,r7
 1514 00da 8C92      		st X,r8
 411:../src/main.c **** 			}
 1515               		.loc 1 411 0
 1516 00dc 4C81      		ldd r20,Y+4
 1517 00de 50E0      		ldi r21,0
 1518 00e0 2B81      		ldd r18,Y+3
 1519 00e2 30E0      		ldi r19,0
 1520 00e4 EA01      		movw r28,r20
 1521 00e6 CC0F      		lsl r28
 1522 00e8 DD1F      		rol r29
 1523 00ea 4C0F      		add r20,r28
 1524 00ec 5D1F      		adc r21,r29
 1525 00ee E901      		movw r28,r18
 1526 00f0 CC0F      		lsl r28
 1527 00f2 DD1F      		rol r29
 1528 00f4 C20F      		add r28,r18
 1529 00f6 D31F      		adc r29,r19
 1530 00f8 CC0F      		lsl r28
 1531 00fa DD1F      		rol r29
 1532 00fc CC0F      		lsl r28
 1533 00fe DD1F      		rol r29
 1534 0100 CC0F      		lsl r28
 1535 0102 DD1F      		rol r29
 1536 0104 4C0F      		add r20,r28
 1537 0106 5D1F      		adc r21,r29
 1538 0108 EA01      		movw r28,r20
 1539 010a C050      		subi r28,lo8(-(matrizJugador2))
 1540 010c D040      		sbci r29,hi8(-(matrizJugador2))
 1541 010e 6882      		st Y,r6
 1542 0110 7982      		std Y+1,r7
 1543 0112 8A82      		std Y+2,r8
 1544 0114 00C0      		rjmp .L68
 1545               	.L67:
 414:../src/main.c **** 		}
 1546               		.loc 1 414 0
 1547 0116 2091 0000 		lds r18,Danado
 1548 011a 3091 0000 		lds r19,Danado+1
 1549 011e 4091 0000 		lds r20,Danado+2
 1550 0122 D201      		movw r26,r4
 1551 0124 2D93      		st X+,r18
 1552 0126 3D93      		st X+,r19
 1553 0128 4C93      		st X,r20
 1554 012a 00C0      		rjmp .L68
 1555               	.L64:
 416:../src/main.c **** 		{
 1556               		.loc 1 416 0
 1557 012c 0B81      		ldd r16,Y+3
 1558 012e 10E0      		ldi r17,0
 1559 0130 CC80      		ldd r12,Y+4
 1560 0132 D12C      		mov r13,__zero_reg__
 1561 0134 8B2C      		mov r8,r11
 1562 0136 8017      		cp r24,r16
 1563 0138 9107      		cpc r25,r17
 1564 013a 01F0      		breq .L69
 1565 013c 8A2C      		mov r8,r10
 1566               	.L69:
 1567 013e 8820      		tst r8
 1568 0140 01F4      		brne .+2
 1569 0142 00C0      		rjmp .L68
 1570 0144 8B2C      		mov r8,r11
 1571 0146 6C15      		cp r22,r12
 1572 0148 7D05      		cpc r23,r13
 1573 014a 01F0      		breq .L70
 1574 014c 8A2C      		mov r8,r10
 1575               	.L70:
 1576 014e 8820      		tst r8
 1577 0150 01F4      		brne .+2
 1578 0152 00C0      		rjmp .L68
 418:../src/main.c **** 			if ((carguerosJugador2[i].boolDisparado0 == 1) & (carguerosJugador2[i].boolDisparado1 == 1))
 1579               		.loc 1 418 0
 1580 0154 BD82      		std Y+5,r11
 419:../src/main.c **** 			{
 1581               		.loc 1 419 0
 1582 0156 CA81      		ldd r28,Y+2
 1583 0158 C130      		cpi r28,lo8(1)
 1584 015a 01F4      		brne .L71
 421:../src/main.c **** 				matrizJugador2[carguerosJugador2[i].x1][carguerosJugador2[i].y1] = Hundido;
 1585               		.loc 1 421 0
 1586 015c EA01      		movw r28,r20
 1587 015e CC0F      		lsl r28
 1588 0160 DD1F      		rol r29
 1589 0162 4C0F      		add r20,r28
 1590 0164 5D1F      		adc r21,r29
 1591 0166 E901      		movw r28,r18
 1592 0168 CC0F      		lsl r28
 1593 016a DD1F      		rol r29
 1594 016c C20F      		add r28,r18
 1595 016e D31F      		adc r29,r19
 1596 0170 CC0F      		lsl r28
 1597 0172 DD1F      		rol r29
 1598 0174 CC0F      		lsl r28
 1599 0176 DD1F      		rol r29
 1600 0178 CC0F      		lsl r28
 1601 017a DD1F      		rol r29
 1602 017c 4C0F      		add r20,r28
 1603 017e 5D1F      		adc r21,r29
 1604 0180 EA01      		movw r28,r20
 1605 0182 C050      		subi r28,lo8(-(matrizJugador2))
 1606 0184 D040      		sbci r29,hi8(-(matrizJugador2))
 1607 0186 2091 0000 		lds r18,Hundido
 1608 018a 3091 0000 		lds r19,Hundido+1
 1609 018e 4091 0000 		lds r20,Hundido+2
 1610 0192 2883      		st Y,r18
 1611 0194 3983      		std Y+1,r19
 1612 0196 4A83      		std Y+2,r20
 422:../src/main.c **** 			}
 1613               		.loc 1 422 0
 1614 0198 E601      		movw r28,r12
 1615 019a CC0F      		lsl r28
 1616 019c DD1F      		rol r29
 1617 019e CC0E      		add r12,r28
 1618 01a0 DD1E      		adc r13,r29
 1619 01a2 E801      		movw r28,r16
 1620 01a4 CC0F      		lsl r28
 1621 01a6 DD1F      		rol r29
 1622 01a8 C00F      		add r28,r16
 1623 01aa D11F      		adc r29,r17
 1624 01ac CC0F      		lsl r28
 1625 01ae DD1F      		rol r29
 1626 01b0 CC0F      		lsl r28
 1627 01b2 DD1F      		rol r29
 1628 01b4 CC0F      		lsl r28
 1629 01b6 DD1F      		rol r29
 1630 01b8 CC0D      		add r28,r12
 1631 01ba DD1D      		adc r29,r13
 1632 01bc C050      		subi r28,lo8(-(matrizJugador2))
 1633 01be D040      		sbci r29,hi8(-(matrizJugador2))
 1634 01c0 2883      		st Y,r18
 1635 01c2 3983      		std Y+1,r19
 1636 01c4 4A83      		std Y+2,r20
 1637 01c6 00C0      		rjmp .L68
 1638               	.L71:
 1639               		.loc 1 425 0
 1640 01c8 2091 0000 		lds r18,Danado
 1641 01cc 3091 0000 		lds r19,Danado+1
 1642 01d0 4091 0000 		lds r20,Danado+2
 1643 01d4 D201      		movw r26,r4
 1644 01d6 2D93      		st X+,r18
 1645 01d8 3D93      		st X+,r19
 1646 01da 4C93      		st X,r20
 1647               	.L68:
 1648 01dc 3696      		adiw r30,6
 403:../src/main.c **** 	{
 1649               		.loc 1 403 0 discriminator 2
 1650 01de EE15      		cp r30,r14
 1651 01e0 FF05      		cpc r31,r15
 1652 01e2 01F0      		breq .+2
 1653 01e4 00C0      		rjmp .L72
 1654               	/* epilogue start */
 1655               	.LBE25:
 426:../src/main.c **** 		}
 427:../src/main.c **** 	}
 428:../src/main.c **** }
 1656               		.loc 1 428 0
 1657 01e6 DF91      		pop r29
 1658 01e8 CF91      		pop r28
 1659 01ea 1F91      		pop r17
 1660 01ec 0F91      		pop r16
 1661 01ee FF90      		pop r15
 1662 01f0 EF90      		pop r14
 1663 01f2 DF90      		pop r13
 1664 01f4 CF90      		pop r12
 1665 01f6 BF90      		pop r11
 1666 01f8 AF90      		pop r10
 1667 01fa 8F90      		pop r8
 1668 01fc 7F90      		pop r7
 1669 01fe 6F90      		pop r6
 1670 0200 5F90      		pop r5
 1671 0202 4F90      		pop r4
 1672 0204 0895      		ret
 1673               		.cfi_endproc
 1674               	.LFE85:
 1676               		.section	.text.shootPlayer2,"ax",@progbits
 1677               	.global	shootPlayer2
 1679               	shootPlayer2:
 1680               	.LFB81:
 334:../src/main.c **** 	matrizJugador2[x][y] = Agua;
 1681               		.loc 1 334 0
 1682               		.cfi_startproc
 1683               	.LVL55:
 1684 0000 CF93      		push r28
 1685               	.LCFI66:
 1686               		.cfi_def_cfa_offset 3
 1687               		.cfi_offset 28, -2
 1688 0002 DF93      		push r29
 1689               	.LCFI67:
 1690               		.cfi_def_cfa_offset 4
 1691               		.cfi_offset 29, -3
 1692               	/* prologue: function */
 1693               	/* frame size = 0 */
 1694               	/* stack size = 2 */
 1695               	.L__stack_usage = 2
 1696 0004 C82F      		mov r28,r24
 1697 0006 D62F      		mov r29,r22
 335:../src/main.c **** 	scanSubmarinos2(x, y);
 1698               		.loc 1 335 0
 1699 0008 E62F      		mov r30,r22
 1700 000a 062E      		mov __tmp_reg__,r22
 1701 000c 000C      		lsl r0
 1702 000e FF0B      		sbc r31,r31
 1703 0010 082E      		mov __tmp_reg__,r24
 1704 0012 000C      		lsl r0
 1705 0014 990B      		sbc r25,r25
 1706               	.LVL56:
 1707 0016 9F01      		movw r18,r30
 1708 0018 220F      		lsl r18
 1709 001a 331F      		rol r19
 1710 001c E20F      		add r30,r18
 1711 001e F31F      		adc r31,r19
 1712 0020 9C01      		movw r18,r24
 1713 0022 220F      		lsl r18
 1714 0024 331F      		rol r19
 1715 0026 820F      		add r24,r18
 1716 0028 931F      		adc r25,r19
 1717 002a 880F      		lsl r24
 1718 002c 991F      		rol r25
 1719 002e 880F      		lsl r24
 1720 0030 991F      		rol r25
 1721 0032 880F      		lsl r24
 1722 0034 991F      		rol r25
 1723 0036 E80F      		add r30,r24
 1724 0038 F91F      		adc r31,r25
 1725 003a E050      		subi r30,lo8(-(matrizJugador2))
 1726 003c F040      		sbci r31,hi8(-(matrizJugador2))
 1727 003e 8091 0000 		lds r24,Agua
 1728 0042 9091 0000 		lds r25,Agua+1
 1729 0046 A091 0000 		lds r26,Agua+2
 1730 004a 8083      		st Z,r24
 1731 004c 9183      		std Z+1,r25
 1732 004e A283      		std Z+2,r26
 336:../src/main.c **** 	scanCargueros2(x, y);
 1733               		.loc 1 336 0
 1734 0050 8C2F      		mov r24,r28
 1735 0052 0E94 0000 		call scanSubmarinos2
 1736               	.LVL57:
 337:../src/main.c **** }
 1737               		.loc 1 337 0
 1738 0056 6D2F      		mov r22,r29
 1739 0058 8C2F      		mov r24,r28
 1740 005a 0E94 0000 		call scanCargueros2
 1741               	.LVL58:
 1742               	/* epilogue start */
 338:../src/main.c **** 
 1743               		.loc 1 338 0
 1744 005e DF91      		pop r29
 1745               	.LVL59:
 1746 0060 CF91      		pop r28
 1747               	.LVL60:
 1748 0062 0895      		ret
 1749               		.cfi_endproc
 1750               	.LFE81:
 1752               		.section	.text.playPlayer1,"ax",@progbits
 1753               	.global	playPlayer1
 1755               	playPlayer1:
 1756               	.LFB73:
 153:../src/main.c **** 	// Actions to do only once per cycle
 1757               		.loc 1 153 0
 1758               		.cfi_startproc
 1759 0000 0F93      		push r16
 1760               	.LCFI68:
 1761               		.cfi_def_cfa_offset 3
 1762               		.cfi_offset 16, -2
 1763 0002 1F93      		push r17
 1764               	.LCFI69:
 1765               		.cfi_def_cfa_offset 4
 1766               		.cfi_offset 17, -3
 1767 0004 CF93      		push r28
 1768               	.LCFI70:
 1769               		.cfi_def_cfa_offset 5
 1770               		.cfi_offset 28, -4
 1771 0006 DF93      		push r29
 1772               	.LCFI71:
 1773               		.cfi_def_cfa_offset 6
 1774               		.cfi_offset 29, -5
 1775 0008 00D0      		rcall .
 1776               	.LCFI72:
 1777               		.cfi_def_cfa_offset 8
 1778 000a CDB7      		in r28,__SP_L__
 1779 000c DEB7      		in r29,__SP_H__
 1780               	.LCFI73:
 1781               		.cfi_def_cfa_register 28
 1782               	/* prologue: function */
 1783               	/* frame size = 2 */
 1784               	/* stack size = 6 */
 1785               	.L__stack_usage = 6
 155:../src/main.c **** 	
 1786               		.loc 1 155 0
 1787 000e 84E1      		ldi r24,lo8(20)
 1788 0010 90E0      		ldi r25,0
 1789 0012 9A83      		std Y+2,r25
 1790 0014 8983      		std Y+1,r24
 157:../src/main.c **** 	{
 1791               		.loc 1 157 0
 1792 0016 8091 0000 		lds r24,jButton
 1793 001a 8823      		tst r24
 1794 001c 01F4      		brne .+2
 1795 001e 00C0      		rjmp .L76
 163:../src/main.c **** 		}
 1796               		.loc 1 163 0
 1797 0020 04E1      		ldi r16,lo8(20)
 1798 0022 10E0      		ldi r17,0
 1799               	.L81:
 159:../src/main.c **** 		{
 1800               		.loc 1 159 0
 1801 0024 8981      		ldd r24,Y+1
 1802 0026 9A81      		ldd r25,Y+2
 1803 0028 892B      		or r24,r25
 1804 002a 01F4      		brne .L77
 161:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 1805               		.loc 1 161 0
 1806 002c 0E94 0000 		call copyArrayOf2
 1807               	.LVL61:
 162:../src/main.c **** 			gamePointerTilt = GAME_POINTER_SPEED;
 1808               		.loc 1 162 0
 1809 0030 E091 0000 		lds r30,yMovement
 1810 0034 F0E0      		ldi r31,0
 1811 0036 8091 0000 		lds r24,xMovement
 1812 003a 90E0      		ldi r25,0
 1813 003c 9F01      		movw r18,r30
 1814 003e 220F      		lsl r18
 1815 0040 331F      		rol r19
 1816 0042 E20F      		add r30,r18
 1817 0044 F31F      		adc r31,r19
 1818 0046 9C01      		movw r18,r24
 1819 0048 220F      		lsl r18
 1820 004a 331F      		rol r19
 1821 004c 820F      		add r24,r18
 1822 004e 931F      		adc r25,r19
 1823 0050 880F      		lsl r24
 1824 0052 991F      		rol r25
 1825 0054 880F      		lsl r24
 1826 0056 991F      		rol r25
 1827 0058 880F      		lsl r24
 1828 005a 991F      		rol r25
 1829 005c E80F      		add r30,r24
 1830 005e F91F      		adc r31,r25
 1831 0060 E050      		subi r30,lo8(-(display_rgb))
 1832 0062 F040      		sbci r31,hi8(-(display_rgb))
 1833 0064 8091 0000 		lds r24,GamePointer
 1834 0068 9091 0000 		lds r25,GamePointer+1
 1835 006c A091 0000 		lds r26,GamePointer+2
 1836 0070 8083      		st Z,r24
 1837 0072 9183      		std Z+1,r25
 1838 0074 A283      		std Z+2,r26
 163:../src/main.c **** 		}
 1839               		.loc 1 163 0
 1840 0076 1A83      		std Y+2,r17
 1841 0078 0983      		std Y+1,r16
 1842 007a 00C0      		rjmp .L78
 1843               	.L77:
 165:../src/main.c **** 		{
 1844               		.loc 1 165 0
 1845 007c 8981      		ldd r24,Y+1
 1846 007e 9A81      		ldd r25,Y+2
 1847 0080 0A97      		sbiw r24,10
 1848 0082 04F0      		brlt .L79
 167:../src/main.c **** 			display_rgb[xMovement][yMovement] = GamePointer;
 1849               		.loc 1 167 0
 1850 0084 0E94 0000 		call copyArrayOf2
 1851               	.LVL62:
 168:../src/main.c **** 			gamePointerTilt--;
 1852               		.loc 1 168 0
 1853 0088 E091 0000 		lds r30,yMovement
 1854 008c F0E0      		ldi r31,0
 1855 008e 8091 0000 		lds r24,xMovement
 1856 0092 90E0      		ldi r25,0
 1857 0094 9F01      		movw r18,r30
 1858 0096 220F      		lsl r18
 1859 0098 331F      		rol r19
 1860 009a E20F      		add r30,r18
 1861 009c F31F      		adc r31,r19
 1862 009e 9C01      		movw r18,r24
 1863 00a0 220F      		lsl r18
 1864 00a2 331F      		rol r19
 1865 00a4 820F      		add r24,r18
 1866 00a6 931F      		adc r25,r19
 1867 00a8 880F      		lsl r24
 1868 00aa 991F      		rol r25
 1869 00ac 880F      		lsl r24
 1870 00ae 991F      		rol r25
 1871 00b0 880F      		lsl r24
 1872 00b2 991F      		rol r25
 1873 00b4 E80F      		add r30,r24
 1874 00b6 F91F      		adc r31,r25
 1875 00b8 E050      		subi r30,lo8(-(display_rgb))
 1876 00ba F040      		sbci r31,hi8(-(display_rgb))
 1877 00bc 8091 0000 		lds r24,GamePointer
 1878 00c0 9091 0000 		lds r25,GamePointer+1
 1879 00c4 A091 0000 		lds r26,GamePointer+2
 1880 00c8 8083      		st Z,r24
 1881 00ca 9183      		std Z+1,r25
 1882 00cc A283      		std Z+2,r26
 169:../src/main.c **** 		}
 1883               		.loc 1 169 0
 1884 00ce 8981      		ldd r24,Y+1
 1885 00d0 9A81      		ldd r25,Y+2
 1886 00d2 0197      		sbiw r24,1
 1887 00d4 9A83      		std Y+2,r25
 1888 00d6 8983      		std Y+1,r24
 1889 00d8 00C0      		rjmp .L78
 1890               	.L79:
 173:../src/main.c **** 			gamePointerTilt--;
 1891               		.loc 1 173 0
 1892 00da 0E94 0000 		call copyArrayOf2
 1893               	.LVL63:
 174:../src/main.c **** 		}
 1894               		.loc 1 174 0
 1895 00de 8981      		ldd r24,Y+1
 1896 00e0 9A81      		ldd r25,Y+2
 1897 00e2 0197      		sbiw r24,1
 1898 00e4 9A83      		std Y+2,r25
 1899 00e6 8983      		std Y+1,r24
 1900               	.L78:
 177:../src/main.c **** 		
 1901               		.loc 1 177 0
 1902 00e8 8091 0000 		lds r24,p2disp
 1903 00ec 9091 0000 		lds r25,p2disp+1
 1904 00f0 0E94 0000 		call wrt_ws2812
 1905               	.LVL64:
 1906               	.LBB26:
 1907               	.LBB27:
 1908               		.loc 2 187 0
 1909 00f4 8FE3      		ldi r24,lo8(-25537)
 1910 00f6 9CE9      		ldi r25,hi8(-25537)
 1911 00f8 0197      	1:	sbiw r24,1
 1912 00fa 01F4      		brne 1b
 1913 00fc 00C0      		rjmp .
 1914 00fe 0000      		nop
 1915               	.LBE27:
 1916               	.LBE26:
 157:../src/main.c **** 	{
 1917               		.loc 1 157 0
 1918 0100 8091 0000 		lds r24,jButton
 1919 0104 8111      		cpse r24,__zero_reg__
 1920 0106 00C0      		rjmp .L81
 1921               	.LVL65:
 1922               	.L76:
 182:../src/main.c **** 	
 1923               		.loc 1 182 0
 1924 0108 6091 0000 		lds r22,yMovement
 1925 010c 8091 0000 		lds r24,xMovement
 1926 0110 0E94 0000 		call shootPlayer2
 1927               	.LVL66:
 184:../src/main.c **** 	wrt_ws2812(p2disp);
 1928               		.loc 1 184 0
 1929 0114 0E94 0000 		call copyArrayOf2
 1930               	.LVL67:
 185:../src/main.c **** 	
 1931               		.loc 1 185 0
 1932 0118 8091 0000 		lds r24,p2disp
 1933 011c 9091 0000 		lds r25,p2disp+1
 1934 0120 0E94 0000 		call wrt_ws2812
 1935               	.LVL68:
 187:../src/main.c **** 	playerTurn = 2;
 1936               		.loc 1 187 0
 1937 0124 80E0      		ldi r24,0
 1938 0126 0E94 0000 		call delaySeconds
 1939               	.LVL69:
 188:../src/main.c **** }
 1940               		.loc 1 188 0
 1941 012a 82E0      		ldi r24,lo8(2)
 1942 012c 8093 0000 		sts playerTurn,r24
 1943               	/* epilogue start */
 189:../src/main.c **** 
 1944               		.loc 1 189 0
 1945 0130 0F90      		pop __tmp_reg__
 1946 0132 0F90      		pop __tmp_reg__
 1947 0134 DF91      		pop r29
 1948 0136 CF91      		pop r28
 1949 0138 1F91      		pop r17
 1950 013a 0F91      		pop r16
 1951 013c 0895      		ret
 1952               		.cfi_endproc
 1953               	.LFE73:
 1955               		.section	.text.gameOn,"ax",@progbits
 1956               	.global	gameOn
 1958               	gameOn:
 1959               	.LFB72:
 129:../src/main.c **** 	while ((playerTurn == 1) | (playerTurn == 2))
 1960               		.loc 1 129 0
 1961               		.cfi_startproc
 1962               	/* prologue: function */
 1963               	/* frame size = 0 */
 1964               	/* stack size = 0 */
 1965               	.L__stack_usage = 0
 136:../src/main.c **** 		
 1966               		.loc 1 136 0
 1967 0000 D3E0      		ldi r29,lo8(3)
 142:../src/main.c **** 	}
 1968               		.loc 1 142 0
 1969 0002 C4E0      		ldi r28,lo8(4)
 130:../src/main.c **** 	{
 1970               		.loc 1 130 0
 1971 0004 00C0      		rjmp .L89
 1972               	.L93:
 133:../src/main.c **** 	
 1973               		.loc 1 133 0
 1974 0006 0E94 0000 		call playPlayer1
 1975               	.LVL70:
 132:../src/main.c **** 			playPlayer1();
 1976               		.loc 1 132 0
 1977 000a 8091 0000 		lds r24,playerTurn
 1978 000e 8130      		cpi r24,lo8(1)
 1979 0010 01F0      		breq .L93
 1980               	.L91:
 135:../src/main.c **** 			playerTurn = WINPLAYER1;
 1981               		.loc 1 135 0
 1982 0012 0E94 0000 		call checkPlayer1Win
 1983               	.LVL71:
 1984 0016 8130      		cpi r24,lo8(1)
 1985 0018 01F4      		brne .L86
 136:../src/main.c **** 		
 1986               		.loc 1 136 0
 1987 001a D093 0000 		sts playerTurn,r29
 1988 001e 00C0      		rjmp .L87
 1989               	.L86:
 138:../src/main.c **** 			playPlayer2();
 1990               		.loc 1 138 0
 1991 0020 8091 0000 		lds r24,playerTurn
 1992 0024 8230      		cpi r24,lo8(2)
 1993 0026 01F4      		brne .L87
 1994               	.L92:
 139:../src/main.c **** 		
 1995               		.loc 1 139 0
 1996 0028 0E94 0000 		call playPlayer2
 1997               	.LVL72:
 138:../src/main.c **** 			playPlayer2();
 1998               		.loc 1 138 0
 1999 002c 8091 0000 		lds r24,playerTurn
 2000 0030 8230      		cpi r24,lo8(2)
 2001 0032 01F0      		breq .L92
 2002               	.L87:
 141:../src/main.c **** 			playerTurn = WINPLAYER2;
 2003               		.loc 1 141 0
 2004 0034 0E94 0000 		call checkPlayer2Win
 2005               	.LVL73:
 2006 0038 8130      		cpi r24,lo8(1)
 2007 003a 01F4      		brne .L89
 142:../src/main.c **** 	}
 2008               		.loc 1 142 0
 2009 003c C093 0000 		sts playerTurn,r28
 2010               	.L89:
 130:../src/main.c **** 	{
 2011               		.loc 1 130 0
 2012 0040 8091 0000 		lds r24,playerTurn
 2013 0044 9FEF      		ldi r25,lo8(-1)
 2014 0046 980F      		add r25,r24
 2015 0048 9230      		cpi r25,lo8(2)
 2016 004a 00F4      		brsh .L90
 132:../src/main.c **** 			playPlayer1();
 2017               		.loc 1 132 0
 2018 004c 8130      		cpi r24,lo8(1)
 2019 004e 01F0      		breq .L93
 2020 0050 00C0      		rjmp .L91
 2021               	.L90:
 2022               	.L97:
 2023 0052 00C0      		rjmp .L97
 2024               		.cfi_endproc
 2025               	.LFE72:
 2027               		.section	.text.main,"ax",@progbits
 2028               	.global	main
 2030               	main:
 2031               	.LFB71:
 105:../src/main.c **** 	init_ws2812();		// Initialize RGB Display driver
 2032               		.loc 1 105 0
 2033               		.cfi_startproc
 2034               	/* prologue: function */
 2035               	/* frame size = 0 */
 2036               	/* stack size = 0 */
 2037               	.L__stack_usage = 0
 106:../src/main.c **** 	init_RTI();			// Initialize Periodic Real Time Interrupt(Timer)
 2038               		.loc 1 106 0
 2039 0000 0E94 0000 		call init_ws2812
 2040               	.LVL74:
 107:../src/main.c **** 	UART_Init();		// Initialize serial port driver (UART)
 2041               		.loc 1 107 0
 2042 0004 0E94 0000 		call init_RTI
 2043               	.LVL75:
 108:../src/main.c **** 	adc_init();			// Initialize Analog to digital converter (Joystick)
 2044               		.loc 1 108 0
 2045 0008 0E94 0000 		call UART_Init
 2046               	.LVL76:
 109:../src/main.c **** 	wrt_Digit_Init();	// Initialize the Seven Segments Display
 2047               		.loc 1 109 0
 2048 000c 0E94 0000 		call adc_init
 2049               	.LVL77:
 110:../src/main.c **** 	playerTurn = 1;		// Sets the value of the first player
 2050               		.loc 1 110 0
 2051 0010 0E94 0000 		call wrt_Digit_Init
 2052               	.LVL78:
 111:../src/main.c **** 		
 2053               		.loc 1 111 0
 2054 0014 81E0      		ldi r24,lo8(1)
 2055 0016 8093 0000 		sts playerTurn,r24
 113:../src/main.c **** 	
 2056               		.loc 1 113 0
 2057 001a 80E0      		ldi r24,lo8(display_rgb)
 2058 001c 90E0      		ldi r25,hi8(display_rgb)
 2059 001e 9093 0000 		sts p2disp+1,r25
 2060 0022 8093 0000 		sts p2disp,r24
 2061               	.LVL79:
 2062 0026 E0E0      		ldi r30,lo8(matrizJugador1)
 2063 0028 F0E0      		ldi r31,hi8(matrizJugador1)
 2064 002a 40E0      		ldi r20,lo8(matrizJugador1+192)
 2065 002c 50E0      		ldi r21,hi8(matrizJugador1+192)
 2066 002e 00C0      		rjmp .L99
 2067               	.LVL80:
 2068               	.L100:
 2069               	.LBB28:
 2070               	.LBB29:
 117:../src/main.c **** 
 2071               		.loc 1 117 0 discriminator 3
 2072 0030 8091 0000 		lds r24,Apagado
 2073 0034 9091 0000 		lds r25,Apagado+1
 2074 0038 A091 0000 		lds r26,Apagado+2
 2075 003c 8193      		st Z+,r24
 2076 003e 9193      		st Z+,r25
 2077 0040 A193      		st Z+,r26
 2078               	.LVL81:
 116:../src/main.c **** 			matrizJugador1[i][j] = Apagado;
 2079               		.loc 1 116 0 discriminator 3
 2080 0042 E217      		cp r30,r18
 2081 0044 F307      		cpc r31,r19
 2082 0046 01F4      		brne .L100
 2083 0048 F901      		movw r30,r18
 2084               	.LBE29:
 115:../src/main.c **** 		for (int j=0; j<=7; j++)
 2085               		.loc 1 115 0 discriminator 2
 2086 004a 4217      		cp r20,r18
 2087 004c 5307      		cpc r21,r19
 2088 004e 01F4      		brne .L99
 2089 0050 E0E0      		ldi r30,lo8(matrizJugador2)
 2090 0052 F0E0      		ldi r31,hi8(matrizJugador2)
 2091 0054 40E0      		ldi r20,lo8(matrizJugador2+192)
 2092 0056 50E0      		ldi r21,hi8(matrizJugador2+192)
 2093 0058 00C0      		rjmp .L101
 2094               	.L99:
 2095               	.LVL82:
 2096 005a 9F01      		movw r18,r30
 2097 005c 285E      		subi r18,-24
 2098 005e 3F4F      		sbci r19,-1
 2099 0060 00C0      		rjmp .L100
 2100               	.LVL83:
 2101               	.L102:
 2102               	.LBE28:
 2103               	.LBB30:
 2104               	.LBB31:
 121:../src/main.c **** 			
 2105               		.loc 1 121 0 discriminator 3
 2106 0062 8091 0000 		lds r24,Apagado
 2107 0066 9091 0000 		lds r25,Apagado+1
 2108 006a A091 0000 		lds r26,Apagado+2
 2109 006e 8193      		st Z+,r24
 2110 0070 9193      		st Z+,r25
 2111 0072 A193      		st Z+,r26
 2112               	.LVL84:
 120:../src/main.c **** 			matrizJugador2[i][j] = Apagado;
 2113               		.loc 1 120 0 discriminator 3
 2114 0074 E217      		cp r30,r18
 2115 0076 F307      		cpc r31,r19
 2116 0078 01F4      		brne .L102
 2117               	.LVL85:
 2118 007a F901      		movw r30,r18
 2119               	.LBE31:
 119:../src/main.c **** 		for (int j=0; j<=7; j++)
 2120               		.loc 1 119 0 discriminator 2
 2121 007c 4217      		cp r20,r18
 2122 007e 5307      		cpc r21,r19
 2123 0080 01F0      		breq .L103
 2124               	.L101:
 2125               	.LVL86:
 2126 0082 9F01      		movw r18,r30
 2127 0084 285E      		subi r18,-24
 2128 0086 3F4F      		sbci r19,-1
 2129 0088 00C0      		rjmp .L102
 2130               	.LVL87:
 2131               	.L103:
 2132               	.LBE30:
 123:../src/main.c **** 	
 2133               		.loc 1 123 0
 2134               	/* #APP */
 2135               	 ;  123 "../src/main.c" 1
 2136 008a 7894      		sei
 2137               	 ;  0 "" 2
 125:../src/main.c **** }
 2138               		.loc 1 125 0
 2139               	/* #NOAPP */
 2140 008c 0E94 0000 		call gameOn
 2141               	.LVL88:
 2142               		.cfi_endproc
 2143               	.LFE71:
 2145               		.section	.text.clear_disp,"ax",@progbits
 2146               	.global	clear_disp
 2148               	clear_disp:
 2149               	.LFB86:
 429:../src/main.c **** 
 430:../src/main.c **** void clear_disp(void)
 431:../src/main.c **** {
 2150               		.loc 1 431 0
 2151               		.cfi_startproc
 2152               	/* prologue: function */
 2153               	/* frame size = 0 */
 2154               	/* stack size = 0 */
 2155               	.L__stack_usage = 0
 2156               	.LVL89:
 2157 0000 E0E0      		ldi r30,lo8(display_rgb)
 2158 0002 F0E0      		ldi r31,hi8(display_rgb)
 2159 0004 40E0      		ldi r20,lo8(display_rgb+192)
 2160 0006 50E0      		ldi r21,hi8(display_rgb+192)
 2161 0008 00C0      		rjmp .L108
 2162               	.LVL90:
 2163               	.L109:
 2164               	.LBB32:
 2165               	.LBB33:
 432:../src/main.c **** 	for(int r=0;r<=7;r++)
 433:../src/main.c **** 		for(int c=0;c<=7;c++)
 434:../src/main.c **** 			display_rgb[r][c] = Apagado;
 2166               		.loc 1 434 0 discriminator 3
 2167 000a 8091 0000 		lds r24,Apagado
 2168 000e 9091 0000 		lds r25,Apagado+1
 2169 0012 A091 0000 		lds r26,Apagado+2
 2170 0016 8193      		st Z+,r24
 2171 0018 9193      		st Z+,r25
 2172 001a A193      		st Z+,r26
 2173               	.LVL91:
 433:../src/main.c **** 			display_rgb[r][c] = Apagado;
 2174               		.loc 1 433 0 discriminator 3
 2175 001c E217      		cp r30,r18
 2176 001e F307      		cpc r31,r19
 2177 0020 01F4      		brne .L109
 2178 0022 F901      		movw r30,r18
 2179               	.LBE33:
 432:../src/main.c **** 	for(int r=0;r<=7;r++)
 2180               		.loc 1 432 0 discriminator 2
 2181 0024 4217      		cp r20,r18
 2182 0026 5307      		cpc r21,r19
 2183 0028 01F0      		breq .L107
 2184               	.L108:
 2185               	.LVL92:
 2186 002a 9F01      		movw r18,r30
 2187 002c 285E      		subi r18,-24
 2188 002e 3F4F      		sbci r19,-1
 2189 0030 00C0      		rjmp .L109
 2190               	.LVL93:
 2191               	.L107:
 2192 0032 0895      		ret
 2193               	.LBE32:
 2194               		.cfi_endproc
 2195               	.LFE86:
 2197               		.section	.text.softdelay,"ax",@progbits
 2198               	.global	softdelay
 2200               	softdelay:
 2201               	.LFB87:
 435:../src/main.c **** 				
 436:../src/main.c **** }
 437:../src/main.c **** 
 438:../src/main.c **** void softdelay(void)
 439:../src/main.c **** {
 2202               		.loc 1 439 0
 2203               		.cfi_startproc
 2204 0000 CF93      		push r28
 2205               	.LCFI74:
 2206               		.cfi_def_cfa_offset 3
 2207               		.cfi_offset 28, -2
 2208 0002 DF93      		push r29
 2209               	.LCFI75:
 2210               		.cfi_def_cfa_offset 4
 2211               		.cfi_offset 29, -3
 2212 0004 00D0      		rcall .
 2213 0006 00D0      		rcall .
 2214               	.LCFI76:
 2215               		.cfi_def_cfa_offset 8
 2216 0008 CDB7      		in r28,__SP_L__
 2217 000a DEB7      		in r29,__SP_H__
 2218               	.LCFI77:
 2219               		.cfi_def_cfa_register 28
 2220               	/* prologue: function */
 2221               	/* frame size = 4 */
 2222               	/* stack size = 6 */
 2223               	.L__stack_usage = 6
 440:../src/main.c **** 	volatile long int d;
 441:../src/main.c **** 	
 442:../src/main.c **** 	for (d=400000;d;d--)
 2224               		.loc 1 442 0
 2225 000c 80E8      		ldi r24,lo8(-128)
 2226 000e 9AE1      		ldi r25,lo8(26)
 2227 0010 A6E0      		ldi r26,lo8(6)
 2228 0012 B0E0      		ldi r27,0
 2229 0014 8983      		std Y+1,r24
 2230 0016 9A83      		std Y+2,r25
 2231 0018 AB83      		std Y+3,r26
 2232 001a BC83      		std Y+4,r27
 2233 001c 8981      		ldd r24,Y+1
 2234 001e 9A81      		ldd r25,Y+2
 2235 0020 AB81      		ldd r26,Y+3
 2236 0022 BC81      		ldd r27,Y+4
 2237 0024 892B      		or r24,r25
 2238 0026 8A2B      		or r24,r26
 2239 0028 8B2B      		or r24,r27
 2240 002a 01F0      		breq .L112
 2241               	.L115:
 2242               		.loc 1 442 0 is_stmt 0 discriminator 3
 2243 002c 8981      		ldd r24,Y+1
 2244 002e 9A81      		ldd r25,Y+2
 2245 0030 AB81      		ldd r26,Y+3
 2246 0032 BC81      		ldd r27,Y+4
 2247 0034 0197      		sbiw r24,1
 2248 0036 A109      		sbc r26,__zero_reg__
 2249 0038 B109      		sbc r27,__zero_reg__
 2250 003a 8983      		std Y+1,r24
 2251 003c 9A83      		std Y+2,r25
 2252 003e AB83      		std Y+3,r26
 2253 0040 BC83      		std Y+4,r27
 2254 0042 8981      		ldd r24,Y+1
 2255 0044 9A81      		ldd r25,Y+2
 2256 0046 AB81      		ldd r26,Y+3
 2257 0048 BC81      		ldd r27,Y+4
 2258 004a 892B      		or r24,r25
 2259 004c 8A2B      		or r24,r26
 2260 004e 8B2B      		or r24,r27
 2261 0050 01F4      		brne .L115
 2262               	.L112:
 2263               	/* epilogue start */
 443:../src/main.c **** 	{
 444:../src/main.c **** 	};
 445:../src/main.c **** 	
 446:../src/main.c **** }
 2264               		.loc 1 446 0 is_stmt 1
 2265 0052 0F90      		pop __tmp_reg__
 2266 0054 0F90      		pop __tmp_reg__
 2267 0056 0F90      		pop __tmp_reg__
 2268 0058 0F90      		pop __tmp_reg__
 2269 005a DF91      		pop r29
 2270 005c CF91      		pop r28
 2271 005e 0895      		ret
 2272               		.cfi_endproc
 2273               	.LFE87:
 2275               	.global	msg
 2276               		.section	.data.msg,"aw",@progbits
 2279               	msg:
 2280 0000 4865 6C6C 		.string	"Hello from ATmega328p\r\n  "
 2280      6F20 6672 
 2280      6F6D 2041 
 2280      546D 6567 
 2280      6133 3238 
 2281               	.global	carguerosJugador2
 2282               		.section	.data.carguerosJugador2,"aw",@progbits
 2285               	carguerosJugador2:
 2286 0000 06        		.byte	6
 2287 0001 06        		.byte	6
 2288 0002 00        		.byte	0
 2289 0003 07        		.byte	7
 2290 0004 06        		.byte	6
 2291 0005 00        		.byte	0
 2292 0006 02        		.byte	2
 2293 0007 02        		.byte	2
 2294 0008 00        		.byte	0
 2295 0009 02        		.byte	2
 2296 000a 03        		.byte	3
 2297 000b 00        		.byte	0
 2298               	.global	submarinosJugador2
 2299               		.section	.data.submarinosJugador2,"aw",@progbits
 2302               	submarinosJugador2:
 2303 0000 01        		.byte	1
 2304 0001 06        		.byte	6
 2305 0002 00        		.byte	0
 2306 0003 01        		.byte	1
 2307 0004 04        		.byte	4
 2308 0005 00        		.byte	0
 2309 0006 03        		.byte	3
 2310 0007 04        		.byte	4
 2311 0008 00        		.byte	0
 2312               	.global	carguerosJugador1
 2313               		.section	.data.carguerosJugador1,"aw",@progbits
 2316               	carguerosJugador1:
 2317 0000 07        		.byte	7
 2318 0001 07        		.byte	7
 2319 0002 00        		.byte	0
 2320 0003 07        		.byte	7
 2321 0004 06        		.byte	6
 2322 0005 00        		.byte	0
 2323 0006 05        		.byte	5
 2324 0007 05        		.byte	5
 2325 0008 00        		.byte	0
 2326 0009 04        		.byte	4
 2327 000a 05        		.byte	5
 2328 000b 00        		.byte	0
 2329               	.global	submarinosJugador1
 2330               		.section	.data.submarinosJugador1,"aw",@progbits
 2333               	submarinosJugador1:
 2334 0000 00        		.byte	0
 2335 0001 03        		.byte	3
 2336 0002 00        		.byte	0
 2337 0003 02        		.byte	2
 2338 0004 03        		.byte	3
 2339 0005 00        		.byte	0
 2340 0006 06        		.byte	6
 2341 0007 03        		.byte	3
 2342 0008 00        		.byte	0
 2343               		.comm	matrizJugador2,192,1
 2344               		.comm	matrizJugador1,192,1
 2345               		.comm	display_rgb,192,1
 2346               	.global	Apagado
 2347               		.section	.bss.Apagado,"aw",@nobits
 2350               	Apagado:
 2351 0000 0000 00   		.zero	3
 2352               	.global	Danado
 2353               		.section	.data.Danado,"aw",@progbits
 2356               	Danado:
 2357 0000 1E        		.byte	30
 2358 0001 1E        		.byte	30
 2359 0002 00        		.byte	0
 2360               	.global	Agua
 2361               		.section	.data.Agua,"aw",@progbits
 2364               	Agua:
 2365 0000 00        		.byte	0
 2366 0001 00        		.byte	0
 2367 0002 1E        		.byte	30
 2368               	.global	Hundido
 2369               		.section	.data.Hundido,"aw",@progbits
 2372               	Hundido:
 2373 0000 00        		.byte	0
 2374 0001 1E        		.byte	30
 2375 0002 00        		.byte	0
 2376               	.global	GamePointer
 2377               		.section	.data.GamePointer,"aw",@progbits
 2380               	GamePointer:
 2381 0000 19        		.byte	25
 2382 0001 00        		.byte	0
 2383 0002 00        		.byte	0
 2384               		.comm	p2disp,2,1
 2385               		.text
 2386               	.Letext0:
 2387               		.file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 2388               		.file 4 "../src/Timer.h"
 2389               		.file 5 "../src/joystickReads.h"
 2390               		.file 6 "../src/UART.h"
 2391               		.file 7 "../src/ADC.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
              main.s:2      *ABS*:0000003e __SP_H__
              main.s:3      *ABS*:0000003d __SP_L__
              main.s:4      *ABS*:0000003f __SREG__
              main.s:5      *ABS*:00000000 __tmp_reg__
              main.s:6      *ABS*:00000001 __zero_reg__
              main.s:13     .text.checkPlayer1Win:00000000 checkPlayer1Win
              main.s:32     .text.checkPlayer2Win:00000000 checkPlayer2Win
              main.s:2333   .data.submarinosJugador1:00000000 submarinosJugador1
              main.s:2316   .data.carguerosJugador1:00000000 carguerosJugador1
              main.s:195    .text.delaySeconds:00000000 delaySeconds
              main.s:282    .text.copyArrayOf1:00000000 copyArrayOf1
                            *COM*:000000c0 matrizJugador1
                            *COM*:000000c0 display_rgb
              main.s:351    .text.copyArrayOf2:00000000 copyArrayOf2
                            *COM*:000000c0 matrizJugador2
              main.s:420    .text.scanSubmarinos1:00000000 scanSubmarinos1
              main.s:2372   .data.Hundido:00000000 Hundido
              main.s:573    .text.scanSubmarinos2:00000000 scanSubmarinos2
              main.s:2302   .data.submarinosJugador2:00000000 submarinosJugador2
              main.s:726    .text.scanCargueros1:00000000 scanCargueros1
              main.s:2356   .data.Danado:00000000 Danado
              main.s:1063   .text.shootPlayer1:00000000 shootPlayer1
              main.s:2364   .data.Agua:00000000 Agua
              main.s:1139   .text.playPlayer2:00000000 playPlayer2
              main.s:2380   .data.GamePointer:00000000 GamePointer
                            *COM*:00000002 p2disp
              main.s:1342   .text.scanCargueros2:00000000 scanCargueros2
              main.s:2285   .data.carguerosJugador2:00000000 carguerosJugador2
              main.s:1679   .text.shootPlayer2:00000000 shootPlayer2
              main.s:1755   .text.playPlayer1:00000000 playPlayer1
              main.s:1958   .text.gameOn:00000000 gameOn
              main.s:2030   .text.main:00000000 main
              main.s:2350   .bss.Apagado:00000000 Apagado
              main.s:2148   .text.clear_disp:00000000 clear_disp
              main.s:2200   .text.softdelay:00000000 softdelay
              main.s:2279   .data.msg:00000000 msg
                           .group:00000000 wm4.parts.h.38.424177e1c4c7502bdf2cd6eac0e66f1e
                           .group:00000000 wm4.sfr_defs.h.36.473802ecbcb5d4d38de6c7efbfcd3c60
                           .group:00000000 wm4.stdint.h.41.052d062c327f27e210bb72c3d087afe5
                           .group:00000000 wm4.inttypes.h.96.afb9c4be73a069861f8689c997efc518
                           .group:00000000 wm4.sfr_defs.h.128.38ceebe2fb099c106e85a566519e0f1a
                           .group:00000000 wm4.iom328p.h.44.29c929f46483155923fc58520c74ebf7
                           .group:00000000 wm4.portpins.h.34.21289185946cbf62723ecc8db6cdc3ff
                           .group:00000000 wm4.common.h.35.c7e66042b2128622b9d3bddccc9a39f4
                           .group:00000000 wm4.version.h.54.85699b1a50c61c991a37d67b69e79e95
                           .group:00000000 wm4.fuse.h.36.5c373c650020c0efef2cbaa98ea802c3
                           .group:00000000 wm4.lock.h.36.51f311078904691e8f8c3d70111251d8
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.stdlib.h.40.248a6087ef49adb4f4328833c0282d4b
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.stdlib.h.51.3a36e1d757b19eb9d8852fbf8bb7cd30
                           .group:00000000 wm4.compiler.h.71.f9633126e8a32454fdb20497dc57808e
                           .group:00000000 wm4.interrupt.h.36.b2193b640edda749ea0a45a8be5976c8
                           .group:00000000 wm4.interrupt_avr8.h.89.988a0fb0a0728821bb2ce6a5fad9a217
                           .group:00000000 wm4.pgmspace.h.83.7bf4a326041279617a872e0717310315
                           .group:00000000 wm4.pgmspace.h.98.de80e653d80602932888d287eea24d43
                           .group:00000000 wm4.progmem.h.56.1d8b28eb4bdbace2fba3d4aa9d1800d3
                           .group:00000000 wm4.compiler.h.162.3bca7208a79b237ff211f6b945969fd5
                           .group:00000000 wm4.ioport.h.38.48f501ae460febc49dd950c4a2361938
                           .group:00000000 wm4.mega_gpio.h.43.3e8869bf7dde66f4dae42caccabdc28f
                           .group:00000000 wm4.board.h.41.2d9694df0f6b670341666b9015632b94
                           .group:00000000 wm4.led.h.38.8c4408d5cc264ea8e7bbcc0ac6971d10
                           .group:00000000 wm4.atmega328p_xplained_mini.h.47.411278661c63ad4794d5f415bca0f65b
                           .group:00000000 wm4.delay.h.36.9b049a49ceee302c08fd72aec728bf54
                           .group:00000000 wm4.math.h.49.a63885b3cd597bc58738696048bb49a6
                           .group:00000000 wm4.ADC.h.10.4375d630963ad1b8b9d883a341299c49

UNDEFINED SYMBOLS
jButton
yMovement
xMovement
wrt_ws2812
playerTurn
init_ws2812
init_RTI
UART_Init
adc_init
wrt_Digit_Init
__do_copy_data
__do_clear_bss
