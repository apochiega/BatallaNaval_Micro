
GccMatrixWS2812 V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000005c4  00000658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e0  00800134  00800134  0000068c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000700  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000153c  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5a  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b4  00000000  00000000  00002a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  000043dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000113cd  00000000  00000000  000046b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051e  00000000  00000000  00015a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00015f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006fe9  00000000  00000000  0001609b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	40 c1       	rjmp	.+640    	; 0x2ba <__vector_14>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	a6 c1       	rjmp	.+844    	; 0x396 <__vector_18>
  4a:	00 00       	nop
  4c:	8b c1       	rjmp	.+790    	; 0x364 <__vector_19>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	d0 d1       	rcall	.+928    	; 0x43c <main>
  9c:	91 c2       	rjmp	.+1314   	; 0x5c0 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <init_ws2812>:
//		lpm	r18,Z+					;Load byte from source 
//
// Assembler Manual /// https://sourceware.org/binutils/docs/as/index.html
///////////////////////////////////////////////////////////////////////////

		push r23
  a0:	7f 93       	push	r23

		in	r23,DDRB			// DDRB|=PIXEL_PIN;
  a2:	74 b1       	in	r23, 0x04	; 4
        ori r23,PIXEL_PIN
  a4:	72 60       	ori	r23, 0x02	; 2
        out DDRB,r23
  a6:	74 b9       	out	0x04, r23	; 4

		in	r23,PORTB
  a8:	75 b1       	in	r23, 0x05	; 5
		andi r23,~(PIXEL_PIN)		// PORTB&=~(PIXEL_PIN)
  aa:	7d 7f       	andi	r23, 0xFD	; 253
        out PORTB, r23
  ac:	75 b9       	out	0x05, r23	; 5
		call	delay
  ae:	3d d0       	rcall	.+122    	; 0x12a <delay>

		pop r23
  b0:	7f 91       	pop	r23
		ret	
  b2:	08 95       	ret

000000b4 <wrt_ws2812>:


wrt_ws2812:
		cli
  b4:	f8 94       	cli
		push pixdata
  b6:	0f 93       	push	r16
		push grb_count
  b8:	1f 93       	push	r17

		push BitCount
  ba:	4f 93       	push	r20

000000bc <donext>:


donext:
		ldi r23,64  //numled
  bc:	70 e4       	ldi	r23, 0x40	; 64
		mov	ZL,r24
  be:	e8 2f       	mov	r30, r24
		mov	ZH,r25
loopg:

		call WritePix
  c0:	f9 2f       	mov	r31, r25

000000c2 <loopg>:
  c2:	07 d0       	rcall	.+14     	; 0xd2 <WritePix>
		dec r23
  c4:	7a 95       	dec	r23
		brne	loopg
  c6:	e9 f7       	brne	.-6      	; 0xc2 <loopg>

//		call delay
//		call delay

		pop	BitCount
  c8:	4f 91       	pop	r20
		pop grb_count
  ca:	1f 91       	pop	r17
		pop pixdata
  cc:	0f 91       	pop	r16
		sei
  ce:	78 94       	sei
		ret
  d0:	08 95       	ret

000000d2 <WritePix>:
* area in GRB order
* Registers used: R16-R21
*
********************/
WritePix:
		push r23
  d2:	7f 93       	push	r23
		ldi     grb_count,3		; 3 leds / pixel [Green Red Blue]
  d4:	13 e0       	ldi	r17, 0x03	; 3

000000d6 <next_led>:

next_led:
		ld		pixdata,Z+				; load led data (GRB)
  d6:	01 91       	ld	r16, Z+
		ldi		BitCount,8				; 8 bits / color
  d8:	48 e0       	ldi	r20, 0x08	; 8

000000da <nextbit>:
nextbit:

		in	r23,PORTB					//SetHI
  da:	75 b1       	in	r23, 0x05	; 5
		ori r23,(PIXEL_PIN)				// PORTB|=PIXEL_PIN;
  dc:	72 60       	ori	r23, 0x02	; 2
		out	PORTB,r23
  de:	75 b9       	out	0x05, r23	; 5

		rol		pixdata		;[1]		//Next bit
  e0:	00 1f       	adc	r16, r16
		brcs	ES1		;[1/2]
  e2:	78 f0       	brcs	.+30     	; 0x102 <ES1>

000000e4 <ES0>:

ES0:	Delay1
  e4:	00 00       	nop

		in	r23,PORTB					// SetLO
  e6:	75 b1       	in	r23, 0x05	; 5
		andi r23,~(PIXEL_PIN)			// PORTB&=~(PIXEL_PIN)
  e8:	7d 7f       	andi	r23, 0xFD	; 253
		out	PORTB,r23
  ea:	75 b9       	out	0x05, r23	; 5
	...

		Delay8
		dec		BitCount
  fc:	4a 95       	dec	r20
		brne	nextbit
  fe:	69 f7       	brne	.-38     	; 0xda <nextbit>
		rjmp	txend					//All bits sent -> done!!
 100:	10 c0       	rjmp	.+32     	; 0x122 <txend>

00000102 <ES1>:
	...

ES1:
		Delay9
 112:	00 00       	nop

		in	r23,PORTB					//SetLO
 114:	75 b1       	in	r23, 0x05	; 5
		andi r23,~(PIXEL_PIN)			// PORTB&=~(PIXEL_PIN)
 116:	7d 7f       	andi	r23, 0xFD	; 253
		out	PORTB,r23
 118:	75 b9       	out	0x05, r23	; 5


		Delay1                       
 11a:	00 00       	nop
		dec		BitCount
 11c:	4a 95       	dec	r20
		brne	nextbit
 11e:	e9 f6       	brne	.-70     	; 0xda <nextbit>
	...

00000122 <txend>:
		nop

txend:	dec		grb_count
 122:	1a 95       	dec	r17
		brne	next_led				// Next Led (color)
 124:	c1 f6       	brne	.-80     	; 0xd6 <next_led>

00000126 <txdone>:
	 

txdone:	pop	r23
 126:	7f 91       	pop	r23
		ret
 128:	08 95       	ret

0000012a <delay>:




delay:  
		push r19
 12a:	3f 93       	push	r19
		push r20
 12c:	4f 93       	push	r20
		push r21
 12e:	5f 93       	push	r21
		 
		ldi  r21, 50
 130:	52 e3       	ldi	r21, 0x32	; 50
		ldi  r19, TFAST	
 132:	3f ef       	ldi	r19, 0xFF	; 255
		ldi  r20, TSLOW
 134:	4f ef       	ldi	r20, 0xFF	; 255

00000136 <reload>:
reload:	dec  r19
 136:	3a 95       	dec	r19
		brne reload
 138:	f1 f7       	brne	.-4      	; 0x136 <reload>
		ldi	r19,TFAST
 13a:	3f ef       	ldi	r19, 0xFF	; 255
		dec  r20
 13c:	4a 95       	dec	r20
		brne reload
 13e:	d9 f7       	brne	.-10     	; 0x136 <reload>
		ldi  r20, TSLOW
 140:	4f ef       	ldi	r20, 0xFF	; 255
		dec	 r21
 142:	5a 95       	dec	r21
		brne reload
 144:	c1 f7       	brne	.-16     	; 0x136 <reload>

		pop  r21
 146:	5f 91       	pop	r21
		pop  r20
 148:	4f 91       	pop	r20
		pop  r19
 14a:	3f 91       	pop	r19
 14c:	08 95       	ret

0000014e <wrt_Digit_Init>:
 14e:	4f 93       	push	r20
 150:	4a b1       	in	r20, 0x0a	; 10
 152:	41 69       	ori	r20, 0x91	; 145
 154:	4a b9       	out	0x0a, r20	; 10
 156:	44 b1       	in	r20, 0x04	; 4
 158:	41 60       	ori	r20, 0x01	; 1
 15a:	44 b9       	out	0x04, r20	; 4
 15c:	4f 91       	pop	r20
 15e:	08 95       	ret

00000160 <wrt_Digit>:
 160:	8b 30       	cpi	r24, 0x0B	; 11
 162:	84 f4       	brge	.+32     	; 0x184 <end>
 164:	6a 95       	dec	r22
 166:	64 30       	cpi	r22, 0x04	; 4
 168:	6c f4       	brge	.+26     	; 0x184 <end>
 16a:	0d d0       	rcall	.+26     	; 0x186 <value_to_ss>
 16c:	1e d0       	rcall	.+60     	; 0x1aa <send_byte>
 16e:	14 d0       	rcall	.+40     	; 0x198 <digit_to_display>
 170:	86 2f       	mov	r24, r22
 172:	1b d0       	rcall	.+54     	; 0x1aa <send_byte>
 174:	49 b1       	in	r20, 0x09	; 9
 176:	40 61       	ori	r20, 0x10	; 16
 178:	4b b9       	out	0x0b, r20	; 11
 17a:	00 00       	nop
 17c:	00 00       	nop
 17e:	49 b1       	in	r20, 0x09	; 9
 180:	4f 7e       	andi	r20, 0xEF	; 239
 182:	4b b9       	out	0x0b, r20	; 11

00000184 <end>:
 184:	08 95       	ret

00000186 <value_to_ss>:
 186:	5f 93       	push	r21
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	e4 ee       	ldi	r30, 0xE4	; 228
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	e8 0f       	add	r30, r24
 190:	f5 1f       	adc	r31, r21
 192:	84 91       	lpm	r24, Z
 194:	5f 91       	pop	r21
 196:	08 95       	ret

00000198 <digit_to_display>:
 198:	5f 93       	push	r21
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	e0 ef       	ldi	r30, 0xF0	; 240
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	e6 0f       	add	r30, r22
 1a2:	f5 1f       	adc	r31, r21
 1a4:	64 91       	lpm	r22, Z
 1a6:	5f 91       	pop	r21
 1a8:	08 95       	ret

000001aa <send_byte>:
 1aa:	7f 93       	push	r23
 1ac:	2f 93       	push	r18
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	78 e0       	ldi	r23, 0x08	; 8
 1b4:	50 e0       	ldi	r21, 0x00	; 0

000001b6 <loadLoop>:
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	87 95       	ror	r24
 1ba:	25 1f       	adc	r18, r21
 1bc:	43 b1       	in	r20, 0x03	; 3
 1be:	4e 7f       	andi	r20, 0xFE	; 254
 1c0:	42 2b       	or	r20, r18
 1c2:	45 b9       	out	0x05, r20	; 5
 1c4:	49 b1       	in	r20, 0x09	; 9
 1c6:	40 68       	ori	r20, 0x80	; 128
 1c8:	4b b9       	out	0x0b, r20	; 11
 1ca:	00 00       	nop
 1cc:	00 00       	nop
 1ce:	49 b1       	in	r20, 0x09	; 9
 1d0:	4f 77       	andi	r20, 0x7F	; 127
 1d2:	4b b9       	out	0x0b, r20	; 11
 1d4:	7a 95       	dec	r23
 1d6:	70 30       	cpi	r23, 0x00	; 0
 1d8:	71 f7       	brne	.-36     	; 0x1b6 <loadLoop>
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	2f 91       	pop	r18
 1e0:	7f 91       	pop	r23
 1e2:	08 95       	ret

000001e4 <ss_value>:
 1e4:	03 9f       	mul	r16, r19
 1e6:	25 0d       	add	r18, r5
 1e8:	99 49       	sbci	r25, 0x99	; 153
 1ea:	41 1f       	adc	r20, r17
 1ec:	01 19       	sub	r16, r1
 1ee:	ff 00       	.word	0x00ff	; ????

000001f0 <display_digit_value>:
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	20 10       	cpse	r2, r0

000001f4 <adc_init>:
 1f4:	ea e7       	ldi	r30, 0x7A	; 122
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	87 60       	ori	r24, 0x07	; 7
 1fc:	80 83       	st	Z, r24
 1fe:	ac e7       	ldi	r26, 0x7C	; 124
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	8c 91       	ld	r24, X
 204:	80 64       	ori	r24, 0x40	; 64
 206:	8c 93       	st	X, r24
 208:	80 81       	ld	r24, Z
 20a:	80 68       	ori	r24, 0x80	; 128
 20c:	80 83       	st	Z, r24
 20e:	80 81       	ld	r24, Z
 210:	80 64       	ori	r24, 0x40	; 64
 212:	80 83       	st	Z, r24
 214:	08 95       	ret

00000216 <read_adc>:
 216:	ec e7       	ldi	r30, 0x7C	; 124
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	90 81       	ld	r25, Z
 21c:	90 7f       	andi	r25, 0xF0	; 240
 21e:	90 83       	st	Z, r25
 220:	90 81       	ld	r25, Z
 222:	89 2b       	or	r24, r25
 224:	80 83       	st	Z, r24
 226:	ea e7       	ldi	r30, 0x7A	; 122
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	80 64       	ori	r24, 0x40	; 64
 22e:	80 83       	st	Z, r24
 230:	80 81       	ld	r24, Z
 232:	86 fd       	sbrc	r24, 6
 234:	fd cf       	rjmp	.-6      	; 0x230 <read_adc+0x1a>
 236:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 23a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 23e:	08 95       	ret

00000240 <read_VRX>:
 240:	85 e0       	ldi	r24, 0x05	; 5
 242:	e9 cf       	rjmp	.-46     	; 0x216 <read_adc>
 244:	08 95       	ret

00000246 <QueueInit>:
 246:	89 e3       	ldi	r24, 0x39	; 57
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <pin+0x1>
 24e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <pin>
 252:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x1>
 256:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
 25a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <news>
 25e:	08 95       	ret

00000260 <PushQueue>:
 260:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <news>
 264:	94 31       	cpi	r25, 0x14	; 20
 266:	20 f0       	brcs	.+8      	; 0x270 <PushQueue+0x10>
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <news>
 26e:	08 95       	ret
 270:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <pin>
 274:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <pin+0x1>
 278:	9f 01       	movw	r18, r30
 27a:	2f 5f       	subi	r18, 0xFF	; 255
 27c:	3f 4f       	sbci	r19, 0xFF	; 255
 27e:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <pin+0x1>
 282:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <pin>
 286:	80 83       	st	Z, r24
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 0f       	add	r24, r25
 28c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <news>
 290:	2d 54       	subi	r18, 0x4D	; 77
 292:	31 40       	sbci	r19, 0x01	; 1
 294:	31 f4       	brne	.+12     	; 0x2a2 <PushQueue+0x42>
 296:	29 e3       	ldi	r18, 0x39	; 57
 298:	31 e0       	ldi	r19, 0x01	; 1
 29a:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <pin+0x1>
 29e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <pin>
 2a2:	08 95       	ret

000002a4 <init_RTI>:
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	84 bd       	out	0x24, r24	; 36
 2a8:	94 e0       	ldi	r25, 0x04	; 4
 2aa:	95 bd       	out	0x25, r25	; 37
 2ac:	9d e7       	ldi	r25, 0x7D	; 125
 2ae:	97 bd       	out	0x27, r25	; 39
 2b0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2b4:	25 9a       	sbi	0x04, 5	; 4
 2b6:	2d 98       	cbi	0x05, 5	; 5
 2b8:	08 95       	ret

000002ba <__vector_14>:
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d0:	89 2b       	or	r24, r25
 2d2:	51 f0       	breq	.+20     	; 0x2e8 <__vector_14+0x2e>
 2d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e6:	0a c0       	rjmp	.+20     	; 0x2fc <__vector_14+0x42>
 2e8:	88 e2       	ldi	r24, 0x28	; 40
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f4:	95 b1       	in	r25, 0x05	; 5
 2f6:	80 e2       	ldi	r24, 0x20	; 32
 2f8:	89 27       	eor	r24, r25
 2fa:	85 b9       	out	0x05, r24	; 5
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <UART_Init>:
 30a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 30e:	87 e6       	ldi	r24, 0x67	; 103
 310:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 314:	86 e0       	ldi	r24, 0x06	; 6
 316:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 31a:	e1 ec       	ldi	r30, 0xC1	; 193
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	88 e1       	ldi	r24, 0x18	; 24
 320:	80 83       	st	Z, r24
 322:	80 81       	ld	r24, Z
 324:	80 68       	ori	r24, 0x80	; 128
 326:	80 83       	st	Z, r24
 328:	8e df       	rcall	.-228    	; 0x246 <QueueInit>
 32a:	8f e9       	ldi	r24, 0x9F	; 159
 32c:	9f e0       	ldi	r25, 0x0F	; 15
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <UART_Init+0x24>
 332:	00 c0       	rjmp	.+0      	; 0x334 <UART_Init+0x2a>
 334:	00 00       	nop
 336:	08 95       	ret

00000338 <UART_TransmitPolling>:
 338:	e0 ec       	ldi	r30, 0xC0	; 192
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	90 81       	ld	r25, Z
 33e:	95 ff       	sbrs	r25, 5
 340:	fd cf       	rjmp	.-6      	; 0x33c <UART_TransmitPolling+0x4>
 342:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 346:	08 95       	ret

00000348 <UART_putstring>:
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	ec 01       	movw	r28, r24
 34e:	88 81       	ld	r24, Y
 350:	88 23       	and	r24, r24
 352:	29 f0       	breq	.+10     	; 0x35e <UART_putstring+0x16>
 354:	21 96       	adiw	r28, 0x01	; 1
 356:	f0 df       	rcall	.-32     	; 0x338 <UART_TransmitPolling>
 358:	89 91       	ld	r24, Y+
 35a:	81 11       	cpse	r24, r1
 35c:	fc cf       	rjmp	.-8      	; 0x356 <UART_putstring+0xe>
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <__vector_19>:
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	8f 93       	push	r24
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
 374:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USART_TransmitBuffer>
 378:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 37c:	e1 ec       	ldi	r30, 0xC1	; 193
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	8f 7d       	andi	r24, 0xDF	; 223
 384:	80 83       	st	Z, r24
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	8f 91       	pop	r24
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <__vector_18>:
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
 3b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3bc:	51 df       	rcall	.-350    	; 0x260 <PushQueue>
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	bf 91       	pop	r27
 3c4:	af 91       	pop	r26
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	7f 91       	pop	r23
 3cc:	6f 91       	pop	r22
 3ce:	5f 91       	pop	r21
 3d0:	4f 91       	pop	r20
 3d2:	3f 91       	pop	r19
 3d4:	2f 91       	pop	r18
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <clear_disp>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e0:	e2 e5       	ldi	r30, 0x52	; 82
 3e2:	f1 e0       	ldi	r31, 0x01	; 1
 3e4:	42 e1       	ldi	r20, 0x12	; 18
 3e6:	52 e0       	ldi	r21, 0x02	; 2
 3e8:	10 c0       	rjmp	.+32     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3ea:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Apagado>
 3ee:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <Apagado+0x1>
 3f2:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <Apagado+0x2>
 3f6:	81 93       	st	Z+, r24
 3f8:	91 93       	st	Z+, r25
 3fa:	a1 93       	st	Z+, r26
 3fc:	e2 17       	cp	r30, r18
 3fe:	f3 07       	cpc	r31, r19
 400:	a1 f7       	brne	.-24     	; 0x3ea <clear_disp+0xa>
 402:	f9 01       	movw	r30, r18
 404:	42 17       	cp	r20, r18
 406:	53 07       	cpc	r21, r19
 408:	21 f0       	breq	.+8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40a:	9f 01       	movw	r18, r30
 40c:	28 5e       	subi	r18, 0xE8	; 232
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
 410:	ec cf       	rjmp	.-40     	; 0x3ea <clear_disp+0xa>
 412:	08 95       	ret

00000414 <TB_joy1>:
 414:	15 df       	rcall	.-470    	; 0x240 <read_VRX>
 416:	89 35       	cpi	r24, 0x59	; 89
 418:	92 40       	sbci	r25, 0x02	; 2
 41a:	20 f0       	brcs	.+8      	; 0x424 <TB_joy1+0x10>
 41c:	88 e2       	ldi	r24, 0x28	; 40
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	93 cf       	rjmp	.-218    	; 0x348 <UART_putstring>
 422:	08 95       	ret
 424:	0d df       	rcall	.-486    	; 0x240 <read_VRX>
 426:	80 39       	cpi	r24, 0x90	; 144
 428:	91 40       	sbci	r25, 0x01	; 1
 42a:	20 f4       	brcc	.+8      	; 0x434 <TB_joy1+0x20>
 42c:	8b e2       	ldi	r24, 0x2B	; 43
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	8b cf       	rjmp	.-234    	; 0x348 <UART_putstring>
 432:	08 95       	ret
 434:	80 e3       	ldi	r24, 0x30	; 48
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	87 cf       	rjmp	.-242    	; 0x348 <UART_putstring>
 43a:	08 95       	ret

0000043c <main>:
 43c:	31 de       	rcall	.-926    	; 0xa0 <init_ws2812>
 43e:	32 df       	rcall	.-412    	; 0x2a4 <init_RTI>
 440:	64 df       	rcall	.-312    	; 0x30a <UART_Init>
 442:	d8 de       	rcall	.-592    	; 0x1f4 <adc_init>
 444:	84 de       	rcall	.-760    	; 0x14e <wrt_Digit_Init>
 446:	82 e5       	ldi	r24, 0x52	; 82
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <p2disp+0x1>
 44e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <p2disp>
 452:	78 94       	sei
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	77 df       	rcall	.-274    	; 0x348 <UART_putstring>
 45a:	63 e0       	ldi	r22, 0x03	; 3
 45c:	84 e0       	ldi	r24, 0x04	; 4
 45e:	80 de       	rcall	.-768    	; 0x160 <wrt_Digit>
 460:	bf df       	rcall	.-130    	; 0x3e0 <clear_disp>
 462:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <p2disp>
 466:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <p2disp+0x1>
 46a:	24 de       	rcall	.-952    	; 0xb4 <wrt_ws2812>
 46c:	2f ef       	ldi	r18, 0xFF	; 255
 46e:	89 e6       	ldi	r24, 0x69	; 105
 470:	98 e1       	ldi	r25, 0x18	; 24
 472:	21 50       	subi	r18, 0x01	; 1
 474:	80 40       	sbci	r24, 0x00	; 0
 476:	90 40       	sbci	r25, 0x00	; 0
 478:	e1 f7       	brne	.-8      	; 0x472 <main+0x36>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <main+0x40>
 47c:	00 00       	nop
 47e:	0f 2e       	mov	r0, r31
 480:	f2 e5       	ldi	r31, 0x52	; 82
 482:	af 2e       	mov	r10, r31
 484:	f1 e0       	ldi	r31, 0x01	; 1
 486:	bf 2e       	mov	r11, r31
 488:	f0 2d       	mov	r31, r0
 48a:	22 e1       	ldi	r18, 0x12	; 18
 48c:	32 e0       	ldi	r19, 0x02	; 2
 48e:	f5 01       	movw	r30, r10
 490:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Hundido>
 494:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Hundido+0x1>
 498:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <Hundido+0x2>
 49c:	80 83       	st	Z, r24
 49e:	91 83       	std	Z+1, r25	; 0x01
 4a0:	a2 83       	std	Z+2, r26	; 0x02
 4a2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <GamePointer>
 4a6:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <GamePointer+0x1>
 4aa:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <GamePointer+0x2>
 4ae:	84 87       	std	Z+12, r24	; 0x0c
 4b0:	95 87       	std	Z+13, r25	; 0x0d
 4b2:	a6 87       	std	Z+14, r26	; 0x0e
 4b4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Agua>
 4b8:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <Agua+0x1>
 4bc:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <Agua+0x2>
 4c0:	85 8b       	std	Z+21, r24	; 0x15
 4c2:	96 8b       	std	Z+22, r25	; 0x16
 4c4:	a7 8b       	std	Z+23, r26	; 0x17
 4c6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Danado>
 4ca:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Danado+0x1>
 4ce:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <Danado+0x2>
 4d2:	81 87       	std	Z+9, r24	; 0x09
 4d4:	92 87       	std	Z+10, r25	; 0x0a
 4d6:	a3 87       	std	Z+11, r26	; 0x0b
 4d8:	87 87       	std	Z+15, r24	; 0x0f
 4da:	90 8b       	std	Z+16, r25	; 0x10
 4dc:	a1 8b       	std	Z+17, r26	; 0x11
 4de:	78 96       	adiw	r30, 0x18	; 24
 4e0:	e2 17       	cp	r30, r18
 4e2:	f3 07       	cpc	r31, r19
 4e4:	a9 f6       	brne	.-86     	; 0x490 <main+0x54>
 4e6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <p2disp>
 4ea:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <p2disp+0x1>
 4ee:	e2 dd       	rcall	.-1084   	; 0xb4 <wrt_ws2812>
 4f0:	ef ef       	ldi	r30, 0xFF	; 255
 4f2:	f5 ea       	ldi	r31, 0xA5	; 165
 4f4:	2e e0       	ldi	r18, 0x0E	; 14
 4f6:	e1 50       	subi	r30, 0x01	; 1
 4f8:	f0 40       	sbci	r31, 0x00	; 0
 4fa:	20 40       	sbci	r18, 0x00	; 0
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <main+0xba>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <main+0xc4>
 500:	00 00       	nop
 502:	6e df       	rcall	.-292    	; 0x3e0 <clear_disp>
 504:	0f 2e       	mov	r0, r31
 506:	f3 ea       	ldi	r31, 0xA3	; 163
 508:	cf 2e       	mov	r12, r31
 50a:	f1 e0       	ldi	r31, 0x01	; 1
 50c:	df 2e       	mov	r13, r31
 50e:	f0 2d       	mov	r31, r0
 510:	0f 2e       	mov	r0, r31
 512:	fb eb       	ldi	r31, 0xBB	; 187
 514:	ef 2e       	mov	r14, r31
 516:	f1 e0       	ldi	r31, 0x01	; 1
 518:	ff 2e       	mov	r15, r31
 51a:	f0 2d       	mov	r31, r0
 51c:	c6 ea       	ldi	r28, 0xA6	; 166
 51e:	d1 e0       	ldi	r29, 0x01	; 1
 520:	0e eb       	ldi	r16, 0xBE	; 190
 522:	11 e0       	ldi	r17, 0x01	; 1
 524:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Hundido>
 528:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Hundido+0x1>
 52c:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <Hundido+0x2>
 530:	f6 01       	movw	r30, r12
 532:	80 83       	st	Z, r24
 534:	91 83       	std	Z+1, r25	; 0x01
 536:	a2 83       	std	Z+2, r26	; 0x02
 538:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <GamePointer>
 53c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <GamePointer+0x1>
 540:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <GamePointer+0x2>
 544:	f7 01       	movw	r30, r14
 546:	80 83       	st	Z, r24
 548:	91 83       	std	Z+1, r25	; 0x01
 54a:	a2 83       	std	Z+2, r26	; 0x02
 54c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Danado>
 550:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Danado+0x1>
 554:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <Danado+0x2>
 558:	88 83       	st	Y, r24
 55a:	99 83       	std	Y+1, r25	; 0x01
 55c:	aa 83       	std	Y+2, r26	; 0x02
 55e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Agua>
 562:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <Agua+0x1>
 566:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <Agua+0x2>
 56a:	f8 01       	movw	r30, r16
 56c:	80 83       	st	Z, r24
 56e:	91 83       	std	Z+1, r25	; 0x01
 570:	a2 83       	std	Z+2, r26	; 0x02
 572:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <p2disp>
 576:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <p2disp+0x1>
 57a:	9c dd       	rcall	.-1224   	; 0xb4 <wrt_ws2812>
 57c:	ff ef       	ldi	r31, 0xFF	; 255
 57e:	21 ee       	ldi	r18, 0xE1	; 225
 580:	84 e0       	ldi	r24, 0x04	; 4
 582:	f1 50       	subi	r31, 0x01	; 1
 584:	20 40       	sbci	r18, 0x00	; 0
 586:	80 40       	sbci	r24, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <main+0x146>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <main+0x150>
 58c:	00 00       	nop
 58e:	28 df       	rcall	.-432    	; 0x3e0 <clear_disp>
 590:	9b e1       	ldi	r25, 0x1B	; 27
 592:	c9 1a       	sub	r12, r25
 594:	d1 08       	sbc	r13, r1
 596:	e5 e1       	ldi	r30, 0x15	; 21
 598:	ee 0e       	add	r14, r30
 59a:	f1 1c       	adc	r15, r1
 59c:	65 97       	sbiw	r28, 0x15	; 21
 59e:	05 5e       	subi	r16, 0xE5	; 229
 5a0:	1f 4f       	sbci	r17, 0xFF	; 255
 5a2:	ac 16       	cp	r10, r28
 5a4:	bd 06       	cpc	r11, r29
 5a6:	09 f0       	breq	.+2      	; 0x5aa <main+0x16e>
 5a8:	bd cf       	rjmp	.-134    	; 0x524 <main+0xe8>
 5aa:	34 df       	rcall	.-408    	; 0x414 <TB_joy1>
 5ac:	ff ef       	ldi	r31, 0xFF	; 255
 5ae:	21 ee       	ldi	r18, 0xE1	; 225
 5b0:	84 e0       	ldi	r24, 0x04	; 4
 5b2:	f1 50       	subi	r31, 0x01	; 1
 5b4:	20 40       	sbci	r18, 0x00	; 0
 5b6:	80 40       	sbci	r24, 0x00	; 0
 5b8:	e1 f7       	brne	.-8      	; 0x5b2 <main+0x176>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <main+0x180>
 5bc:	00 00       	nop
 5be:	f5 cf       	rjmp	.-22     	; 0x5aa <main+0x16e>

000005c0 <_exit>:
 5c0:	f8 94       	cli

000005c2 <__stop_program>:
 5c2:	ff cf       	rjmp	.-2      	; 0x5c2 <__stop_program>
